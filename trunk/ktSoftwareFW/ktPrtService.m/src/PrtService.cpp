// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// PrtService.cpp
// Header definition of PrtService
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2011  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "PrtService.h"
#include "CATSupport.h"
#include "CATIBodyRequest.h"



const CATUnicodeString StrDivisionName = "########";
const CATUnicodeString StrDivisionValue = "########";
 
CATImplementClass( PrtService,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// PrtService : constructor
//-----------------------------------------------------------------------------
PrtService::PrtService():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// PrtService : destructor
//-----------------------------------------------------------------------------
PrtService::~PrtService()
{
}
 
//-----------------------------------------------------------------------------
// PrtService : copy constructor
//-----------------------------------------------------------------------------
PrtService::PrtService(PrtService& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// PrtService : equal operator
//-----------------------------------------------------------------------------
PrtService& PrtService::operator=(PrtService& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}


//**********************************************************************************************************************************************************************************************************************************************************
//环境变量操作
//**********************************************************************************************************************************************************************************************************************************************************

//获取CATIA环境文件中的某个参数值
//参数说明：iKey 变量名；oValue变量值
HRESULT PrtService::GetEnvValue(const CATUnicodeString& iKey, CATUnicodeString& oValue)
{
	HRESULT rc = S_OK;

	char* value = NULL;
	if ( CATLibSuccess == CATGetEnvValue(iKey, &value ) )
	{
		oValue = value;
	}
	else 
	{
		cout << "CAEPubMethods:GetEnvValue() - INFO: Can't find the value of " << iKey.ConvertToChar() << endl;
	}

	return rc;
}

//**********************************************************************************************************************************************************************************************************************************************************
//几何图形集操作分类
//**********************************************************************************************************************************************************************************************************************************************************

//创造几何图形集
HRESULT PrtService::CreateGSMTool(CATDocument* piDocument,CATUnicodeString iName,CATISpecObject_var &oGSSpecObj)
{
	HRESULT rc=E_FAIL;
	// 获得容器
	CATInit_var spInitOnDoc = piDocument;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		rc = E_FAIL;
		return rc;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return rc;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	
	CATIMechanicalRootFactory_var spMechRootFact=piPrtCont;
	CATIPrtPart_var spPart = piPrtCont->GetPart() ;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATISpecObject_var spParentSpecObject=spPart;
	rc=spMechRootFact->CreateGeometricalSet(iName,spParentSpecObject,oGSSpecObj);
	return rc;
}

//获取几何图形集
HRESULT PrtService::ObtainGSMTool(CATDocument* piDocument,CATUnicodeString iName,CATISpecObject_var &oGSSpecObj)
{

	HRESULT rc = S_OK;
	// 获得容器
	CATInit_var spInitOnDoc = piDocument;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return rc;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return rc;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;

	CATIMechanicalRootFactory_var spMechRootFact=piPrtCont;
	CATIPrtPart_var spPart = piPrtCont->GetPart() ;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATIDescendants_var spPartAsDescendants = spPart;
	CATListValCATISpecObject_var  oLst; 
	spPartAsDescendants->GetDirectChildren("CATIMmiNonOrderedGeometricalSet",oLst);
	for (int i=1;i<=oLst.Size();i++)
	{
		if(iName==PrtService::GetAlias(oLst[i]))
		{
			oGSSpecObj=oLst[i];
			rc = E_FAIL;
			return rc;
		}
	}
	return rc;
}

//获取或者创建GSMTool
HRESULT PrtService::CreateOrRetrieveGS(CATISpecObject_var iParentGS,CATUnicodeString iName,CATISpecObject_var &oGSSpecObj)
{
	HRESULT rc=E_FAIL;
	CATIDescendants_var spDescendants = iParentGS;
	CATListValCATISpecObject_var  oLst; 
	spDescendants->GetDirectChildren("CATIMmiNonOrderedGeometricalSet",oLst);
	for (int i=1;i<=oLst.Size();i++)
	{
		if(iName==PrtService::GetAlias(oLst[i]))
		{
			oGSSpecObj=oLst[i];
			return S_OK;
		}
	}
	CATIPrtContainer_var spPartContainer=iParentGS->GetFeatContainer();
	CATIMechanicalRootFactory_var spMechRootFact=iParentGS->GetFeatContainer();
	rc=spMechRootFact->CreateGeometricalSet(iName,iParentGS,oGSSpecObj,0);
	return rc;
}

//查询几何图形集
//参数说明：
void PrtService::CAAGsiSearchFeatureFromName(CATDocument * ipDoc, CATListValCATUnicodeString  &ListStrSearchedFeatName,CATListValCATISpecObject_var &ListValOfspSearchGSMTool)
{
	HRESULT rc = S_OK;
	CATISpecObject_var  spSpecFound;
	int iFound = 0;

	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();

	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATIDescendants_var spDescendants=  spPrtPart;
	int childrenNb= spDescendants->GetNumberOfChildren();
	CATIAlias_var aliasOnPart = spPrtPart ;

	//cout << endl ; 
	//cout << "Part name  = " <<aliasOnPart ->GetAlias().ConvertToChar() << endl;

	for (int i= 1; i<= ListStrSearchedFeatName.Size(); i++)
	{
		for (int j = 1;j <= childrenNb;j++)
		{
			CATISpecObject_var spChild = spDescendants->GetChildAtPosition(j);
			CATIGSMTool_var spGsmTool = spChild ; 

			//判断是否是几何图形集
			if ( spGsmTool != NULL_var) {
				CATIAlias_var aliasOnCurBody = spChild ;
				CATUnicodeString ToolCurrent  = aliasOnCurBody->GetAlias(); 
				//判断是否同名
				if (ListStrSearchedFeatName[i] == ToolCurrent) {
					ListValOfspSearchGSMTool.Append(spChild) ;
					iFound =1 ;

					break ; 
				}
			}

		}

		if (j == childrenNb+1)
		{
			ListValOfspSearchGSMTool.Append(NULL_var) ;
		}

	}

}

// Create GeometricFeaturesSets
// ---------------------------------------------------------------------------
HRESULT PrtService::CAAGsiCreateGeometricFeatureSets (const CATIContainer_var &ispCont, const CATUnicodeString& iName, 
													  const CATISpecObject_var & spInputParentTool , CATISpecObject_var & spSpecTool,  
													  int & oDiag, int iTopLevel, int iType)
{

	HRESULT rc = S_OK ; 
#ifdef DEBUG_CAASERVICES 
	cout  << "(CAAGsiServices) CAAGsiCreateSurfacicFeatureSet "  << endl;
#endif 

	oDiag = -1; 
	// Create a new GSM Tool  
	// Warning:   father of New GSMTool can be an object or the root PartBody tool  

	// Phase 1: Retrieve the current Part container
	// --------------------------------------------- 
	CATIPrtContainer_var          spPartCont   = ispCont;
	CATIPrtPart_var               spPart       = spPartCont -> GetPart();


	if (NULL_var != spPart )
	{
		int Position = 0;
		// Note: iTopLevel allow to create the tools directly under the root of the graph  
		// iTopLevel = 0 : Create under current feature  
		// iTopLevel = 1 : Create directly under Part 

		// Phase 1: Reterieve ParentForTool ito be insert Part or another Tool 
		// --------------------------------------------- 

		// Reference Part 
		CATISpecObject_var spSpecPart      = spPart;
		CATISpecObject_var spParentForTool ;

		// Tool is about to create under the Part 
		if (iTopLevel==1 ) {
			//cout << " (CAAGsiCreateGeometricFeatureSets)Case 1"<<endl ;

			spParentForTool = spPart ; 
		}
		// Tool is about to create under a defined Parent Tool 
		else   if (iTopLevel==0 &&  spInputParentTool  != NULL_var ) { 

			CATIBasicTool_var spSpecBasicTool = spInputParentTool ;  // Check it is a tool 
			if ( NULL_var != spSpecBasicTool ) { 
				spParentForTool = spInputParentTool   ;
				// cout << " (CAAGsiCreateGeometricFeatureSets)Case 2 / Tool =" << spParentForTool->GetName() <<endl  ;

			} 
			else { 
				cout << " (CAAGsiCreateGeometricFeatureSets) ERROR , input Parent for tool is not a GS, OGS or Body "<<endl; 
				oDiag =3 ; // Parent for tool is not a Valid object 
			}

		}            
		// Tool is about to create after current object in the Part 
		else if (iTopLevel==0 &&  spInputParentTool  == NULL_var ) { 

			// Read Current Tool
			// Note: Current Tool is 
			// either a PartBody (  Necessary: spCurrentFeat == spCurrentTool)
			// either a OpenBody (  Necessary: spCurrentFeat == spCurrentTool)
			CATIBasicTool_var spCurrentTool = spPart -> GetCurrentTool();

			// Read Current feature 
			// A  tool can be insert after an already defined part feature  
			CATISpecObject_var spCurrentFeat = spPart->GetCurrentFeature();

			// Note: Current Feature is 
			// either a PartBody, GS  or OGS 
			//    Not Necessary: spCurrentFeat == spCurrentTool 
			//    Position = 0 : The tool is created under Part 
			// either a Feature under a PartBody  
			//    The Tools is created after the current feature which position is set below

			spParentForTool  = spCurrentTool;

			if ( spCurrentFeat != spCurrentTool)  {
				// The Tool Parent will be the Current Tool
				// Read position of Current Feature in Tool
				CATIDescendants_var spRoot = spCurrentTool;
				Position = spRoot -> GetPosition( spCurrentFeat);
			}
			// cout << " (CAAGsiCreateGeometricFeatureSets)Case 3 / Tool =" << spParentForTool ->GetName() << " /Position ="<<Position<<  endl ;

		}

		// Phase 2: Check rules for creation of Tools 
		// --------------------------------------------- 
		// Toplevel ==0 
		// Need to check the tool to inseert is consistant with is Parent destination tool 
		if (iTopLevel==0) {

			CATIMmiNonOrderedGeometricalSet_var spNonOrderedGeomSet = spParentForTool  ; 
			CATIMmiOrderedGeometricalSet_var    spOrderedGeomSet    = spParentForTool ; 
			CATIMechanicalTool_var              spMechanicalSet     = spParentForTool ; 
			if (iType == 0 ) { 
				if ( NULL_var != spNonOrderedGeomSet ) { 
					oDiag = 0;    // GS a inserer dans un GS ou sous un feature d'un GS 
				}
				else {
					cout << " (CAAGsiCreateGeometricFeatureSets) ERROR , a GS  can only be inserted under another GS or directly under the part"<< endl; 
					oDiag =1 ; // GS que l'on veut inserer dans un Body ou OGS 
				}
			}
			else if (iType == 1 ) { 
				if ( NULL_var != spOrderedGeomSet || NULL_var !=  spMechanicalSet  ) { 
					oDiag = 0;    //  OGS a inserer dans un Body or OGS 
				}
				else {
					cout << " (CAAGsiCreateGeometricFeatureSets) ERROR , an OGS can only be inserted under another Body or OGS  or directly under the part"<< endl; 
					oDiag =2 ; // Body or GS  que l'on veut inserer dans un GS 
				}
			}    
			else if (iType ==2 ) { 
				if ( NULL_var != spOrderedGeomSet ) {
					oDiag = 0;    // Body a inserer sous la Part ou un OGS 
				}
				else {
					cout << " (CAAGsiCreateGeometricFeatureSets) ERROR , a body can only be inserted under an OGS  or directly under the part"<< endl; 
					oDiag =4 ; // Body  que l'on veut inserer dans un GS ou dans un Body existant  
				}
			}    
		}

		// Phase 2: Create the tool as wished 
		// --------------------------------------------- 
		// Create of the Tool 

		if (oDiag < 1) { 
			// Phase 3: Create a GSMTool
			// --------------------------------------------- 
			if (NULL_var != spParentForTool)
			{
				CATIMechanicalRootFactory_var spMechRoot = ispCont ;
				if (NULL_var != spMechRoot) {  

					if (0 == iType ) { 

						//  cout << " (CAAGsiCreateGeometricFeatureSets) Create GS  "<< iName << endl; 
						rc = spMechRoot -> CreateGeometricalSet(iName,spParentForTool,spSpecTool,Position);

					}
					else  if (1 == iType ) { 

						// cout << " (CAAGsiCreateGeometricFeatureSets)Create OGS  "<< iName << endl; 
						rc = spMechRoot -> CreateOrderedGeometricalSet(iName,spParentForTool,spSpecTool,Position);
					}
					else  if (2 == iType ) { 

						// cout << " (CAAGsiCreateGeometricFeatureSets) Create Body   "<< iName << endl; 
						spSpecTool  = spMechRoot -> CreatePRTTool(iName,spParentForTool,Position);
					}

				}
			}      

			// Phase 4: Set  the tool as current 
			// --------------------------------------------- 
			if (NULL_var != spSpecTool )
			{
				if (NULL_var != spPart) { 
					//    cout << " (CAAGsiCreateGeometricFeatureSets) Set As Current the tool "<<  endl; 
					spPart -> SetCurrentFeature(spSpecTool);
				}

			}
		}
		else {
			rc = E_FAIL ; 
		}

	}

#ifdef DEBUG_CAASERVICES 
	if (SUCCEEDED(rc) && NULL_var !=spSpecTool ) { 
		cout << " (CAAGsiCreateGeometricFeatureSets) Set created  ="<< spSpecTool  -> GetName() <<endl ;
	} 
	else { 
		cout << " (CAAGsiCreateGeometricFeatureSets) ERROR Failed create Geometric Features set "<<endl ;
	} 
#endif 
	return rc ;
}  

//按照名称以某个父节点开始从CATIA结构树上检索几何图形集，仅限指定节点下一层
HRESULT PrtService::SearchGSMToolByName(CATISpecObject_var spGSMToolRoot,CATUnicodeString strSearchName,CATISpecObject_var &spFoundResult)
{
	// 
	HRESULT hr = S_OK;

	// 
	if (spGSMToolRoot == NULL_var)
	{
		spFoundResult = NULL_var;

		hr = E_FAIL;
		return hr;
	}

	CATIDescendants_var spDescendants=  spGSMToolRoot;
	int childrenNb= spDescendants->GetNumberOfChildren();
	int iFound = 0;

	//循环搜索出查询的几何图形集
	for (int j = 1;j <= childrenNb;j++)
	{
		CATISpecObject_var spChild = spDescendants->GetChildAtPosition(j);
		CATIGSMTool_var spGsmTool = spChild ; 

		//判断是否是几何图形集
		if ( spGsmTool != NULL_var) {
			CATIAlias_var aliasOnCurBody = spChild ;
			CATUnicodeString ToolCurrent  = aliasOnCurBody->GetAlias(); 
			//判断是否同名
			if (strSearchName == ToolCurrent) {
				spFoundResult = spChild ;
				iFound =1 ;

				break ; 
			}
		}

	}

	if (0 == iFound)
	{
		spFoundResult = NULL_var;
		hr = E_FAIL;
	}

	return hr;
}

//功能：VBA方式 向单个几何图形集设置参数
void PrtService::AddMBDGSMToolParameters(CATDocument * ipDoc,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue,CATISpecObject_var spSearchedGSMTool)
{
	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//1、取得VBA接口CATIAPart，并调用get_Parameters()函数
	CATIAPart *spVBAPart;
	rc = spPrtPart->QueryInterface(IID_CATIAPart, (void **)&spVBAPart);
	if (FAILED(rc))
	{
		cout<<"无法从CATIPrtPart文件中得到接口CATIAPart！"<<endl;
		return;
	}
	CATIAParameters *spVBAParameters;
	spVBAPart->get_Parameters(spVBAParameters);
	if (!spVBAParameters)
	{
		cout<<"无法从part文件中得到接口CATIAParameters！"<<endl;
		return;
	}
	spVBAPart->Release();
	spVBAPart = NULL;

	//2、通过循环方式
	for (int i = 1;i <= ListStrName.Size();i++)
	{
		if (NULL_var != spSearchedGSMTool)
		{
			CATIABase *spGSMBase;
			rc = spSearchedGSMTool->QueryInterface(IID_CATIABase,(void **)&spGSMBase);
			if (FAILED(rc))
			{
				cout<<"无法得到从spSearchedGSMTool中QI出spGSMBase！"<<endl;
				return;
			}

			CATIAParameters *spVBAGSMParamters = NULL;
			spVBAParameters->SubList(spGSMBase,TRUE,spVBAGSMParamters);
			if (NULL != spVBAGSMParamters)
			{
				CATBSTR BSTRName;
				ListStrName[i].ConvertToBSTR( &BSTRName );

				CATBSTR BSTRValue;
				ListStrNameValue[i].ConvertToBSTR( &BSTRValue );

				CATIAStrParam * oParameter;
				spVBAGSMParamters->CreateString(BSTRName,BSTRValue,oParameter);

				CATICkeParm* spParm = NULL;
				oParameter->QueryInterface(IID_CATICkeParm,(void **)&spParm);
				spParm->SetConst(CATCke::True);//在参数列表里隐藏

				spParm->Release();
				spParm = NULL;
			}

			spGSMBase->Release();
			spGSMBase = NULL;
			spVBAGSMParamters->Release();
			spVBAGSMParamters = NULL;
		}

	}
	spVBAParameters->Release();
	spVBAParameters = NULL;
}

//VBA方式 修改几何集下某些参数，如果参数不存在自动添加
void PrtService::ModifyGSMToolsCertainParameters(CATDocument * piDoc,CATISpecObject_var const &spGSMTool,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{
	if (NULL_var != spGSMTool)
	{
		//查询到CATIParmPublisher接口
		CATIParmPublisher_var spGSMToolPub = spGSMTool;
		if (spGSMToolPub == NULL_var)
		{
			cout<<"Can't Get CATIParmPublisher interface from spGSMTool"<<endl;
			return;
		}

		//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		spGSMToolPub->GetDirectChildren("CATICkeParm",	iListFound);

		//遍历所有参数项，与传入参数名称比较，并把对应名称的参数值修改掉
		CATICkeParm_var spCkeParm = NULL_var;

		int i,j;
		CATBoolean existFlag = FALSE;
		for (i = 1; i <= ListStrName.Size(); i++)
		{

			for (j = 1;j <= iListFound.Size(); j++)
			{
				spCkeParm = iListFound[j];
				if (NULL_var == spCkeParm)
				{
					cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
					break;
				}
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				//cout<<"BenginNum is :"<<BenginNum<<endl;
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);

				//cout <<"ListStrName[i]"<<ListStrName[i].ConvertToChar()<<endl;
				//cout <<"StrParaName"<<StrParaName.ConvertToChar()<<endl;


				if (StrParaName == ListStrName[i])
				{
					spCkeParm->Valuate(ListStrNameValue[i]);
					//cout<<"ListStrNameValue[i]"<<ListStrNameValue[i].ConvertToChar()<<endl;
					//cout <<"已经判断得到相同的值"<<endl;
					existFlag = TRUE;
					continue;
				}

			}

			// 如果未找到该参数项，将自动添加
			if (existFlag == FALSE)
			{
				CATListValCATUnicodeString  ListNewStrName,ListNewStrNameValue;
				ListNewStrName.Append(ListStrName[i]);
				ListNewStrNameValue.Append(ListStrNameValue[i]);

				AddMBDGSMToolParameters(piDoc,ListNewStrName,ListNewStrNameValue,spGSMTool);
			}

		}

	}

}

//导出零件模型GSMTools中包含的所有参数，应用于 CATIA向LCA发送时
void PrtService::ExportMBDGSMToolsParameters(CATListValCATISpecObject_var const &ListOfspGSMTool,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{

	for (int i = 1; i<= ListOfspGSMTool.Size(); i++)
	{
		if (NULL_var != ListOfspGSMTool[i])
		{
			//查询到CATIParmPublisher接口
			CATIParmPublisher_var spGSMToolPub = ListOfspGSMTool[i];
			if (spGSMToolPub == NULL_var)
			{
				cout<<"Can't Get CATIParmPublisher interface from ListOfspGSMTool[i]"<<endl;
				return;
			}

			//取得direct children parameters
			CATListValCATISpecObject_var  iListFound;
			spGSMToolPub->GetDirectChildren("CATICkeParm",	iListFound);

			//遍历所有参数项，得到其名字及参数值
			CATICkeParm_var spCkeParm = NULL_var;
			for (int j = 1;j <= iListFound.Size(); j++)
			{
				spCkeParm = iListFound[j];
				if (NULL_var == spCkeParm)
				{
					cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
					break;
				}
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				//cout<<"BenginNum is :"<<BenginNum<<endl;
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
				ListStrName.Append(StrParaName);
				ListStrNameValue.Append(spCkeParm->Value()->AsString());

			}

			// 遍历完某GSMTool中的参数后，在其中加入分隔字符串；
			ListStrName.Append(StrDivisionName);
			ListStrNameValue.Append(StrDivisionValue);

		}
		else
		{
			ListStrName.Append(StrDivisionName);
			ListStrNameValue.Append(StrDivisionValue);
		}
	}

}

//查询该几何图形集下面所有的参数信息，以字符串的形式返回
void PrtService::GetGSMToolsParameters(CATISpecObject_var const &spGSMTool,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{

	if (NULL_var != spGSMTool)
	{
		//查询到CATIParmPublisher接口
		CATIParmPublisher_var spGSMToolPub = spGSMTool;
		if (spGSMToolPub == NULL_var)
		{
			cout<<"Can't Get CATIParmPublisher interface from spGSMTool"<<endl;
			return;
		}

		//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		spGSMToolPub->GetDirectChildren("CATICkeParm",	iListFound);

		//遍历所有参数项，得到其名字及参数值
		CATICkeParm_var spCkeParm = NULL_var;
		for (int j = 1;j <= iListFound.Size(); j++)
		{
			spCkeParm = iListFound[j];
			if (NULL_var == spCkeParm)
			{
				cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
				break;
			}
			CATUnicodeString StrCkeParmName = spCkeParm->Name();
			//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

			int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
			//cout<<"BenginNum is :"<<BenginNum<<endl;
			int StrLength = StrCkeParmName.GetLengthInChar();
			CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
			ListStrName.Append(StrParaName);
			ListStrNameValue.Append(spCkeParm->Show()); // spCkeParm->Value()->AsString()
		}

	}

}

//查询得到某几何图形集下面某些参数
void PrtService::GetGSMToolCertainParams(CATISpecObject_var const &spGSMTool,CATListValCATUnicodeString  &iListStrName,CATListValCATUnicodeString  &ioListStrNameValue)
{
	if (NULL_var != spGSMTool)
	{
		//查询到CATIParmPublisher接口
		CATIParmPublisher_var spGSMToolPub = spGSMTool;
		if (spGSMToolPub == NULL_var)
		{
			cout<<"Can't Get CATIParmPublisher interface from spGSMTool"<<endl;
			return;
		}

		//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		spGSMToolPub->GetDirectChildren("CATICkeParm",	iListFound);

		//遍历所有参数项，得到其名字及参数值
		CATICkeParm_var spCkeParm = NULL_var;

		for (int i = 1; i <= iListStrName.Size(); i ++)
		{
			int flag = 0;

			for (int j = 1;j <= iListFound.Size(); j++)
			{

				spCkeParm = iListFound[j];
				if (NULL_var == spCkeParm)
				{
					cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
					break;
				}
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				//cout<<"BenginNum is :"<<BenginNum<<endl;
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);

				if (StrParaName == iListStrName[i])
				{
					ioListStrNameValue.Append(spCkeParm->Value()->AsString());

					flag = 1;
					continue;
				}				
			}

			if (flag == 0)
			{
				ioListStrNameValue.Append("");
			}
		}
	}
	else
	{
		for (int i = 1; i <= iListStrName.Size(); i ++)
		{
			ioListStrNameValue.Append("");
		}
	}
}

//设置某个几何图形集下面的某些个参数项的值
void PrtService::SetGSMToolsCertainParams(CATDocument * piDoc,CATISpecObject_var const &spGSMTool,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{
	if (NULL_var != spGSMTool)
	{
		//查询到CATIParmPublisher接口
		CATIParmPublisher_var spGSMToolPub = spGSMTool;
		if (spGSMToolPub == NULL_var)
		{
			cout<<"Can't Get CATIParmPublisher interface from spGSMTool"<<endl;
			return;
		}

		//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		spGSMToolPub->GetDirectChildren("CATICkeParm",	iListFound);

		//遍历所有参数项，与传入参数名称比较，并把对应名称的参数值修改掉
		CATICkeParm_var spCkeParm = NULL_var;

		int i,j;
		for (i = 1; i <= ListStrName.Size(); i++)
		{

			for (j = 1;j <= iListFound.Size(); j++)
			{
				spCkeParm = iListFound[j];
				if (NULL_var == spCkeParm)
				{
					cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
					break;
				}
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				//cout<<"BenginNum is :"<<BenginNum<<endl;
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);

				//cout <<"ListStrName[i]"<<ListStrName[i].ConvertToChar()<<endl;
				//cout <<"StrParaName"<<StrParaName.ConvertToChar()<<endl;


				if (StrParaName == ListStrName[i])
				{
					spCkeParm->Valuate(ListStrNameValue[i]);
					//cout<<"ListStrNameValue[i]"<<ListStrNameValue[i].ConvertToChar()<<endl;
					//cout <<"已经判断得到相同的值"<<endl;
					continue;
				}

			}

			//// 如果未找到该参数项，将自动添加
			//if (j == iListFound.Size()+1)
			//{
			//	CATListValCATUnicodeString  ListNewStrName,ListNewStrNameValue;
			//	ListNewStrName.Append(ListStrName[i]);
			//	ListNewStrNameValue.Append(ListStrNameValue[i]);

			//	AddMBDGSMToolParameters(piDoc,ListNewStrName,ListNewStrNameValue,spGSMTool);

			//}

		}


	}
}

//VBA方式 向所有MBD几何图形集设置参数，应用在LCA向CATIA发送数据时调用
void PrtService::ExportMBDPartParamToGSMTool(CATDocument * ipDoc,CATListValCATISpecObject_var const &ListOfspMBDGSMTools)
{
	int MBDGSMToolNum = 1;

	//1 得到part user属性页的所有参数项，保存在以下两个数组中
	CATListValCATUnicodeString  ListStrExportName;
	CATListValCATUnicodeString  ListStrExportValue;

	//1.1 从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT RC = ipDoc->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(RC) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//1.2 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//1.3 从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	RC = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(RC))return;
	CATIPrtPart_var spPart = piPrtCont->GetPart();
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//1.4 得到所有part user 参数子集iListFound
	CATListValCATISpecObject_var  iListFound;
	CATIPrdProperties_var spProp(spRootProduct);
	if(!!spProp)
	{
		CATIParmPublisher* pPublisher = NULL;
		spProp->GetUserProperties(pPublisher, TRUE);
		pPublisher->GetDirectChildren( "CATICkeParm",	iListFound);
		//cout<<"总的part属性参数个数为："<<iListFound.Size()<<endl;
	}
	CATICkeParm_var spCkeParm = NULL_var;
	for (int j =1;j <=  iListFound.Size(); j++)
	{
		spCkeParm = iListFound[j];
		if (NULL_var == spCkeParm)
		{
			cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
			break;
		}

		CATUnicodeString StrCkeParmName = spCkeParm->Name();
		//cout<<"该part user属性页参数名字为："<<StrCkeParmName.ConvertToChar()<<endl;

		int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
		//cout<<"BenginNum is :"<<BenginNum<<endl;
		int StrLength = StrCkeParmName.GetLengthInChar();
		CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1); //由于"//"为双字符，所以需要加1
		ListStrExportName.Append(StrParaName);
		ListStrExportValue.Append(spCkeParm->Value()->AsString());

	}

	//2 取得VBA接口CATIAPart，并调用get_Parameters()函数
	CATIAPart *spVBAPart;
	HRESULT rc = spPart->QueryInterface(IID_CATIAPart, (void **)&spVBAPart);
	if (FAILED(rc))
	{
		cout<<"无法从CATIPrtPart文件中得到接口CATIAPart！"<<endl;
		return;
	}
	CATIAParameters *spVBAParameters;
	spVBAPart->get_Parameters(spVBAParameters);
	if (!spVBAParameters)
	{
		cout<<"无法从part文件中得到接口CATIAParameters！"<<endl;
		return;
	}
	spVBAPart->Release();
	spVBAPart = NULL;

	//3、通过循环方式把所有字符串数值 发送给各个MBD GSMTOOL
	// 3.1 清楚各个GSMTOOL中已有的参数项
	for (int m = 1; m <= ListOfspMBDGSMTools.Size(); m++)
	{
		if (NULL_var != ListOfspMBDGSMTools[m])
		{
			// 清除ListOfspMBDGSMTools[MBDGSMToolNum]中的所有参数项
			CATIParmPublisher_var spGSMToolPublisher(ListOfspMBDGSMTools[m]);
			if (NULL_var == spGSMToolPublisher)
			{
				cout <<"can't get spGSMToolPublisher from ListOfspMBDGSMTools[m]!"<<endl;
				return;
			}

			// 在每次赋值之前都做清空GSMTOOL中的参数
			CATListValCATISpecObject_var  iClearListFound;
			spGSMToolPublisher->GetDirectChildren( "CATICkeParm",	iClearListFound);
			//cout<<"该GSMTOOL参数个数为："<<iClearListFound.Size()<<endl;
			for (int n = 1; n<= iClearListFound.Size();n++)
			{
				spGSMToolPublisher->RemoveChild(iClearListFound[n]);
			}
		}
	}

	// 3.2 发送参数项给各个MBD GSMTOOL
	for (int i = 1;i <= ListStrExportName.Size();i++)
	{	
		//解析字符串name和value
		//首先判断是否为分隔符
		if (ListStrExportName[i] != StrDivisionName && ListStrExportValue[i] != StrDivisionValue && MBDGSMToolNum <= ListOfspMBDGSMTools.Size())
		{
			if (NULL_var != ListOfspMBDGSMTools[MBDGSMToolNum])
			{
				// 调用VBA接口
				CATIABase *spGSMBase;
				rc = ListOfspMBDGSMTools[MBDGSMToolNum]->QueryInterface(IID_CATIABase,(void **)&spGSMBase);
				if (FAILED(rc))
				{
					cout<<"无法得到从spSearchedGSMTool中QI出spGSMBase！"<<endl;
					return;
				}

				CATIAParameters *spVBAGSMParamters = NULL;
				spVBAParameters->SubList(spGSMBase,TRUE,spVBAGSMParamters);
				if (NULL != spVBAGSMParamters)
				{
					CATBSTR BSTRName;
					ListStrExportName[i].ConvertToBSTR( &BSTRName );

					CATBSTR BSTRValue;
					ListStrExportValue[i].ConvertToBSTR( &BSTRValue );

					CATIAStrParam * oParameter;
					spVBAGSMParamters->CreateString(BSTRName,BSTRValue,oParameter);

					CATICkeParm* piParm = NULL;
					oParameter->QueryInterface(IID_CATICkeParm,(void **)&piParm);
					piParm->SetConst(CATCke::True);//在参数列表里隐藏
					//piParm->SetUserAccess(CATICkeParm::ReadOnly);
					piParm->Release();
					piParm=NULL;
				}

				spGSMBase->Release();
				spGSMBase = NULL;
				spVBAGSMParamters->Release();
				spVBAGSMParamters = NULL;
			}
		}
		else
		{
			MBDGSMToolNum ++;
		}

	}
	//4 释放从part得到的Parameters接口
	spVBAParameters->Release();
	spVBAParameters = NULL;
}

//VBA方式 向单个几何图形集设置参数,作用包括清空以前的数据，并加入新的数据
void PrtService::ModifyMBDParamToGSMTool(CATDocument * ipDoc,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue,CATISpecObject_var spGSMTool)
{
	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//1、取得VBA接口CATIAPart，并调用get_Parameters()函数
	CATIAPart *spVBAPart;
	rc = spPrtPart->QueryInterface(IID_CATIAPart, (void **)&spVBAPart);
	if (FAILED(rc))
	{
		cout<<"无法从CATIPrtPart文件中得到接口CATIAPart！"<<endl;
		return;
	}
	CATIAParameters *spVBAParameters;
	spVBAPart->get_Parameters(spVBAParameters);
	if (!spVBAParameters)
	{
		cout<<"无法从part文件中得到接口CATIAParameters！"<<endl;
		return;
	}
	spVBAPart->Release();
	spVBAPart = NULL;


	// 2 清除spGSMTool中的所有参数
	if (NULL_var != spGSMTool)
	{
		// 清除spGSMTool中的所有参数项
		CATIParmPublisher_var spGSMToolPublisher(spGSMTool);
		if (NULL_var == spGSMToolPublisher)
		{
			cout <<"can't get spGSMToolPublisher from ListOfspMBDGSMTools[m]!"<<endl;
			return;
		}

		// 在每次赋值之前都做清空GSMTOOL中的参数
		CATListValCATISpecObject_var  iClearListFound;
		spGSMToolPublisher->GetDirectChildren( "CATICkeParm",	iClearListFound);
		//cout<<"该GSMTOOL参数个数为："<<iClearListFound.Size()<<endl;
		for (int n = 1; n<= iClearListFound.Size();n++)
		{
			spGSMToolPublisher->RemoveChild(iClearListFound[n]);
		}
	}

	//3、通过循环方式
	for (int i = 1;i <= ListStrName.Size();i++)
	{
		if (NULL_var != spGSMTool)
		{
			CATIABase *spGSMBase;
			rc = spGSMTool->QueryInterface(IID_CATIABase,(void **)&spGSMBase);
			if (FAILED(rc))
			{
				cout<<"无法得到从spSearchedGSMTool中QI出spGSMBase！"<<endl;
				return;
			}

			CATIAParameters *spVBAGSMParamters = NULL;
			spVBAParameters->SubList(spGSMBase,TRUE,spVBAGSMParamters);
			if (NULL != spVBAGSMParamters)
			{
				CATBSTR BSTRName;
				ListStrName[i].ConvertToBSTR( &BSTRName );

				CATBSTR BSTRValue;
				ListStrNameValue[i].ConvertToBSTR( &BSTRValue );

				CATIAStrParam * oParameter;
				spVBAGSMParamters->CreateString(BSTRName,BSTRValue,oParameter);

				CATICkeParm* piParm = NULL;
				oParameter->QueryInterface(IID_CATICkeParm,(void **)&piParm);
				piParm->SetConst(CATCke::True);//在参数列表里隐藏
				piParm->Release();
				piParm=NULL;
			}

			spGSMBase->Release();
			spGSMBase = NULL;
			spVBAGSMParamters->Release();
			spVBAGSMParamters = NULL;
		}

	}
	spVBAParameters->Release();
	spVBAParameters = NULL;

	//更新文件
	ObjectUpdate(spPrtPart);
}







//**********************************************************************************************************************************************************************************************************************************************************
//CATPart文件操作
//**********************************************************************************************************************************************************************************************************************************************************

//获得part文件的document,无论打开的是product环境，或者part环境 
CATDocument* PrtService::GetPrtDocument()
{
	CATIPrtContainer_var spPartContainer = NULL_var;

	//-------------------------------------------
	CATFrmEditor * pEditor =CATFrmEditor::GetCurrentEditor();

	if (pEditor != NULL)
	{
		CATPathElement spPath = pEditor->GetUIActiveObject( );

		CATBaseUnknown* pcurrbase = spPath.CurrentElement( );

		CATILinkableObject *piLinkableObject = NULL;
		HRESULT rc = pcurrbase->QueryInterface( IID_CATILinkableObject, (void**)& piLinkableObject );
		CATDocument * pDocument = NULL ;
		if ( SUCCEEDED(rc) )
		{
			// Do not release this pointer
			pDocument = piLinkableObject->GetDocument();

			piLinkableObject->Release();
			piLinkableObject = NULL ;

		}

		return pDocument;
	}

	else return NULL;

}

//根据传入的Spec IID获取所有Spec
void PrtService::GetContentSpecsByNameFromDoc(CATDocument *piDoc, CATUnicodeString strSpecIID, CATListValCATISpecObject_var &iolistSpecs)
{
	CATInit_var spInitOnDoc = piDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATIDescendants_var spDescendants = spPrtPart;
	spDescendants->GetAllChildren (strSpecIID,iolistSpecs);
}

//根据传入的Spec IID从文档Father GSMTool中获取所有Spec
void PrtService::GetContentSpecsByNameFromGSMTool(CATISpecObject_var spFatherGSMTool,CATUnicodeString strSpecIID, CATListValCATISpecObject_var &iolistSpecs)
{
	CATIDescendants_var spDescendants = spFatherGSMTool;

	CATListValCATBaseUnknown_var listBaseUnknow;
	spDescendants->GetAllChildren(strSpecIID,iolistSpecs);
}


//按照特征以及特征名称从容器中获取 某特征指针
CATBoolean PrtService::ObtainChild(CATIPrtContainer* iPrtContainer,CATUnicodeString iType,CATUnicodeString iName,CATISpecObject_var &oGSSpecObj)
{
	CATIPrtPart_var spPart = iPrtContainer->GetPart() ;

	CATIDescendants_var spPartAsDescendants = spPart;
	CATListValCATISpecObject_var  oLst; 
	spPartAsDescendants->GetAllChildren(iType,oLst);
	for (int i=1;i<=oLst.Size();i++)
	{
		if(iName==PrtService::GetAlias(oLst[i]))
		{
			oGSSpecObj=oLst[i];
			return TRUE;
		}
	}
	return FALSE;
}

HRESULT PrtService::SetSpecObjColor(CATISpecObject_var iSpecObj,int iColor)
{
	CATIVisProperties *piGraphProp=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piGraphProp);
	if( FAILED(rc) || piGraphProp == NULL ) return rc;

	CATVisPropertiesValues Attribut;
	switch(iColor)
	{
	case 0:	{Attribut.SetColor(255, 0, 0); break;}    //红
	case 1: {Attribut.SetColor(0, 255, 0); break;}    //绿
	case 2: {Attribut.SetColor(0, 0, 255); break;}    //蓝
	case 3: {Attribut.SetColor(255, 255, 0); break;}  //黄
	case 4: {Attribut.SetColor(255,0, 255); break;}   //紫
	case 5: {Attribut.SetColor(0, 255, 255);break;}   //青
	case 6: {Attribut.SetColor(100, 100, 255); break;}//
	case 7:	{Attribut.SetColor(0, 0, 0); break;}      //黑
	case 8: {Attribut.SetColor(255, 255, 255); break;}//白
	default:{Attribut.SetColor(255, 255, 0); break;}  //黄
	}

	piGraphProp->SetPropertiesAtt(Attribut,CATVPColor,CATVPMesh,0,0);
	piGraphProp->Release();
	piGraphProp=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj), CATVPGlobalType,CATVPColor,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return rc;
}

HRESULT PrtService::SetSpecObjOpacityAttr(CATISpecObject_var iSpecObj,CATUnicodeString iOpacityOrNoOpacity)
{
	CATIVisProperties *piVisP=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piVisP);
	if( FAILED(rc) || piVisP == NULL ) return rc;

	CATVisPropertiesValues Attribut;

	if(iOpacityOrNoOpacity=="Opacity")
	{
		Attribut.SetOpacity(255);
	}
	else if(iOpacityOrNoOpacity=="NoOpacity")
	{
		Attribut.SetOpacity(1);
	}

	piVisP->SetPropertiesAtt(Attribut,CATVPOpacity,CATVPMesh,0,0);
	piVisP->Release();
	piVisP=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj),CATVPMesh,CATVPOpacity,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return S_OK;
}

//**********************************************************************************************************************************************************************************************************************************************************
//特征操作
//**********************************************************************************************************************************************************************************************************************************************************

CATUnicodeString PrtService::GetAlias(IUnknown* iObj)
{
	HRESULT rc=E_FAIL;
	CATIAlias* pAlias = NULL;
	rc=iObj->QueryInterface(IID_CATIAlias,(void**)&pAlias);
	if(SUCCEEDED(rc)&&NULL!=pAlias)
	{		
		CATUnicodeString usAlias(pAlias->GetAlias());
		pAlias->Release();
		pAlias=NULL;
		return usAlias;
	}
	return CATUnicodeString("");
}

HRESULT PrtService::SetAlias(IUnknown* iObj,CATUnicodeString iName)
{
	HRESULT rc=E_FAIL;
	CATIAlias* pAlias = NULL;
	rc=iObj->QueryInterface(IID_CATIAlias,(void**)&pAlias);
	if(SUCCEEDED(rc)&&NULL!=pAlias)
	{
		pAlias->SetAlias(iName);
		pAlias->Release();
		pAlias=NULL;
	}
	return rc;
}

// Insert a Feature in the procedural view / for feature DERIVING from GSMGeom 
//-----------------------------------------------------------------------------
// The aim of this method is to allow created and updated feature  to be visible 
// in the standard V5 Graph Editor 
HRESULT PrtService::CAAGsiInsertInProceduralView( const CATISpecObject_var ispObjectToAppend,
													CATISpecObject_var ispInputParent)
{
#ifdef DEBUG_CAASERVICES 
	cout << "(CAAGsiServices) CAAGsiInsertInProceduralView "  << endl;
#endif 

	HRESULT rc = E_FAIL;

	CATIGSMProceduralView_var curobj = ispObjectToAppend;
	if (NULL_var != curobj ) {
		rc = curobj->InsertInProceduralView(ispInputParent);
		if (FAILED(rc))   cout  << "(CAAGsiServices) ERROR  Failed to insert in procedural view  "  << endl;

	}
	return rc ;
}

//几何图形集中特征更新
HRESULT PrtService::ObjectUpdate(const CATISpecObject_var & ispSpec)
{
#ifdef DEBUG_CAASERVICES 
	cout << "(CAAGsiServices) CAAGsiUpdate "  << endl;
#endif 
	HRESULT rc = S_OK ; 
	int iStat = 0 ;
	if ( NULL_var != ispSpec ) {
		// Declare a bloc where every exceptions will be catch and treated in
		// the CATCatch() block
		CATTry  {	
			iStat = ispSpec -> Update();
#ifdef DEBUG_CAASERVICES 
			cout << " Update iStat = " << iStat <<  endl; 
#endif 

			// V5R13   
			// check Linearity / usefull for absorbant feature inserted  in OGS 
			CATISpecObject* spFather = ispSpec->GetFather();
			if ( NULL  != spFather )
			{
				spFather -> Release();
				CATIGSMTool *piGSMToolFather = NULL;
				rc =spFather->QueryInterface ( IID_CATIGSMTool, (void**) &piGSMToolFather);
				if ( SUCCEEDED(rc) ) { 
					int IsAnAbsorbentSet = -1 ;
					piGSMToolFather->GetType(IsAnAbsorbentSet) ;
					if ( 1 == IsAnAbsorbentSet ) {
						CATBaseUnknown_var spUnkwnSpec = ispSpec;
						rc = CATMmrLinearBodyServices::Insert(spUnkwnSpec) ; 
					} 
					piGSMToolFather->Release() ; piGSMToolFather=NULL; 
				}   
			}
			//


		}
		// This block is specific for Update Errors
		CATCatch(CATMfErrUpdate,error)	 {
			//#ifdef DEBUG_CAASERVICES 
			cerr << " Update Error: " << (error-> GetDiagnostic()).ConvertToChar() << endl; 
			Flush(error) ; 
			//#endif 
			return E_FAIL; 
		}
		// This block treats every other exception
		CATCatch(CATError,error)    {
			//#ifdef DEBUG_CAASERVICES 
			cerr << " Error: " << error->GetMessageText() <<endl; 
			Flush(error);
			//#endif 

			return E_FAIL; 
		}
		CATEndTry;

	}
	return rc ;
}


//set Graphical property for the features
HRESULT PrtService::SetSpecGraphProperty(CATISpecObject_var spSpecOnObject,CATVisPropertiesValues Attribut,CATVisPropertyType VisPropertyType, CATVisGeomType VisGeomType)
{
	HRESULT	rc = E_FAIL;
	CATIVisProperties_var spGraphPropOnSurface (spSpecOnObject);

	if (spGraphPropOnSurface != NULL_var)
	{
		rc = spGraphPropOnSurface->SetPropertiesAtt(Attribut,VisPropertyType,VisGeomType);

		//Update the 3D view
		CATIModelEvents_var spEvents = spSpecOnObject;
		CATModify ModifyEvent(spSpecOnObject);
		spEvents -> Dispatch (ModifyEvent);

		//Update the graph view
		CATIRedrawEvent_var spRedraw = spSpecOnObject;
		spRedraw -> Redraw(); 
		ObjectUpdate(spSpecOnObject);
	}

	return rc;
}

// -----------------------------------------------------------------------------
// Litteral 
// ---------------------------------------------------------------------------
CATICkeParm_var PrtService::LocalInstLitteral (void * Value, int IsValuate, CATUnicodeString NomLitteral, CATIContainer_var  Cont, CATUnicodeString Name)
{
#ifdef DEBUG_CAASERVICES 
	cout << "(CAAGsiServices) LocalInstLitteral "  << endl;
#endif 

	int				Ipipo = 0;
	double			Rpipo = 0.0;
	double         *dist;
	int            *idist;

	CATICkeParmFactory_var		fact = Cont;
	CATICkeParm_var				Litteral = NULL_var;

	if (Cont == NULL_var)
		return Litteral;

	if (NomLitteral == "Length")
	{

		if (IsValuate)
			dist = (double *)Value;
		else
			dist = &Rpipo;

		Litteral = fact -> CreateLength (Name, *dist/1000);

	}
	else if (NomLitteral == "Angle")
	{
		if (IsValuate)
			dist = (double *)Value;
		else
			dist = &Rpipo;

		Litteral = fact -> CreateAngle (Name, *dist);

	}
	else if (NomLitteral == "Real")
	{
		if (IsValuate)
			dist = (double *)Value;
		else
			dist = &Rpipo;

		Litteral = fact -> CreateReal (Name, *dist);

	}
	else if (NomLitteral == "Integer")
	{
		if (IsValuate)
			idist = (int *)Value;
		else
			idist = &Ipipo;

		Litteral = fact -> CreateInteger (Name, *idist);
	}
	else if (NomLitteral == "Boolean")
	{
		if (CATPtrToINT32(Value))
			Litteral = fact->CreateBoolean(Name,CATCke::True);
		else
			Litteral = fact->CreateBoolean(Name,CATCke::False);
	}
	else 
	{
		if (IsValuate)
			dist = (double *)Value;
		else
			dist = &Rpipo;
		Litteral = fact -> CreateReal (Name, *dist);
	}
	return Litteral;
}

CATICkeParm_var PrtService::CAAGsiInstanciateLitteral (CATUnicodeString  NomLitteral, CATIContainer_var  Cont,CATUnicodeString Name)
{

#ifdef DEBUG_CAASERVICES 
	cout << "(CAAGsiServices) CAAGsiInstanciateLitteral "  << endl;
#endif 
	double		pipo = 0.0;
	return LocalInstLitteral (&pipo, 0, NomLitteral, Cont, Name);
}


//设置特征为隐藏或显示
HRESULT PrtService::SetSpecObjShowAttr(CATISpecObject_var iSpecObj,CATUnicodeString iShowOrHide)
{
	if (NULL_var==iSpecObj) return E_FAIL;

	CATIVisProperties *piVisP=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piVisP);
	if( FAILED(rc) || piVisP == NULL ) return rc;


	CATVisPropertiesValues Attribut;
	if (iShowOrHide=="Show")
	{
		Attribut.SetShowAttr(CATShowAttr);
	}
	else
	{
		Attribut.SetShowAttr(CATNoShowAttr);
	}

	piVisP->SetPropertiesAtt(Attribut,CATVPShow ,CATVPGlobalType,0,0);
	piVisP->Release();
	piVisP=NULL;

	CATIModelEvents *piME = NULL;
	rc = iSpecObj->QueryInterface( IID_CATIModelEvents,(void **) &piME);
	if( FAILED(rc) || piME == NULL ) return rc;
	CATModifyVisProperties notif(iSpecObj, CATPathElement(iSpecObj), CATVPGlobalType,CATVPShow,Attribut);
	piME->Dispatch(notif);
	piME->Release();
	piME= NULL ;

	return S_OK;
}

//获取特征为隐藏或显示
HRESULT PrtService::GetSpecObjShowAttr(CATISpecObject_var iSpecObj,CATBoolean &iShowOrHide)
{
	if (NULL_var==iSpecObj) return E_FAIL;

	CATIVisProperties *piVisP=NULL;
	HRESULT rc = iSpecObj->QueryInterface(IID_CATIVisProperties,(void**)&piVisP);
	if( FAILED(rc) || piVisP == NULL ) return rc;

	CATVisPropertiesValues Attribut;
	piVisP->GetPropertiesAtt(Attribut,CATVPShow);
	piVisP->Release();
	piVisP=NULL;

	CATShowAttribut oShow;
	Attribut.GetShowAttr(oShow);
	if (oShow == CATShowAttr)
	{
		iShowOrHide = TRUE;
	}
	else
	{
		iShowOrHide = FALSE;
	}

	return S_OK;
}

//-------------------------------------------------------------------
//添加int 属性
//-------------------------------------------------------------------
BOOL PrtService::SetSepcObjectAttrEx(const int iValue,
										const CATUnicodeString strKey,
										const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_integer,sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetInteger(pKey,iValue);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//-------------------------------------------------------------------
//获取int 属性
//-------------------------------------------------------------------
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,
										int &iValue,
										const CATUnicodeString &strKey,
										const CATISpecObject_var spSpecObject)
{
	iValue=0;
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject4");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	iValue=spiMPAc->GetInteger(pKey);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//获得long属性
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,long &lValue,const CATUnicodeString &strKey,const CATISpecObject_var spSpecObject)
{
	lValue=0;
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject4");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	lValue=spiMPAc->GetInteger(pKey);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}


//-------------------------------------------------------------------
//添加double属性
//-------------------------------------------------------------------
BOOL PrtService::SetSepcObjectAttrEx(const double dbValue,
										const CATUnicodeString strKey,
										const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_double,sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetDouble(pKey,dbValue);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//-------------------------------------------------------------------
//获取double属性
//-------------------------------------------------------------------
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,
										double &dbValue,
										const CATUnicodeString &strKey,
										const CATISpecObject_var spSpecObject)
{
	dbValue=0.0;
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	dbValue=spiMPAc->GetDouble(pKey);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//---------------------------------------------------------------
//添加CATUnicodeString属性
//---------------------------------------------------------------
BOOL PrtService::SetSepcObjectAttrEx(const CATUnicodeString strValue,
										const CATUnicodeString strKey,
										const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		pAttr=spSpecObject->AddAttribute(strKey,tk_string,sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetString(pKey,strValue);
	pKey->Release();
	pKey=NULL;
	//

	return TRUE;
}


//---------------------------------------------------------------
//获取CATUnicodeString属性
//---------------------------------------------------------------
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,
										CATUnicodeString &strValue,
										const CATUnicodeString &strKey,
										const CATISpecObject_var spSpecObject)
{
	strValue="";
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject5");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	strValue=spiMPAc->GetString(pKey);
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}


//------------------------------------------------------------------------------
//添加doubl list属性
//------------------------------------------------------------------------------
BOOL PrtService::SetSepcObjectAttrEx( CATRawColldouble doubleList,
										const CATUnicodeString strKey,
										const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var )
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_list(tk_double),sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetListDouble(pKey,doubleList);

	pKey->Release();
	pKey=NULL;
	//

	return TRUE;
}

//------------------------------------------------------------------------------
//获取double list属性
//------------------------------------------------------------------------------
BOOL PrtService::GetSepcObjectAttrEx( BOOL &bIsExistKey,CATRawColldouble *&doubleList,const CATUnicodeString strKey,const CATISpecObject_var spSpecObject)
{
	bIsExistKey=TRUE;
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject4");
		return FALSE;
	}
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	doubleList =spiMPAc->GetListDouble(pKey);

	pKey->Release();
	pKey=NULL;

	return TRUE;
}

//获得CATLISTV(CATISpecObject_var)属性
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,CATLISTV(CATISpecObject_var) &lstSpecObjects,const CATUnicodeString &strKey,const CATISpecObject_var spSpecObject)
{
	lstSpecObjects.RemoveAll();
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	int iNum=spiMPAc->GetListSize( pKey);
	for (int i=1;i<=iNum;i++)
	{
		if(pKey->GetListType()==tk_specobject)
		{
			ktInfoMsgBox("\n2.0体验版设计的数据，请进行紧固件连接对象刷新！");
			return FALSE;
		}
		//
		CATILinkableObject* pLink=spiMPAc->GetExternalObject(pKey, IN_SESSION ,i);//

		if (pLink!=NULL)
		{
			lstSpecObjects.Append(pLink);
			pLink->Release();
			pLink=NULL;
		}
		else
		{
			lstSpecObjects.Append(NULL_var);
		}
	}
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//添加 CATISpecObject_var属性
BOOL PrtService::SetSepcObjectAttrEx(CATISpecObject_var spObject,const CATUnicodeString &strKey,const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var || spObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject5");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_specobject,sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetSpecObject(pKey,spObject);

	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}
//添加 CATLISTV(CATUnicodeString)属性
BOOL PrtService::SetSepcObjectAttrEx(CATLISTV(CATUnicodeString) lstStrings,const CATUnicodeString strKey,const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var || lstStrings.Size()==0)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject6");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_list(tk_string),sp_NEUTRAL);
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	spiMPAc->SetListString(pKey,lstStrings);

	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,CATLISTV(CATUnicodeString) &lstStrings,const CATUnicodeString strKey,const CATISpecObject_var spSpecObject)
{
	lstStrings.RemoveAll();
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	CATListValCATUnicodeString* pList=spiMPAc->GetListString (pKey);
	//	
	pKey->Release();
	pKey=NULL;
	if(pList==NULL)
		return FALSE;
	//
	lstStrings=*pList;
	delete pList;
	pList=NULL;

	//
	return TRUE;
}



//添加 CATLISTV(CATISpecObject_var)属性
BOOL PrtService::SetSepcObjectAttrEx(CATLISTV(CATISpecObject_var) lstSpecObjects,const CATUnicodeString strKey,const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//添加扩展属性
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttribute* pAttr=NULL;
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		CATISpecAttribute* pAttr=spSpecObject->AddAttribute(strKey,tk_list(tk_external),sp_NEUTRAL);//sp_NEUTRAL
		if(pAttr==NULL)
		{
			return FALSE;
		}
		pAttr->Release();
		pAttr=NULL;
		pKey=spiMPAc->GetAttrKey(strKey);
	}
	//
	for (int i=1;i<=lstSpecObjects.Size();i++)
	{
		CATILinkableObject_var spLink= lstSpecObjects[i];
		if (spLink==NULL_var)
		{
			return FALSE;
		}
		if(FAILED(spiMPAc->SetExternalObject(pKey,spLink)))
		{
			return FALSE;
		}
	}
	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}


//获得CATISpecObject_var属性
BOOL PrtService::GetSepcObjectAttrEx(BOOL &bIsExistKey,CATISpecObject_var &spObject,const CATUnicodeString &strKey,const CATISpecObject_var spSpecObject)
{
	spObject=NULL_var;
	bIsExistKey=TRUE;
	//
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject5");
		return FALSE;
	}
	//
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		bIsExistKey=FALSE;
		return FALSE;
	}
	//
	CATISpecObject* pObject=spiMPAc->GetSpecObject(pKey);
	if(pObject==NULL)
	{
		pKey->Release();
		pKey=NULL;
		return FALSE;
	}
	spObject=pObject;
	pObject->Release();
	pObject=NULL;

	pKey->Release();
	pKey=NULL;
	//
	return TRUE;
}

//清除所有扩展属性
BOOL PrtService::ClearSpecObjectAttEx(const CATISpecObject_var spSpecObject)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}
	//扩展属性
	CATISpecAttribute* pAtt=spSpecObject->GetAttribute("F_SIGN");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_SPECIAL");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_ID");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_NUMBER");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_CREATETYPE");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_ISMASTER");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_LASTTIME");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_THICKNESS");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_XCOORD");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_YCOORD");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_ZCOORD");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_STANDARD");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	//
	pAtt=spSpecObject->GetAttribute("F_ATTEX_LINK_PRT");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_CUSTOM_DATA");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_EXT_REF_PRT");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	pAtt=spSpecObject->GetAttribute("F_ATTEX_POSITION");
	if(pAtt!=NULL)
	{
		spSpecObject->RemoveAttribute (pAtt);
	}
	//
	return TRUE;
}

//清除特定key的扩展属性
BOOL PrtService::ClearSpecObjectAttEx(const CATISpecObject_var spSpecObject,CATListValCATUnicodeString lstStrKeys)
{
	if(spSpecObject==NULL_var)
	{
		ktErrorMsgBox("\nerror: invalid spSpecObject3");
		return FALSE;
	}

	//扩展属性
	for (int i = 1; i <= lstStrKeys.Size(); i++)
	{
		CATISpecAttribute* pAtt=spSpecObject->GetAttribute(lstStrKeys[i]);
		if(pAtt!=NULL)
		{
			spSpecObject->RemoveAttribute (pAtt);
		}
	}

	return TRUE;
}

//是否存在特定扩展属性
BOOL PrtService::IsExistSpecObjectAttEx(const CATUnicodeString strKey,const CATISpecObject_var spSpecObject)
{
	CATISpecAttrAccess_var  spiMPAc=spSpecObject;
	if(spiMPAc==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get attr access");
		return FALSE;
	}
	CATISpecAttrKey* pKey=spiMPAc->GetAttrKey(strKey);
	if(pKey==NULL)
	{
		return FALSE;
	}
	//
	pKey->Release();
	pKey=NULL;

	return TRUE;
}


//功能：特征拷贝
BOOL PrtService::CopyFeatureToPartDocument(CATISpecObject_var &spSpecCopyResult, const CATISpecObject_var spObjectToCopy, const CATISpecObject_var spTarget, BOOL LinkMode)
{
	spSpecCopyResult=NULL_var; 
	if (NULL_var==spObjectToCopy||NULL_var==spTarget)
	{
		MessageBox(NULL, L"spObjectToCopy or spTarget is NULL", L"错误", MB_OK);
		return FALSE;
	}

	CATMmrInterPartCopy * ptCATMmrInterPartCopy = new CATMmrInterPartCopy(spObjectToCopy,spTarget) ;
	if (NULL==ptCATMmrInterPartCopy)
	{
		MessageBox(NULL, L"Error In new CATMmrInterPartCopy", L"错误", MB_OK);
		return FALSE;
	}

	ptCATMmrInterPartCopy->SetLinkMode(LinkMode);
	ptCATMmrInterPartCopy->SetAttributeMode(1);

	CATUnicodeString ErrorMsg ;
	HRESULT hr = ptCATMmrInterPartCopy->Run(&ErrorMsg);
	if ( FAILED(hr) )
	{
		MessageBox(NULL, L"Error In Run CATMmrInterPartCopy", L"错误", MB_OK);
		delete ptCATMmrInterPartCopy;
		return FALSE;
	}

	ptCATMmrInterPartCopy->GetResult(spSpecCopyResult);
	if (NULL_var==spSpecCopyResult)
	{
		MessageBox(NULL, L"Error In GetResult", L"错误", MB_OK);
		delete ptCATMmrInterPartCopy;
		return FALSE;
	}

	delete ptCATMmrInterPartCopy;
	return TRUE;
}

//**********************************************************************************************************************************************************************************************************************************************************
//PART文件自定义属性操作分类
//**********************************************************************************************************************************************************************************************************************************************************
//功能：向part文件设置添加属性，先清空 后赋值
void PrtService::AddMBDPartUserParameters(CATDocument * ipDoc,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue,int iType,CATBoolean clearOrKeep,CATBoolean readOrWrite)
{
	//1、从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT RC = ipDoc->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(RC) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];
	delete pRootProducts;
	pRootProducts = NULL;
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器类，并得到CATICkeParmFactory工厂接口
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	CATICkeParmFactory_var spFact(piCont);
	piCont->Release();
	piCont=NULL;

	if(NULL_var == spFact)
	{
		cout << "Could not get parm factory.\n";
		return;
	}

	CATIPrdProperties_var spProp(spRootProduct);
	CATIParmPublisher* pPublisher = NULL;
	spProp->GetUserProperties(pPublisher, TRUE);
	if (clearOrKeep == TRUE) // 如果赋值之前做清空操作。
	{
		CATListValCATISpecObject_var  iListFound;
		pPublisher->GetDirectChildren( "CATICkeParm",	iListFound);
		for (int j = 1; j<= iListFound.Size();j++)
		{
			pPublisher->RemoveChild(iListFound[j]);
		}
	}

	//3、对part属性赋值
	for (int i = 1;i <= ListStrName.Size();i ++)
	{
		if (iType == 1) //字符型
		{
			CATICkeParm_var spParm = spFact->CreateString(ListStrName[i], ListStrNameValue[i]);	
			pPublisher->Append(CATISpecObject_var(spParm));

			if (readOrWrite == TRUE)
			{
				spParm->SetConst(CATCke::True);
				spParm->SetUserAccess(CATICkeParm::ReadOnly);
			}			

		}
		else if(iType == 2) //double参数
		{
			double dNum = 0;
			ListStrNameValue[i].ConvertToNum(&dNum);
			CATICkeParm_var spParm = spFact->CreateReal(ListStrName[i], dNum);	
			pPublisher->Append(CATISpecObject_var(spParm));

			if (readOrWrite == TRUE)
			{
				spParm->SetConst(CATCke::True);
				spParm->SetUserAccess(CATICkeParm::ReadOnly);
			}			

		}
	}

	pPublisher->Release();
	pPublisher=NULL;

}

//功能：向part文件设置更改属性
void PrtService::ModifyMBDPartUserParameters(CATDocument * ipDoc,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue)
{

	//1、从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT RC = ipDoc->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(RC) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器类，并得到CATICkeParmFactory工厂接口
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	CATICkeParmFactory_var spFact(piCont);
	piCont->Release();
	piCont=NULL;

	if(NULL_var == spFact)
	{
		cout << "Could not get parm factory.\n";
		return;
	}

	//3、获取publisher
	CATIPrdProperties_var spProp(spRootProduct);
	if(!!spProp)
	{
		CATIParmPublisher* pPublisher = NULL;
		spProp->GetUserProperties(pPublisher, TRUE);

    //4、对part属性赋值
    	//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		pPublisher->GetDirectChildren("CATICkeParm",	iListFound);

		//遍历所有参数项，与传入参数名称比较，并把对应名称的参数值修改掉
		CATICkeParm_var spCkeParm = NULL_var;

		CATBoolean existFlag = FALSE;
		for (int i = 1; i <= ListStrName.Size(); i++)
		{

			for (int j = 1;j <= iListFound.Size(); j++)
			{
				spCkeParm = iListFound[j];
				if (NULL_var == spCkeParm)
				{
					//cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
					break;
				}
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				//cout<<"参数名字："<<StrCkeParmName.ConvertToChar()<<endl;

				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				//cout<<"BenginNum is :"<<BenginNum<<endl;
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);

				//cout <<"ListStrName[i]"<<ListStrName[i].ConvertToChar()<<endl;
				//cout <<"StrParaName"<<StrParaName.ConvertToChar()<<endl;

				if (StrParaName == ListStrName[i])
				{
					CATUnicodeString strParaValue = spCkeParm->Value()->AsString();
					if (strParaValue != ListStrNameValue[i])
					{
						spCkeParm->Valuate(ListStrNameValue[i]);
					}					
					//cout<<"ListStrNameValue[i]"<<ListStrNameValue[i].ConvertToChar()<<endl;
					//cout <<"已经判断得到相同的值"<<endl;
					existFlag = TRUE;
					continue;
				}

			}

			// 如果未找到该参数项，将自动添加
			/*if (existFlag == FALSE)
			{
				CATListValCATUnicodeString  ListNewStrName,ListNewStrNameValue;
				ListNewStrName.Append(ListStrName[i]);
				ListNewStrNameValue.Append(ListStrNameValue[i]);

				AddMBDGSMToolParameters(ipDoc,ListNewStrName,ListNewStrNameValue,spGSMTool);
			}*/

		}

	}	

}

//功能：获得文档User Property里面所有参数信息
void PrtService::GetMBDPartUserParams(CATDocument * ipDoc,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{
	//1、从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT RC = ipDoc->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(RC) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器类，并得到CATICkeParmFactory工厂接口
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	CATICkeParmFactory_var spFact(piCont);
	piCont->Release();
	piCont=NULL;

	if(NULL_var == spFact)
	{
		cout << "Could not get parm factory.\n";
		return;
	}

	//3、获取publisher
	CATIPrdProperties_var spProp(spRootProduct);
	if(!!spProp)
	{
		CATIParmPublisher* pPublisher = NULL;
		spProp->GetUserProperties(pPublisher, TRUE);

		//4、对part属性赋值
		//取得direct children parameters
		CATListValCATISpecObject_var  iListFound;
		pPublisher->GetDirectChildren("CATICkeParm",iListFound);

		CATICkeParm_var spCkeParm = NULL_var;
		for (int i = 1; i <= iListFound.Size(); i++)
		{
			spCkeParm = iListFound[i];			
			CATUnicodeString StrCkeParmName = spCkeParm->Name();

			int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
			//cout<<"BenginNum is :"<<BenginNum<<endl;
			int StrLength = StrCkeParmName.GetLengthInChar();
			CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);

			CATUnicodeString strParaValue = spCkeParm->Value()->AsString();
			
			ListStrName.Append(StrParaName);
			ListStrNameValue.Append(strParaValue);
		}
	}

}

//在用户自定义属性中添加枚举类型参数
void PrtService::SetUserPropertyParamEnum(CATDocument *piDocument,CATListValCATUnicodeString listStrParamName,CATListOfInt countNode,CATListValCATUnicodeString listStrParamValue)
{
	//1.1 从CATDocument * piDocument中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT rc = piDocument->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(rc) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];

	delete pRootProducts;
	pRootProducts=NULL;
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//1.2 获取用户自定义属性值
	CATListValCATISpecObject_var  iListUserProperty;
	CATIPrdProperties_var spProp(spRootProduct);
	CATIParmPublisher* piUserPublisher = NULL;
	if(!!spProp)
	{
		spProp->GetUserProperties(piUserPublisher, TRUE);
		piUserPublisher->GetDirectChildren("CATICkeParm",iListUserProperty);
	}

	//1.3 获取CATICkeParmFactory工厂类
	CATICkeParmFactory_var iospParmFact;
	PrtService::GetParamFactory(piDocument,iospParmFact);

	//2 通过循环方式创建枚举类型参数
	for (int k=1; k <= iListUserProperty.Size(); k ++)
	{
		//获取自定义属性参数名称
		CATICkeParm_var spUserCkeParm = NULL_var;
		spUserCkeParm = iListUserProperty[k];
		CATUnicodeString StrCkeParmName01 = spUserCkeParm->Name();
		int BenginNum = StrCkeParmName01.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
		int StrLength = StrCkeParmName01.GetLengthInChar();
		CATUnicodeString StrUserParaName = StrCkeParmName01.SubString(BenginNum+1,StrLength-BenginNum-1);

		//启动传入参数名称for循环
		for (int i = 1;i <= listStrParamName.Size();i++)
		{
			//如果参数名称相等，才启动多项赋值
			if (listStrParamName[i] == StrUserParaName)
			{
				int startNum = 0;
				for (int j = 1; j < i; j++)
				{
					startNum += countNode[j];
				}

				//如果是1不采用枚举
				if (countNode[i] == 1)
				{
					spUserCkeParm->Valuate(listStrParamValue[startNum+1]);
				} 
				else //大于1采用枚举
				{
					int count = countNode[i];
					CATListOfCATUnicodeString pLstEnum;
					for (int m = 1; m <= count; m ++)
					{
						pLstEnum.Append(listStrParamValue[m+startNum]);
					}
					spUserCkeParm->SetUserAccess(CATICkeParm::User);

					// Modify "realParam"
					CATIParmManipulator_var spMan = NULL_var;
					spUserCkeParm->SetManipulator( NULL_var );
					spMan = spUserCkeParm->CreateManipulator();

					if( NULL_var != spMan)
					{
						spMan->SetEnumerateValues(&pLstEnum);
					}
				}

				//结束该次循环
				break;
			}

		}
	}

	piUserPublisher->Release();
	piUserPublisher=NULL;
}

//设置几何集参数与用户自定义属性之间的关联关系
void PrtService::SetGSMToolUserPropertyRelations(CATDocument *piDocument,CATListValCATISpecObject_var listOfspGSMTools)
{
	//获取User property所有参数
	//1、从CATDocument * piDocument中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT rc = piDocument->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(rc) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];

	delete pRootProducts;
	pRootProducts=NULL;
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器
	CATInit_var spInitOnDoc = piDocument;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");
	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piCont->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATIParmPublisher* opiPublisher = NULL;
	spPrtPart->QueryInterface(IID_CATIParmPublisher, (void**)&opiPublisher);

	//释放无用的接口
	piCont->Release();
	piCont = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//3.1 、获取用户自定义属性值
	CATListValCATISpecObject_var  iListUserProperty;
	CATIPrdProperties_var spProp(spRootProduct);
	if(!!spProp)
	{
		CATIParmPublisher* pPublisher = NULL;
		spProp->GetUserProperties(pPublisher, TRUE);
		pPublisher->GetDirectChildren("CATICkeParm",iListUserProperty);

		pPublisher->Release();
		pPublisher=NULL;
	}

	//3.2 、获取用户几何图形集属性值
	CATListValCATISpecObject_var  iListGSMToolParam;
	for (int i = 1; i <= listOfspGSMTools.Size(); i ++)
	{
		if (NULL_var == listOfspGSMTools[i])
		{
			cout << "spSpecObj is NULL_Var \n";
			continue;
		}

		//取得direct children parameters
		CATIParmPublisher_var spParmPublisherGS(listOfspGSMTools[i]);	
		CATListValCATISpecObject_var  iListFound;
		spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);

		for (int j = 1; j <= iListFound.Size(); j ++)
		{
			iListGSMToolParam.Append(iListFound[j]);
		}
	}

	//4 对比参数内容，建立关联关系
	// 双重循环
	CATICkeParm_var spUserCkeParm = NULL_var,spGSMCkeParm = NULL_var;
	for (int i = 1; i <= iListUserProperty.Size(); i++)
	{
		spUserCkeParm = iListUserProperty[i];			
		CATUnicodeString StrCkeParmName01 = spUserCkeParm->Name();
		int BenginNum = StrCkeParmName01.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
		int StrLength = StrCkeParmName01.GetLengthInChar();
		CATUnicodeString StrParaName01 = StrCkeParmName01.SubString(BenginNum+1,StrLength-BenginNum-1);

		for (int j = 1; j <= iListGSMToolParam.Size(); j ++)
		{
			spGSMCkeParm = iListGSMToolParam[j];			
			CATUnicodeString StrCkeParmName02 = spGSMCkeParm->Name();
			int BenginNum = StrCkeParmName02.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
			int StrLength = StrCkeParmName02.GetLengthInChar();
			CATUnicodeString StrParaName02 = StrCkeParmName02.SubString(BenginNum+1,StrLength-BenginNum-1);

			//如果命名相同
			if (StrParaName01 == StrParaName02)
			{
				//cout<<"找到一个符合要求的数据项"<<endl;
				// Create a formula
				CATCkeListOf(Parm) pParamList;
				pParamList.Append(spUserCkeParm);
				//pParamList.Append(spUserCkeParm);

				// It is important (but not necessary) to aggregate those relations especially in part context
				CATISpecObject_var spRelationSet = CATCkeGlobalFunctions::GetFunctionFactory()->GetCurrentSet(CATICkeFunctionFactory::Relation,opiPublisher,CATCke::True);
				CATICkeParmFactory_var spParmFactory = spRelationSet->GetFeatContainer();
				CATICkeRelation_var spRel = NULL_var;
				spRel = spParmFactory->CreateFormula("Formula1","","",spGSMCkeParm,&pParamList,"a1",NULL_var,CATCke::False);
				if (!!spRelationSet)
				{
					if (spRel == NULL_var)
					{
						cout <<"创建失败！"<<endl;
					} 

					CATIParmPublisher_var spParmPublisher = spRelationSet;
					if (!!spParmPublisher)
					{
						spParmPublisher->Append(spRel);
					}
				}
			}

		}

	}

	opiPublisher->Release();
	opiPublisher = NULL;
}

//创建Datum特征
HRESULT PrtService::ConvertToDatum(CATIGSMFactory_var  & ispGsmFact , const CATISpecObject_var & ispSpec,CATISpecObject_var iSpecParent,CATListValCATISpecObject_var& oAllDatums)
{
	HRESULT rc = E_FAIL;
	if ( NULL_var != ispSpec ) {

		// Check the feature to convert is not already a Datum 
		CATIMf3DBehavior_var ispBehave(ispSpec);
		if(NULL_var != ispBehave ){
			if  ( FAILED( ispBehave -> IsADatum() ) ) { 

				CATListValCATISpecObject_var *ListDatum=NULL;

				// Convert  Spec in one or more Datum    
				// WARNING : Only available for features which do not have any child
				int iVerif =1 ;
				rc = ispGsmFact->ConvertToDatum(ispSpec, ListDatum,iVerif);
				if (FAILED(rc)) return E_FAIL;

				// Delete of Procedural Specification 
				// --> Model event for delete / update visualization 
				CATIModelEvents_var IME(ispSpec);
				if(NULL_var != IME) {
					CATDelete info(ispSpec->GetImpl());
					IME->Dispatch(info);
				}

				// --> Delete Specification 
				CATISpecObject_var ispFather = ispSpec->GetFather();
				// Specification  is aggretated in the prodecural view   
				if (NULL_var != ispFather) {
					ispFather->Release();
					CATIDescendants_var ispDes = ispFather;
					ispDes->RemoveChild (ispSpec);
				}
				// Specification is not in the prodecural view   
				else {
					LifeCycleObject_var LCO = ispSpec;
					LCO -> remove();
				}	

				// Datums management   
				if(ListDatum) {
					oAllDatums.Append(*ListDatum);
					delete ListDatum;ListDatum=NULL;
				}

				// Insert in procedural view 
				int i;
				int size = oAllDatums.Size();
				for(i=1;i<=size;i++) {
					//	rc = CAAGsiObjTool.InsertInProceduralView(AllDatums[i]);
					CATIGSMProceduralView_var curobj = oAllDatums[i];
					if (NULL_var != curobj ) {
						rc = curobj->InsertInProceduralView(iSpecParent);
					}
				}
				rc =S_OK;
			} // Datum Test 
		}  // Check Interface CATIMf3DBehavior 
	} // Check Spec valid 
	return rc; 
}

//**********************************************************************************************************************************************************************************************************************************************************
//高亮显示操作分类
//**********************************************************************************************************************************************************************************************************************************************************

// 添加高亮显示函数
void PrtService::HighlightHSO(CATISpecObject_var spHSOSpec)
{
	//参数初始化
	CATFrmEditor	* piEditor = NULL;
	CATHSO		* piHSO = NULL;
	piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != piEditor)
	{
		piHSO = piEditor->GetHSO();
	}

	// uses this pointer to build a path element
	CATIBuildPath_var piBuildPath = spHSOSpec;
	if (NULL_var != piBuildPath )
	{
		CATPathElement Context = piEditor->GetUIActiveObject();
		CATPathElement * pPathElement = NULL ;
		piBuildPath->ExtractPathElement(&Context,&pPathElement);

		if (pPathElement != NULL)
		{  
			// the geometrical element corresponding to the active field is now highlighted
			piHSO->AddElement(pPathElement); 

			pPathElement->Release() ;
			pPathElement = NULL ;
		} 

	}
}

//去除高亮显示元素
void PrtService::RemoveHSO(CATISpecObject_var spHSOSpec)
{
	//参数初始化
	CATFrmEditor	* piEditor = NULL;
	CATHSO		* piHSO = NULL;
	piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != piEditor)
	{
		piHSO = piEditor->GetHSO();
	}

	// uses this pointer to build a path element
	CATIBuildPath_var piBuildPath = spHSOSpec;
	if (NULL_var != piBuildPath )
	{
		CATPathElement Context = piEditor->GetUIActiveObject();
		CATPathElement * pPathElement = NULL ;
		piBuildPath->ExtractPathElement(&Context,&pPathElement);

		if (pPathElement != NULL)
		{  
			// the geometrical element corresponding to the active field is now not highlighted
			piHSO->RemoveElement(pPathElement); 

			pPathElement->Release() ;
			pPathElement = NULL ;
		} 

	}
}

//----------------------------------------------------------------------
//清空高亮集
//----------------------------------------------------------------------
BOOL PrtService::ClearHSO()
{
	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
	if(NULL==pEditor)
	{
		ktErrorMsgBox("\n failed to get CATFrmEditor");
		return FALSE;
	}
	CATHSO * pHSO = pEditor->GetHSO();
	if(NULL==pHSO)
	{
		ktErrorMsgBox("\n failed to get CATHSO");
		return FALSE;
	}

	pHSO->Empty();
	return TRUE;
}


//----------------------------------------------------------------------
//高亮显示一组几何对象
//----------------------------------------------------------------------
BOOL PrtService::HighLightObjLst(CATLISTV(CATISpecObject_var) pObjLst)
{
	for(int i=1;i<=pObjLst.Size(); i++)
	{
		CATISpecObject_var spTempObject = pObjLst[i];
		if(NULL_var!=spTempObject)
		{
			HighlightHSO(spTempObject);
		}
	}
	return TRUE;
}




//**********************************************************************************************************************************************************************************************************************************************************
//特征所含参数操作分类
//**********************************************************************************************************************************************************************************************************************************************************

//功能：向单个特征设置参数
void PrtService::AddSpecObjParams(CATDocument * ipDoc,CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue,int iType)
{
	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATICkeParmFactory_var spParmFact = piContainer;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATIParmPublisher_var spParmPublisherGS(spSpecObj);
	for (int i = 1; i <= ListStrName.Size(); i ++)
	{
		CATICkeParm_var spParm = spParmFact->CreateString(ListStrName[i],ListStrNameValue[i]);
		spParmPublisherGS->Append(spParm);

		if (iType == 0)
		{
			spParm->SetUserAccess(CATICkeParm::User);
		}
		else if (iType == 1)
		{
			spParm->SetUserAccess(CATICkeParm::NotSeen);
		}
	}

	//更新文件
	ObjectUpdate(spPrtPart);
}

//功能：修改特征下某些参数，如果参数不存在将自动添加
void PrtService::ModifySpecObjCertainParams(CATDocument * piDoc,CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue)
{
	// 获得容器
	CATInit_var spInitOnDoc = piDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATICkeParmFactory_var spParmFact = piContainer;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//取得direct children parameters
	CATIParmPublisher_var spParmPublisherGS(spSpecObj);	
	CATListValCATISpecObject_var  iListFound;
	spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);

	//遍历所有参数项，与传入参数名称比较，并把对应名称的参数值修改掉
	CATICkeParm_var spCkeParm = NULL_var;
	//
	int i,j;
	CATListValCATUnicodeString  ListNewStrName,ListNewStrNameValue;
	CATBoolean existFlag = FALSE;
	for (i = 1; i <= ListStrName.Size(); i++)
	{

		for (j = 1;j <= iListFound.Size(); j++)
		{
			spCkeParm = iListFound[j];
			if (NULL_var == spCkeParm)
			{
				cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
				break;
			}
			CATUnicodeString StrCkeParmName = spCkeParm->Name();

			int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
			int StrLength = StrCkeParmName.GetLengthInChar();
			CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
			if (StrParaName == ListStrName[i])
			{
				spCkeParm->Valuate(ListStrNameValue[i]);
				existFlag = TRUE;
				continue;
			}

		}

		// 如果未找到该参数项，将自动添加
		if (existFlag == FALSE)
		{
			ListNewStrName.Append(ListStrName[i]);
			ListNewStrNameValue.Append(ListStrNameValue[i]);
		}

	}

	//添加未找到参数
	AddSpecObjParams(piDoc,spSpecObj,ListNewStrName,ListNewStrNameValue);

	//更新文件
	ObjectUpdate(spPrtPart);
}

//功能：修改特征下某些参数状态
void PrtService::ModifySpecObjCertainParamsStatus(CATDocument * piDoc,CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  ListStrName)
{
	// 获得容器
	CATInit_var spInitOnDoc = piDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATICkeParmFactory_var spParmFact = piContainer;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//取得direct children parameters
	CATIParmPublisher_var spParmPublisherGS(spSpecObj);	
	CATListValCATISpecObject_var  iListFound;
	spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);

	//遍历所有参数项，与传入参数名称比较，并把对应名称的参数值修改掉
	CATICkeParm_var spCkeParm = NULL_var;
	//
	int i,j;
	CATListValCATUnicodeString  ListNewStrName,ListNewStrNameValue;
	CATBoolean existFlag = FALSE;
	for (i = 1; i <= ListStrName.Size(); i++)
	{

		for (j = 1;j <= iListFound.Size(); j++)
		{
			spCkeParm = iListFound[j];
			if (NULL_var == spCkeParm)
			{
				cout <<"Can't get CATICkeParm interface from iListFound[j]"<<endl;
				break;
			}
			CATUnicodeString StrCkeParmName = spCkeParm->Name();

			int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
			int StrLength = StrCkeParmName.GetLengthInChar();
			CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
			if (StrParaName == ListStrName[i])
			{
				spCkeParm->SetConst(CATCke::True);
				spCkeParm->SetUserAccess(CATICkeParm::ReadOnly);
				continue;
			}

		}

	}

	//更新文件
	ObjectUpdate(spPrtPart);
}

//功能：向单个特征设置参数：清空以前的数据，并加入新的数据 
void PrtService::ClearAndAddSpecObjParams(CATDocument * ipDoc,CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  ListStrName,CATListValCATUnicodeString  ListStrNameValue,int iType)
{

	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATICkeParmFactory_var spParmFact = piContainer;
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//取得direct children parameters
	CATIParmPublisher_var spParmPublisherGS(spSpecObj);	
	CATListValCATISpecObject_var  iListFound;
	spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);
	for (int n = 1; n<= iListFound.Size();n++)
	{
		if (iType == 0)
		{
			CATICkeParm_var spParm = iListFound[n];
			if (CATICkeParm::User == spParm->UserAccess())
			{
				spParmPublisherGS->RemoveChild(iListFound[n]);
			}
		}

		if (iType == 1)
		{
			CATICkeParm_var spParm = iListFound[n];
			if (CATICkeParm::NotSeen == spParm->UserAccess())
			{
				spParmPublisherGS->RemoveChild(iListFound[n]);
			}
		}	

	}

	for (int i = 1; i <= ListStrName.Size(); i ++)
	{
		CATICkeParm_var spParm = spParmFact->CreateString(ListStrName[i],ListStrNameValue[i]);
		spParmPublisherGS->Append(spParm);

		if (iType == 0)
		{
			spParm->SetUserAccess(CATICkeParm::User);
		}
		else if (iType == 1)
		{
			spParm->SetUserAccess(CATICkeParm::NotSeen);
		}
	}

	//更新文件
	ObjectUpdate(spPrtPart);
}

//查询得到某特征下面所有参数
void PrtService::GetSpecObjAllParams(CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  &ListStrName,CATListValCATUnicodeString  &ListStrNameValue,int iType)
{
	// 获得容器
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	//取得direct children parameters
	CATIParmPublisher_var spParmPublisherGS(spSpecObj);	
	CATListValCATISpecObject_var  iListFound;
	spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);

	for (int i = 1;i <= iListFound.Size(); i++)
	{

		if (iType == 0)
		{
			CATICkeParm_var spParm = iListFound[i];
			if (CATICkeParm::User == spParm->UserAccess())
			{
				CATICkeParm_var spCkeParm = iListFound[i];
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
				ListStrName.Append(StrParaName);
				ListStrNameValue.Append(spCkeParm->Show()); 
			}
		}

		if (iType == 1)
		{
			CATICkeParm_var spParm = iListFound[i];
			if (CATICkeParm::NotSeen == spParm->UserAccess())
			{
				CATICkeParm_var spCkeParm = iListFound[i];
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
				ListStrName.Append(StrParaName);
				ListStrNameValue.Append(spCkeParm->Show()); 
			}
		}			
	}
}

// 查询得到某特征下面某些参数
void PrtService::GetSpecObjCertainParams(CATISpecObject_var const &spSpecObj,CATListValCATUnicodeString  &iListStrName,CATListValCATUnicodeString  &ioListStrNameValue,int iType)
{

	// 获得容器
	if (NULL_var == spSpecObj)
	{
		cout << "spSpecObj is NULL_Var \n";
		return;
	}

	//取得direct children parameters
	CATIParmPublisher_var spParmPublisherGS(spSpecObj);	
	CATListValCATISpecObject_var  iListFound;
	spParmPublisherGS->GetDirectChildren("CATICkeParm",	iListFound);

	CATListValCATUnicodeString ListFoundStrName,ListFoundStrValue;
	for (int i = 1;i <= iListFound.Size(); i++)
	{

		if (iType == 0)
		{
			CATICkeParm_var spParm = iListFound[i];
			if (CATICkeParm::User == spParm->UserAccess())
			{
				CATICkeParm_var spCkeParm = iListFound[i];
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
				ListFoundStrName.Append(StrParaName);
				ListFoundStrValue.Append(spCkeParm->Show()); 
			}
		}

		if (iType == 1)
		{
			CATICkeParm_var spParm = iListFound[i];
			if (CATICkeParm::NotSeen == spParm->UserAccess())
			{
				CATICkeParm_var spCkeParm = iListFound[i];
				CATUnicodeString StrCkeParmName = spCkeParm->Name();
				int BenginNum = StrCkeParmName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
				int StrLength = StrCkeParmName.GetLengthInChar();
				CATUnicodeString StrParaName = StrCkeParmName.SubString(BenginNum+1,StrLength-BenginNum-1);
				ListFoundStrName.Append(StrParaName);
				ListFoundStrValue.Append(spCkeParm->Show()); 
			}
		}			
	}

	CATBoolean existflag = FALSE;
	for (int i = 1; i <=  iListStrName.Size(); i ++)
	{
		for (int j = 1; j <= ListFoundStrName.Size(); j ++)
		{
			if (ListFoundStrName[j] == iListStrName[i])
			{
				ioListStrNameValue.Append(ListFoundStrValue[j]);
				existflag = TRUE;
				continue;
			}
		}

		if (existflag == FALSE)
		{
			ioListStrNameValue.Append("");
		}
	}

}

//在几何图形集中设置枚举类型，同样适用于在特征下创建
void PrtService::SetGSMToolParamEnum(CATDocument *piDocument,CATISpecObject_var spGSMTool,CATListValCATUnicodeString listStrParamName,CATListOfInt countNode,CATListValCATUnicodeString listStrParamValue)
{
	if (spGSMTool == NULL_var)
	{
		return;
	}

	//1、从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT rc = piDocument->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(rc) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器类，并得到CATICkeParmFactory工厂接口
	CATInit_var spInitOnDoc = piDocument;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	CATICkeParmFactory_var spFact(piCont);
	if(NULL_var == spFact)
	{
		cout << "Could not get parm factory.\n";
		return;
	}

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piCont->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	CATICkeParmFactory_var spParmFact = piCont;
	CATIParmPublisher_var spParmPublisherGS(spGSMTool);
	//释放无用的接口
	piCont->Release();
	piCont = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	//2、通过循环方式
	for (int i = 1;i <= listStrParamName.Size();i++)
	{
		int startNum = 0;
		for (int j = 1; j < i; j++)
		{
			startNum += countNode[j];
		}

		//如果是1不采用枚举
		if (countNode[i] == 1)
		{
			CATICkeParm_var spParm = spParmFact->CreateString(listStrParamName[i],listStrParamValue[startNum+1]);
			spParmPublisherGS->Append(spParm);
			spParm->SetUserAccess(CATICkeParm::User);
		} 
		else //大于1采用枚举
		{

			int count = countNode[i];
			CATListOfCATUnicodeString pLstEnum;
			for (int k = 1; k <= count; k ++)
			{
				pLstEnum.Append(listStrParamValue[k+startNum]);
			}

			CATICkeParm_var spParm = spParmFact->CreateString(listStrParamName[i],listStrParamValue[startNum+1]);
			spParmPublisherGS->Append(spParm);

			spParm->SetUserAccess(CATICkeParm::User);

			// Modify "realParam"
			CATIParmManipulator_var spMan = NULL_var;
			spParm->SetManipulator( NULL_var );
			spMan = spParm->CreateManipulator();

			if( NULL_var != spMan)
			{
				spMan->SetEnumerateValues(&pLstEnum);
			}
		}
	}

}


//**********************************************************************************************************************************************************************************************************************************************************
//各容器操作分类
//**********************************************************************************************************************************************************************************************************************************************************

//从文档获取CATICkeParmFactory
void PrtService::GetParamFactory(CATDocument *piDocument,CATICkeParmFactory_var &iospParmFact)
{

	//1、从CATDocument * ipDoc中得到CATIProduct spRootProduct
	CATIDocRoots* piDocRootsOnDoc = NULL;
	HRESULT rc = piDocument->QueryInterface(IID_CATIDocRoots, (void**) &piDocRootsOnDoc);
	if ( FAILED(rc) ) return;

	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct =  (*pRootProducts)[1];

	delete pRootProducts;
	pRootProducts=NULL;
	piDocRootsOnDoc->Release();
	piDocRootsOnDoc = NULL;

	//2、获得容器类，并得到CATICkeParmFactory工厂接口
	CATInit_var spInitOnDoc = piDocument;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piCont = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	rc = piCont->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	iospParmFact = piCont;

	//释放无用的接口
	piCont->Release();
	piCont = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;
}

//获取当前Part文档容器
HRESULT PrtService::ObtainCurrentRootContainer(CATIPrtContainer *&oRootContainer)
{
	CATDocument* pDoc=NULL;
	pDoc = PrtService::GetPrtDocument();
	if(!pDoc) return E_FAIL;
	return PrtService::ObtainRootContainer(pDoc,oRootContainer);
}

HRESULT PrtService::ObtainRootContainer(CATDocument* iDoc,CATIPrtContainer *&oRootContainer)
{
	CATInit * piInitLink = NULL;
	HRESULT rc = iDoc->QueryInterface( IID_CATInit, (void**) &piInitLink);
	if(FAILED(rc)||piInitLink == NULL) return E_FAIL;

	oRootContainer = (CATIPrtContainer*) piInitLink->GetRootContainer("CATIPrtContainer");
	if(piInitLink)
	{
		piInitLink -> Release();
		piInitLink = NULL;
	}
	return rc;
}



//**********************************************************************************************************************************************************************************************************************************************************
//窗口操作分类
//**********************************************************************************************************************************************************************************************************************************************************

//获取当前窗口最大值
void PrtService::GetWindowMaxSize(int*  oHeight,int*  oWidth )
{
	CATDlgWindow* piWindow = CATApplicationFrame::GetApplicationFrame()->GetMainWindow();
	piWindow->GetMaximumSize(oHeight,oWidth);
}

//消息提示，交互模式可用
void PrtService::ShowDlgNotify(CATUnicodeString strTitle, CATUnicodeString strValue)
{
	CATApplicationFrame *pApplication = CATApplicationFrame::GetFrame(); 
	if (NULL != pApplication) 
	{ 
		CATDlgWindow * pMainWindow = pApplication->GetMainWindow();
		CATDlgNotify *pNotifyDlg = new CATDlgNotify (pMainWindow, "MBD Notify", CATDlgNfyWarning);
		if (NULL != pNotifyDlg) 
		{
			pNotifyDlg->DisplayBlocked(strValue,strTitle);
			pNotifyDlg->RequestDelayedDestruction(); 
		}
	}
}

//错误提示
void PrtService::ktErrorMsgBox(const char* pMsg)
{
	CATDlgNotify  *pNotifyDlg = new CATDlgNotify( CATApplicationFrame::GetApplicationFrame()->GetMainWindow(),
		"错误",
		CATDlgNfyError);	
	pNotifyDlg->DisplayBlocked(pMsg,"错误");
	pNotifyDlg->RequestDelayedDestruction();
	pNotifyDlg=NULL;
}
void PrtService::ktErrorMsgBox(const int iNum)
{
	CATUnicodeString Str;
	Str.BuildFromNum(iNum);

	CATDlgNotify  *pNotifyDlg = new CATDlgNotify( CATApplicationFrame::GetApplicationFrame()->GetMainWindow(),
		"错误",
		CATDlgNfyError);	
	pNotifyDlg->DisplayBlocked(Str,"错误");
	pNotifyDlg->RequestDelayedDestruction();
	pNotifyDlg=NULL;

}
void PrtService::ktErrorMsgBox(const double dValue)
{

	CATUnicodeString Str;
	Str.BuildFromNum(dValue);

	CATDlgNotify  *pNotifyDlg = new CATDlgNotify( CATApplicationFrame::GetApplicationFrame()->GetMainWindow(),
		"错误",
		CATDlgNfyError);	
	pNotifyDlg->DisplayBlocked(Str,"错误");
	pNotifyDlg->RequestDelayedDestruction();
	pNotifyDlg=NULL;
}


//警告提示
void PrtService::ktWarningMsgBox(const char* pMsg)
{
	CATDlgNotify  *pNotifyDlg = new CATDlgNotify( CATApplicationFrame::GetApplicationFrame()->GetMainWindow(),
		"警告",
		CATDlgNfyWarning);	
	pNotifyDlg->DisplayBlocked(pMsg,"警告");
	pNotifyDlg->RequestDelayedDestruction();
	pNotifyDlg=NULL;
}

//消息
void PrtService::ktInfoMsgBox(const char* pMsg)
{
	CATDlgNotify  *pNotifyDlg = new CATDlgNotify( CATApplicationFrame::GetApplicationFrame()->GetMainWindow(),
		"提示",
		CATDlgNfyInformation);	
	pNotifyDlg->DisplayBlocked(pMsg,"提示");
	pNotifyDlg->RequestDelayedDestruction();
	pNotifyDlg=NULL;
}


//**********************************************************************************************************************************************************************************************************************************************************
//PATHELEMENT操作分类
//**********************************************************************************************************************************************************************************************************************************************************

//获取对象路径的字符串
void PrtService::PathElementString(CATPathElement * ipPath,CATUnicodeString & oPathName,BOOL bIsBackward)
{
	oPathName = "" ;
	if ( NULL != ipPath )
	{
		int sizeOfThePath = ipPath->GetSize();  
		if(bIsBackward)
		{
			for ( int i = 0 ; i < sizeOfThePath ; i++ )
			{
				CATBaseUnknown * pElt = (*ipPath)[i] ;
				if ( NULL != pElt )
				{
					CATIAlias * pIAliasOnElt = NULL ;
					HRESULT rc = pElt->QueryInterface (IID_CATIAlias, (void**) &pIAliasOnElt);
					if (SUCCEEDED(rc) )
					{
						CATUnicodeString Name = pIAliasOnElt->GetAlias();
						oPathName.Append(Name) ;

						if ( i <= (sizeOfThePath-2) )
						{
							oPathName.Append("/");
						}

						pIAliasOnElt->Release();
						pIAliasOnElt = NULL ;
					}
				}
			}
		}
		else
		{
			for ( int i = sizeOfThePath-1 ; i >= 0 ; i-- )
			{
				CATBaseUnknown * pElt = (*ipPath)[i] ;
				if ( NULL != pElt )
				{
					CATIAlias * pIAliasOnElt = NULL ;
					HRESULT rc = pElt->QueryInterface (IID_CATIAlias, (void**) &pIAliasOnElt);
					if (SUCCEEDED(rc) )
					{
						CATUnicodeString Name = pIAliasOnElt->GetAlias();
						oPathName.Append(Name) ;

						if ( i !=0 )
						{
							oPathName.Append("/");
						}

						pIAliasOnElt->Release();
						pIAliasOnElt = NULL ;
					}
				}
			}
		}
	}
}


//获取特征的CATPathElement
CATPathElement* PrtService::ExtractPathElement(CATBaseUnknown* pObject)
{
	HRESULT rc = S_OK; 
	CATPathElement* pPathElement = NULL; 

	do {

		if (!pObject) break;

		CATIBuildPath* pBuildPath = NULL;

		rc = pObject->QueryInterface(IID_CATIBuildPath,(void**)&pBuildPath);
		if (FAILED(rc))
		{
			break;
		}

		CATPathElement activePath = CATFrmEditor::GetCurrentEditor()->GetUIActiveObject();
		rc = pBuildPath->ExtractPathElement(&activePath,&pPathElement);
		if (pBuildPath)
		{
			pBuildPath->Release();
			pBuildPath = NULL;
		}

		if(FAILED(rc) || !pPathElement) break;

	}while(0);

	if(FAILED(rc)) pPathElement = NULL;

	return pPathElement;

}


//------------------------------------------------------------------------
//由对象获取路径, 调用者释放
BOOL PrtService::GetPathElementFromSpecObject(CATPathElement* &pPathElement, const CATISpecObject_var spSpecObject)
{
	pPathElement=NULL;
	if(spSpecObject==NULL_var)
	{
		return FALSE;
	}
	//
	//获得当前editor
	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor ();
	if (NULL == pEditor)
	{
		ktErrorMsgBox("\nerror: failed to get current editor");
		return FALSE;
	}
	CATPathElement Context=pEditor->GetUIActiveObject();

	if (Context==NULL)
		return FALSE;
	//
	CATIBuildPath_var spBuildPathAccess = spSpecObject;
	if(spBuildPathAccess==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get build path access");
		return FALSE;
	}
	//
	HRESULT rc=spBuildPathAccess -> ExtractPathElement (&Context, &pPathElement);

	if(FAILED(rc))
	{
		ktErrorMsgBox("\nerror: failed to extract path element");
		return FALSE;
	}
	//
	return TRUE;

}

//获取对象路径的字符串
void PrtService::GetPathElementString(CATPathElement * ipPath ,CATUnicodeString & oPathName, BOOL bIsBackward, int iLength)
{
	oPathName = "" ;
	if ( NULL != ipPath )
	{
		int sizeOfThePath = ipPath->GetSize();  
		if(bIsBackward)
		{
			int iStart=0;
			if(iLength<sizeOfThePath)
			{
				iStart = sizeOfThePath-iLength;
			}
			for ( int i = iStart ; i < sizeOfThePath ; i++ )
			{
				CATBaseUnknown * pElt = (*ipPath)[i] ;
				if ( NULL != pElt )
				{
					CATIAlias * pIAliasOnElt = NULL ;
					HRESULT rc = pElt->QueryInterface (IID_CATIAlias, (void**) &pIAliasOnElt);
					if (SUCCEEDED(rc) )
					{
						CATUnicodeString Name = pIAliasOnElt->GetAlias();
						oPathName.Append(Name) ;

						if ( i <= (sizeOfThePath-2) )
						{
							oPathName.Append("/");
						}

						pIAliasOnElt->Release();
						pIAliasOnElt = NULL ;
					}
				}
			}
		}
		else
		{
			for ( int i = sizeOfThePath-1 ; i >= 0 ; i-- )
			{
				CATBaseUnknown * pElt = (*ipPath)[i] ;
				if ( NULL != pElt )
				{
					CATIAlias * pIAliasOnElt = NULL ;
					HRESULT rc = pElt->QueryInterface (IID_CATIAlias, (void**) &pIAliasOnElt);
					if (SUCCEEDED(rc) )
					{
						CATUnicodeString Name = pIAliasOnElt->GetAlias();
						oPathName.Append(Name) ;

						if ( i !=0 )
						{
							oPathName.Append("/");
						}

						pIAliasOnElt->Release();
						pIAliasOnElt = NULL ;
					}
				}
			}
		}
	}
}

BOOL PrtService::GetPathElementFromSpecObject(CATPathElement* &pPathElement,const CATISpecObject_var spSpecObject,CATPathElement* pFatherPathElement)
{
	pPathElement=NULL;
	if(spSpecObject==NULL_var)
	{
		return FALSE;
	}

	//
	CATPathElement * pInputContext;

	if(pFatherPathElement==NULL)
	{
		//获得当前editor
		CATFrmEditor * editor = CATFrmEditor::GetCurrentEditor ();
		if (NULL == editor)
		{
			ktErrorMsgBox("\nerror: failed to get current editor");
			return FALSE;
		}
		CATPathElement FatherPathElement=editor->GetUIActiveObject();
		if(FatherPathElement.GetSize()==0)
		{
			ktErrorMsgBox("\nerror: failed to get current path");
			return FALSE;
		}
		pInputContext = new CATPathElement(FatherPathElement);
	}
	else
	{
		pInputContext = new CATPathElement(*pFatherPathElement);
	}
	if (pInputContext==NULL)
		return FALSE;
	//
	CATIBuildPath_var spiBuildPathAccess = spSpecObject;
	if(spiBuildPathAccess==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get build path access");
		return FALSE;
	}
	//
	HRESULT rs=spiBuildPathAccess -> ExtractPathElement (pInputContext, &pPathElement);
	pInputContext -> Release();
	pInputContext = NULL;

	if(FAILED(rs))
	{
		ktErrorMsgBox("\nerror: failed to extract path element");
		return FALSE;
	}
	//
	return TRUE;
}

BOOL PrtService::GetPathElementFromSpecObject(CATPathElement* &pPathElement,const CATISpecObject_var spSpecObject,CATIProduct_var spPrdInstance)
{
	pPathElement=NULL;
	if(spSpecObject==NULL_var || spPrdInstance==NULL_var)
	{
		return FALSE;
	}
	if(SUCCEEDED(spPrdInstance->IsReference()))
	{
		ktErrorMsgBox("\n错误：不是一个产品实例");
		return FALSE;
	}
	//
	//获得当前editor
	CATFrmEditor * editor = CATFrmEditor::GetCurrentEditor ();
	if (NULL == editor)
	{
		ktErrorMsgBox("\nerror: failed to get current editor");
		return FALSE;
	}
	//获得当前文档
	CATDocument * pCurDoc= editor -> GetDocument();
	if (NULL == pCurDoc) 
	{
		ktErrorMsgBox("\nerror: failed to get current document");
		return FALSE;
	}
	if(pCurDoc->IsAKindOf("CATProduct")==0)
	{
		ktInfoMsgBox("\n紧固件设计时，当前文档必须是产品文档!");
		return FALSE;
	}
	//
	CATIDocRoots_var spiDocRootsOnDoc = pCurDoc;

	if ( spiDocRootsOnDoc==NULL_var ) 
	{
		ktErrorMsgBox("access to the root product failed");
		return FALSE;
	}
	//获得product文档的根对象
	CATListValCATBaseUnknown_var *pRootProducts=spiDocRootsOnDoc->GiveDocRoots();
	CATIProduct_var spRootProduct;
	if (NULL != pRootProducts)
	{
		if (pRootProducts->Size()>0)
		{  
			spRootProduct = (*pRootProducts)[1];
			delete pRootProducts;
			pRootProducts = NULL;
		}

	}
	CATIBuildPath_var spiBuildPathAccess = spPrdInstance;
	if(spiBuildPathAccess==NULL_var)
	{
		ktErrorMsgBox("\nerror: failed to get build path access");
		return FALSE;
	}

	CATPathElement * pInputContext = new CATPathElement();
	if (pInputContext==NULL)
		return FALSE;
	pInputContext -> AddChildElement (spRootProduct);

	CATPathElement* pFatherPathElement;
	HRESULT rs=spiBuildPathAccess -> ExtractPathElement (pInputContext, &pFatherPathElement);
	pInputContext -> Release();
	pInputContext = NULL;

	if(FAILED(rs))
	{
		ktErrorMsgBox("\nerror: failed to extract path element");
		return FALSE;
	}
	BOOL bState=GetPathElementFromSpecObject(pPathElement,spSpecObject,pFatherPathElement);
	//
	pFatherPathElement->Release();
	pFatherPathElement=NULL;
	//
	return bState;
}

void PrtService::FreePathElementLst(CATLISTP(CATPathElement) &lstPathElem)
{
	for(int i=1;i<=lstPathElem.Size();i++)
	{
		if(lstPathElem[i]!=NULL)
		{
			lstPathElem[i]->Release();
		}
	}
	lstPathElem.RemoveAll();
}

CATIProduct_var PrtService::GetLastProductInstance(CATPathElement* pPathElement)
{
	if(pPathElement==NULL || pPathElement->GetSize()==0)
	{
		return NULL_var;
	}
	//
	CATBaseUnknown* pPrdInstance=NULL;
	HRESULT hr=pPathElement->Search(IID_CATIProduct,(void**)&pPrdInstance);
	if(FAILED(hr) || pPrdInstance==NULL)
	{
		return NULL_var;
	}
	//
	CATIProduct_var spPrdInstance=pPrdInstance;
	pPrdInstance->Release();
	pPrdInstance=NULL;
	//
	return spPrdInstance;
}

CATPathElement* PrtService::GetLastPrdInstPathElement(CATPathElement* pPathElement)
{
	if(pPathElement==NULL || pPathElement->GetSize()==0)
	{
		return NULL;
	}	
	//
	CATBaseUnknown* pPrdInstance=NULL;
	HRESULT hr=pPathElement->Search(IID_CATIProduct,(void**)&pPrdInstance);
	if(FAILED(hr) || pPrdInstance==NULL)
	{
		return NULL;
	}
	//
	CATPathElement* pPrdPathElement=new CATPathElement();
	if(pPrdPathElement==NULL)
		return NULL;
	//
	while(pPrdInstance!=NULL)
	{
		pPrdPathElement->AddFatherElement(pPrdInstance);

		pPrdInstance=pPathElement->NextLeftElement();
	}
	//
	if(pPrdPathElement->GetSize()==0)
	{
		pPrdPathElement->Release();
		pPrdPathElement=NULL;
		return NULL;
	}
	//
	return pPrdPathElement;
}

CATIPrtPart_var PrtService::GetPrtPartObject(CATPathElement* pPathElement)
{
	if(pPathElement==NULL || pPathElement->GetSize()==0)
	{
		return NULL_var;
	}
	//
	CATBaseUnknown* pPrtPart=NULL;
	HRESULT hr=pPathElement->Search(IID_CATIProduct,(void**)&pPrtPart);
	if(FAILED(hr) || pPrtPart==NULL)
	{
		return NULL_var;
	}
	//
	CATIPrtPart_var spPrtPart=pPrtPart;
	pPrtPart->Release();
	pPrtPart=NULL;
	//
	return spPrtPart;
}

CATPathElement* PrtService::GetPrtPartPathElement(CATPathElement* pPathElement)
{
	if(pPathElement==NULL || pPathElement->GetSize()==0)
	{
		return NULL;
	}
	//
	CATBaseUnknown* pPrtPart=NULL;
	HRESULT hr=pPathElement->Search(IID_CATIPrtPart,(void**)&pPrtPart);
	if(FAILED(hr) || pPrtPart==NULL)
	{
		return NULL;
	}
	//
	CATPathElement* pPrtPathElement=new CATPathElement();
	if(pPrtPathElement==NULL)
		return NULL;
	//
	while(pPrtPart!=NULL)
	{
		pPrtPathElement->AddFatherElement(pPrtPart);

		pPrtPart=pPathElement->NextLeftElement();
	}
	//
	if(pPrtPathElement->GetSize()==0)
	{
		pPrtPathElement->Release();
		pPrtPathElement=NULL;
		return NULL;
	}
	//
	return pPrtPathElement;
}

CATISpecObject_var PrtService::GetLastSpecObject(CATPathElement* pPathElement)
{
	if(pPathElement==NULL || pPathElement->GetSize()==0)
		return NULL_var;
	//
	CATBaseUnknown * pObject = NULL ;
	HRESULT rs=pPathElement->Search(IID_CATISpecObject,(void**)&pObject);
	//
	if ( FAILED(rs) || NULL ==  pObject )
	{
		return NULL_var;
	}
	//
	CATISpecObject_var spFstObject=pObject;
	if(spFstObject==NULL_var)
	{
		return NULL_var;
	}
	//
	return spFstObject;
}


//**********************************************************************************************************************************************************************************************************************************************************
//视图操作分类
//**********************************************************************************************************************************************************************************************************************************************************
//Top View
BOOL PrtService::RollCameraToTopView(CATMathDirectionf  SightDir,CATMathDirectionf  upDir)
{
	//当前布局
	CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
	if ( NULL ==  pLayout )
	{
		ktErrorMsgBox("\nerror: failed to get CurrentLayout object");
		return FALSE;
	}
	//当前窗口	
	CATFrmWindow * pWindow = pLayout->GetCurrentWindow();
	if ( NULL ==  pWindow )
	{
		ktErrorMsgBox("\nerror: failed to get CurrentWindow object");
		return FALSE;
	}
	//获得当前Viewer
	CATViewer *pViewer = pWindow->GetViewer();
	if(NULL == pViewer)
	{
		ktErrorMsgBox("\nerror: failed to get viewer object");
		return FALSE;
	}
	//获得main 3D viewpoint:
	CAT3DViewpoint &vp3d =pViewer->GetMain3DViewpoint();

	//Retrieving of the window dimensions:
	float windowWidth(0), windowHeight(0);
	pViewer->GetGraphicSize(&windowWidth, &windowHeight);

	//
	float ratio;
	if(windowHeight > windowWidth) //that means that we must take care
		//of the other angle of the frustum
		//which can be approximated by teta*(windowWidth/windowHeight)
	{
		ratio = windowHeight/windowWidth;
	}
	else
	{
		ratio = 1.0f;
	}

	//To reframe the view, we also need the representation bounding volume.
	CAT3DBagRep * rootBag = (CAT3DBagRep *)(vp3d.GetBag());
	if ( NULL == rootBag )
	{
		return TRUE;
	}
	//If the bounding element is invalid, let's force its calculation:
	if(rootBag->IsInvalid())
		rootBag->ComputeBoundingElement(1);

	//Retrieving of the bounding element:
	const CAT3DBoundingSphere &bs3d = rootBag->GetBoundingElement();

	//Retrieving of the bounding element radius:
	float radius = bs3d.GetRadius();

	if(radius == 0.f)
		radius = bs3d.GetRadiusMM();

	double dbAngle = vp3d.GetAngle();
	double dbRAngle = CATDegreeToRadian*dbAngle;
	double focus = 1.05f * (radius/tan(dbRAngle));


	CATMathPointf TargetPosition = bs3d.GetCenter();
	CATMathPointf OriginPosition = TargetPosition- SightDir*(float)focus;

	vp3d.SetOrigin(OriginPosition);
	vp3d.SetSightDirection(SightDir);
	vp3d.SetTarget(TargetPosition);
	vp3d.SetUpDirection(upDir);

	return TRUE;
}

//模型结构树高亮居中
void PrtService::CenterSpecGraph(CATPathElement* piPathEle)
{

	//-------------------------------------------
	CATFrmEditor * pEditor =CATFrmEditor::GetCurrentEditor();
	if (pEditor != NULL)
	{
		CATHSO *piHSO = pEditor->GetHSO();
		piHSO->Empty();
		piHSO->AddElement(piPathEle);

		CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
		if ( NULL == pLayout ) return;
		CATFrmWindow * pCurrentWindow = pLayout->GetCurrentWindow();
		if ( NULL == pCurrentWindow ) return;
		CATFrmNavigGraphicWindow * pFrmNavigGraphicWindow = (CATFrmNavigGraphicWindow*) pCurrentWindow ;
		CATNavigBox * pNavigBox = NULL ;
		pNavigBox = pFrmNavigGraphicWindow->GetNavigBox();
		if ( NULL == pNavigBox ) return;
		CATCafCenterGraph CenterGraphObj;
		CenterGraphObj.CenterGraph("OnHSO",pNavigBox);
	}
}

//----------------------------------------------------------------------
//视图居中给定点对象
//----------------------------------------------------------------------
BOOL PrtService::CenterViewPoints(const CATLISTV(CATMathPoint) lstMathPoints)
{
	if(lstMathPoints.Size()<=0)
		return TRUE;
	//
	CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
	if ( NULL == pLayout ) return FALSE;

	CATFrmWindow * pCurrentWindow = pLayout->GetCurrentWindow();
	if ( NULL == pCurrentWindow ) 
		return FALSE;
	//
	CATViewer* p3DViewer=pCurrentWindow->GetViewer();
	if (p3DViewer==NULL)
	{
		return FALSE;
	}
	//
	CAT3DViewpoint &vp3d =p3DViewer->GetMain3DViewpoint();

	CATSupport & Support = p3DViewer->GetSupport();
	float width, height, MMInSupportUnit, RatioWH ;

	Support.GetWidthAndHeight(width, height);

	MMInSupportUnit = Support.GetMMInSupportUnit();
	RatioWH = Support.GetRatioWH();

	double dXmin = lstMathPoints[1].GetX();
	double dXmax = lstMathPoints[1].GetX();
	double dYmin = lstMathPoints[1].GetY();
	double dYmax = lstMathPoints[1].GetY();
	double dZmin = lstMathPoints[1].GetZ();
	double dZmax = lstMathPoints[1].GetZ();
	for(int i=2;i<=lstMathPoints.Size();i++)
	{
		if (lstMathPoints[i].GetX()<dXmin)
			dXmin = lstMathPoints[i].GetX();
		else
			dXmax = lstMathPoints[i].GetX();

		if (lstMathPoints[i].GetY()<dYmin)
			dYmin = lstMathPoints[i].GetY();
		else
			dYmax = lstMathPoints[i].GetY();

		if (lstMathPoints[i].GetZ()<dZmin)
			dZmin = lstMathPoints[i].GetZ();
		else
			dZmax = lstMathPoints[i].GetZ();
	}

	CATMathPoint mCOG((dXmin+dXmax)/2,(dYmin+dYmax)/2,(dZmin+dZmax)/2);

	double dbLength=0.0;
	if(lstMathPoints.Size()==1)
	{
		dbLength=5.;
	}
	else
	{
		dbLength =sqrt(pow((dXmax-dXmin),2) + pow((dYmax-dYmin),2) + pow((dZmax-dZmin),2)) ;
	}

	float radius =(float)dbLength;
	float angle = vp3d.GetAngle();
	angle = (float)CATDegreeToRadian*angle;
	float focus = (radius/tan(angle)) * RatioWH;

	CATMathPointf TargetPosition=mCOG;
	CATMathPointf eyePosition = TargetPosition - vp3d.GetSightDirection()*focus;

	vp3d.SetOrigin(eyePosition);
	vp3d.SetTarget(TargetPosition);
	//
	return TRUE;
}