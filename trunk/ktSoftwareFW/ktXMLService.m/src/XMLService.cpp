// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// XMLService.cpp
// Header definition of XMLService
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2011  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "XMLService.h"

// XMLParser
#include "CATIDOMElement.h"
#include "CATIDOMImplementation.h"
#include "CATIXMLDOMDocumentBuilder.h"
#include "CATIDOMDocument.h"
#include "CATIDOMText.h"
#include "CATListOfCATUnicodeString.h"
#include "CATIDOMDocumentType.h"
#include "CATIXMLSAXFactory.h"
#include "CAAXMLMultiFileStream.h"
#include "CATIXMLInputStream.h"
#include "CATISAXInputSource.h"
#include "CATIDOMNodeList.h"
#include "CATListOfInt.h"

#include <iostream>
using namespace std;
 
CATImplementClass( XMLService,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// XMLService : constructor
//-----------------------------------------------------------------------------
XMLService::XMLService():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// XMLService : destructor
//-----------------------------------------------------------------------------
XMLService::~XMLService()
{
}
 
//-----------------------------------------------------------------------------
// XMLService : copy constructor
//-----------------------------------------------------------------------------
XMLService::XMLService(XMLService& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// XMLService : equal operator
//-----------------------------------------------------------------------------
XMLService& XMLService::operator=(XMLService& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}

//  [12/29/2010 ev5adm]
//**********************************************************
HRESULT XMLService::CreateXMLDoc(const CATUnicodeString uXMLFileName,const CATUnicodeString uRootElemName,CATIDOMElement_var &iopRootElem)
{
	HRESULT RC=S_OK;

	// Use the DOM implementation to instantiate a new document
	// with the document type we have just specified.

	CATIDOMImplementation_var pImp = NULL_var;

	RC = CreateCATIXMLDOMDocumentBuilder(m_pXMLBuilder);
	RC = m_pXMLBuilder->GetDOMImplementation(pImp);

	if (FAILED(RC) || pImp == NULL_var ) return E_FAIL;

	RC = pImp->CreateDocument("", uXMLFileName , NULL_var, m_pXMLDoc);
	if (FAILED(RC) || m_pXMLDoc == NULL_var ) return E_FAIL;

	RC = m_pXMLDoc->CreateElement(uRootElemName,iopRootElem);
	if(FAILED(RC))  return E_FAIL;

	RC = m_pXMLDoc->AppendChild(iopRootElem);
	CATIDOMText_var pLine = NULL_var;
	m_pXMLDoc->CreateTextNode(CATUnicodeString("\n"), pLine);
	iopRootElem->AppendChild(pLine);

	return RC;
}

HRESULT XMLService::SaveXMLDoc(const CATUnicodeString uXMLFileName)
{
	HRESULT RC=S_OK;

	CATListOfCATUnicodeString lstOptNames;
	CATListOfCATUnicodeString lstOptValues;

	lstOptNames.Append(CATUnicodeString("CATEncoding"));
	lstOptValues.Append(CATUnicodeString("UTF-8"));

	lstOptNames.Append(CATUnicodeString("CATExpandEntityReferences"));
	lstOptValues.Append(CATUnicodeString("true"));

	RC = m_pXMLBuilder->WriteToFile(m_pXMLDoc,uXMLFileName,lstOptNames,lstOptValues);
	if (FAILED(RC)) return RC;

	return RC;
}

HRESULT XMLService::addXMLNode( const CATIDOMElement_var& pParentElem,
								   CATIDOMElement_var& iopNewElm,
								   const CATUnicodeString    uName,
								   const CATUnicodeString    uValue,
								   const CATListOfCATUnicodeString listAttNames,
								   const CATListOfCATUnicodeString listAttValues,
								   CATBoolean flagHasSon )
{
	HRESULT RC=S_OK;

	//1 创建子节点内容
	RC=m_pXMLDoc->CreateElement(uName,iopNewElm);
	if(SUCCEEDED(RC) && iopNewElm != NULL_var)
	{
		//挂载属性
		for (int i = 1; i <= listAttNames.Size(); i++)
		{
			iopNewElm->SetAttribute(listAttNames[i],listAttValues[i]);
		}

		pParentElem->AppendChild(iopNewElm);
		
	}

	//2 挂载该节点值
	CATIDOMText_var    pTempText ;
	RC = m_pXMLDoc->CreateTextNode(uValue, pTempText);
	if (FAILED(RC) || (pTempText == NULL_var))  return E_FAIL; 

	RC = iopNewElm->AppendChild(pTempText);
	if (FAILED(RC))	return E_FAIL; 

	//3 如果存在下级节点开头自动换行
	CATIDOMText_var pFLine = NULL_var;
	m_pXMLDoc->CreateTextNode(CATUnicodeString("\n"), pFLine) ;
	if (flagHasSon == TRUE)
	{
		iopNewElm->AppendChild(pFLine);
	}

	//4 父节点自动换行
	CATIDOMText_var pBLine = NULL_var;
	m_pXMLDoc->CreateTextNode(CATUnicodeString("\n"), pBLine) ;
	pParentElem->AppendChild(pBLine);

	return RC;
}

HRESULT XMLService::CreateXmlDoc(CATUnicodeString iPath,CATIDOMDocument_var &iDoc,CATIXMLDOMDocumentBuilder_var & oBuilder)
{
	HRESULT rc=E_FAIL;
	rc = ::CreateCATIXMLDOMDocumentBuilder(oBuilder);
	if(!SUCCEEDED(rc)||NULL_var==oBuilder)
	{
		cout<<"Error: Failed to create CreateCATIXMLDOMDocumentBuilder"<<endl;
		return rc;
	}
	CATIXMLSAXFactory_var factory=NULL_var;
	rc = ::CreateCATIXMLSAXFactory(factory);
	if(!SUCCEEDED(rc)||NULL_var==factory)
	{
		cout<<"Error: Failed to create CreateCATIXMLSAXFactory"<<endl;
		return rc;
	}

	CATListOfCATUnicodeString files;
	files.Append(iPath);
	CAAXMLMultiFileStream* customStreamImpl = new CAAXMLMultiFileStream(files);
	CATIXMLInputStream_var customStream = customStreamImpl;
	customStreamImpl->Release();
	customStreamImpl = NULL;
	if (customStream == NULL_var) 
	{
		cout<<"Error: Failed to create CATIXMLInputStream"<<endl;
		return E_FAIL;
	}
	CATISAXInputSource_var source;
	rc = factory->CreateInputSourceFromStream(customStream, "MyCustomSource", source);
	if (FAILED(rc) || (source == NULL_var)) 
	{
		cout<<"Error: Failed to create CreateInputSourceFromStream"<<endl;
		return rc;
	}
	CATListOfCATUnicodeString readOptions;
	readOptions.Append("CATDoValidation");
	CATListOfCATUnicodeString readOptionValues;
	readOptionValues.Append("false");
	rc = oBuilder->Parse(source, iDoc, readOptions, readOptionValues);

	if(!SUCCEEDED(rc)||NULL_var==iDoc)
	{
		CATIDOMImplementation_var implementation=NULL_var;
		rc = oBuilder->GetDOMImplementation(implementation);
		if (FAILED(rc) || (implementation == NULL_var)) 
		{
			cout<<"Error: Failed to get GetDOMImplementation"<<endl;
			return rc;
		}
		CATIDOMDocumentType_var docType;
		rc = implementation->CreateDocumentType("Name", "", "automotive.dtd", docType);
		if (FAILED(rc) || (docType == NULL_var)) 
		{
			cout<<"Error: Failed to create CreateDocumentType"<<endl;
			return rc;
		}
		rc = implementation->CreateDocument("", "", NULL_var, iDoc);
		if (FAILED(rc) || (iDoc == NULL_var)) 
		{
			cout<<"Error: Failed to create CreateDocument"<<endl;
			return rc;
		}
		cout<<"success to create xml"<<endl;
	}
	return rc;
}

HRESULT XMLService::ReadXml(CATUnicodeString iPath,CATIDOMDocument_var &iDoc,CATIXMLDOMDocumentBuilder_var & oBuilder)
{
	HRESULT rc=E_FAIL;
	rc = ::CreateCATIXMLDOMDocumentBuilder(oBuilder);
	if(!SUCCEEDED(rc)||NULL_var==oBuilder)
	{
		cout<<"Error: Failed to create CreateCATIXMLDOMDocumentBuilder"<<endl;
		return rc;
	}
	CATIXMLSAXFactory_var factory=NULL_var;
	rc = ::CreateCATIXMLSAXFactory(factory);
	if(!SUCCEEDED(rc)||NULL_var==factory)
	{
		cout<<"Error: Failed to create CreateCATIXMLSAXFactory"<<endl;
		return rc;
	}

	CATListOfCATUnicodeString files;
	files.Append(iPath);
	CAAXMLMultiFileStream* customStreamImpl = new CAAXMLMultiFileStream(files);
	CATIXMLInputStream_var customStream = customStreamImpl;
	customStreamImpl->Release();
	customStreamImpl = NULL;
	if (customStream == NULL_var) 
	{
		cout<<"Error: Failed to create CATIXMLInputStream"<<endl;
		return E_FAIL;
	}
	CATISAXInputSource_var source;
	rc = factory->CreateInputSourceFromStream(customStream, "MyCustomSource", source);
	if (FAILED(rc) || (source == NULL_var)) 
	{
		cout<<"Error: Failed to create CreateInputSourceFromStream"<<endl;
		return rc;
	}
	CATListOfCATUnicodeString readOptions;
	readOptions.Append("CATDoValidation");
	CATListOfCATUnicodeString readOptionValues;
	readOptionValues.Append("false");
	rc = oBuilder->Parse(source, iDoc, readOptions, readOptionValues);
	return rc;
}

HRESULT XMLService::CreateElement(CATIDOMDocument_var &iDoc,CATUnicodeString iXPath,CATUnicodeString iContent,CATIDOMElement_var& oElement)
{
	HRESULT rc=E_FAIL;
	int i=0;
	CATUnicodeString usPathTemp=iXPath;
	CATListValCATUnicodeString nodes;
	do
	{
		i=usPathTemp.SearchSubString("/");
		if(i<0)
		{
			nodes.Append(usPathTemp);
			cout<<"usPathTemp:"<<usPathTemp<<endl;
			break;
		}
		cout<<"usPathTemp:"<<usPathTemp.SubString(0,i)<<endl;
		nodes.Append(usPathTemp.SubString(0,i));
		usPathTemp=usPathTemp.SubString(i+1,usPathTemp.GetLengthInChar()-i-1);
	}while(true);
	int nNodeSize=nodes.Size();
	cout<<"nNodeSize:"<<nNodeSize<<endl;
	if(nNodeSize<1)
	{
		cout<<"Error: xpath is invalid"<<endl;
		return E_FAIL;
	}
	//get root element
	CATIDOMElement_var spParentElement=NULL_var;
	rc=iDoc->GetDocumentElement(spParentElement);
	if(NULL_var==spParentElement)
	{
		rc=iDoc->CreateElement(nodes[1],spParentElement);
		rc=iDoc->AppendChild(spParentElement);
		if(nNodeSize==1)
		{
			oElement=spParentElement;
			return S_OK;
		}
	}

	//get elements under root and above the element to create
	for(int j=2;j<nNodeSize;j++)
	{
		CATUnicodeString usNodeName=nodes[j];
		if(NULL_var==spParentElement)
		{
			cout<<"Error: Failed to create element"<<endl;
			return E_FAIL;
		}
		CATIDOMNodeList_var spNodeList=NULL_var;
		spParentElement->GetElementsByTagName(usNodeName,spNodeList);
		unsigned int nNodeCount=0;
		if(NULL_var!=spNodeList)
		{
			rc=spNodeList->GetLength(nNodeCount);
		}
		if(nNodeCount<1)
		{
			cout<<"create it"<<endl;
			CATIDOMElement_var spElement=NULL_var;
			iDoc->CreateElement(usNodeName,spElement);
			spParentElement->AppendChild(spElement);
			spParentElement=spElement;
		}
		else
		{
			cout<<"get it"<<endl;
			spNodeList->Item(0,spParentElement);
		}
	}
	//create element
	if(NULL_var!=spParentElement)
	{
		cout<<"creating element..."<<endl;
		iDoc->CreateElement(nodes[nNodeSize],oElement);
		spParentElement->AppendChild(oElement);

		//create text node
		CATIDOMText_var spDOMText=NULL_var;
		iDoc->CreateTextNode(iContent,spDOMText);
		oElement->AppendChild(spDOMText);
		return S_OK;
	}
	return rc;
}

HRESULT XMLService::CreateElement(CATIDOMDocument_var &iDoc,CATUnicodeString iXPath,CATUnicodeString iContent,CATListValCATUnicodeString iAttrNames,CATListValCATUnicodeString iAttrValues,CATIDOMElement_var& oElement)
{
	HRESULT rc=E_FAIL;
	rc=XMLService::CreateElement(iDoc,iXPath,iContent,oElement);
	if(SUCCEEDED(rc)&&NULL_var!=oElement)
	{
		cout<<"success to create the elment"<<endl;
		for(int i=1;i<=iAttrNames.Size();i++)
		{
			CATUnicodeString usValue="";
			if(i<=iAttrValues.Size())
			{
				usValue=iAttrValues[i];
			}
			oElement->SetAttribute(iAttrNames[i],usValue);
		}
	}
	return rc;
}

HRESULT XMLService::DeleteElements(CATIDOMDocument_var &iDoc,CATUnicodeString nodeName)
{
	HRESULT rc=E_FAIL;
	CATIDOMNodeList_var spNodeList=NULL_var;
	iDoc->GetElementsByTagName(nodeName,spNodeList);
	if(NULL_var!=spNodeList)
	{
		unsigned int nNodeCount=0;
		rc=spNodeList->GetLength(nNodeCount);
		for(int i=0;i<nNodeCount;i++)
		{
			CATIDOMNode_var spNode=NULL_var;
			spNodeList->Item(i,spNode);
			if(NULL_var!=spNode)
			{
				CATIDOMNode_var spNodeParent=NULL_var;
				spNode->GetParentNode(spNodeParent);
				if(NULL_var!=spNodeParent)
				{
					spNodeParent->RemoveChild(spNode);
				}
			}
		}
	}
	return rc;
}

HRESULT XMLService::ReadXMLInfoFromFile(const CATUnicodeString &xmlPath,CATLISTV(CATUnicodeString) &ListDbName,
										   CATLISTV(CATUnicodeString) &ListDbWBSItem,
										   CATListOfInt &countNode,
										   CATLISTV(CATUnicodeString) &ListLableName,
										   CATLISTV(CATUnicodeString) &ListWBSItem,
										   CATLISTV(CATUnicodeString) &ListGSMToolName,
										   CATLISTV(CATUnicodeString) &ListGSMToolSwitch)
{

	CATIDOMDocument_var oDocument = NULL_var;
	CATIXMLDOMDocumentBuilder_var  oBuilder = NULL_var;

	HRESULT rc = XMLService::ReadXml(xmlPath,oDocument,oBuilder);
	if (FAILED(rc)||(oDocument == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return rc;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = oDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return rc;
	}

	CATIDOMNodeList_var childElements = NULL_var;
	rootElement->GetChildNodes(childElements);

	unsigned int iLength = 0;
	childElements->GetLength(iLength);

	for (int i = 0;i < iLength;i++)
	{
		CATIDOMElement_var childElement = NULL_var;
		childElements->Item(i,childElement);
		if (childElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			childElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString("DbName"))
			{
				//获取库节点相关信息
				
				CATUnicodeString DbName("");
				childElement->GetAttribute("name",DbName);
				ListDbName.Append(DbName);

				CATUnicodeString DbWBSItem("");
				childElement->GetAttribute("DbWBSItem",DbWBSItem);
				ListDbWBSItem.Append(DbWBSItem);

				CATUnicodeString strGSMToolName("");
				childElement->GetAttribute("GSMTOOLName",strGSMToolName);
				ListGSMToolName.Append(strGSMToolName);

				CATUnicodeString strGSMToolSwitch("");
				childElement->GetAttribute("GSMTOOLSwitch",strGSMToolSwitch);
				ListGSMToolSwitch.Append(strGSMToolSwitch);

			    int count = 0; 
				GetListNodeFromXmlNode(childElement,ListLableName,ListWBSItem,count);
				countNode.Append(count);
			}
		}
	}

	return S_OK;
}

HRESULT XMLService::ReadTreeNodeFromXml(const CATUnicodeString &istrxmlPath,CATLISTV(CATUnicodeString) &oListTreeNodeName)
{
	CATIDOMDocument_var oDocument = NULL_var;
	CATIXMLDOMDocumentBuilder_var  oBuilder = NULL_var;

	HRESULT rc = XMLService::ReadXml(istrxmlPath,oDocument,oBuilder);
	if (FAILED(rc)||(oDocument == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return rc;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = oDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return rc;
	}

	CATIDOMNodeList_var childElements = NULL_var;
	rootElement->GetChildNodes(childElements);

	unsigned int iLength = 0;
	childElements->GetLength(iLength);

	for (int i = 0;i < iLength;i++)
	{
		CATIDOMElement_var childElement = NULL_var;
		childElements->Item(i,childElement);
		if (childElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			childElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString("TreeNode"))
			{
				//获取库节点相关信息
				CATUnicodeString DbName("");
				childElement->GetAttribute("name",DbName);
				oListTreeNodeName.Append(DbName);
			}
		}
	}

	return S_OK;
}


void XMLService::GetListNodeFromXmlNode(CATIDOMElement_var &ParentElement,
										   CATLISTV(CATUnicodeString) &ListLableName,
										   CATLISTV(CATUnicodeString) &ListWBSItem,
										   int &count)
{
	count = 0;

	CATIDOMNodeList_var childElements = NULL_var;
	ParentElement->GetChildNodes(childElements);

	unsigned int iLength = 0;
	childElements->GetLength(iLength);  
	for (int i = 0;i < iLength;i++)
	{
		CATIDOMElement_var childElement = NULL_var;
		childElements->Item(i,childElement);
		if (childElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			childElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString("Node"))
			{
				count++;
				CATUnicodeString lableName("");
				childElement->GetAttribute("name",lableName);
				ListLableName.Append(lableName);

				CATUnicodeString WBSItem("");
				childElement->GetAttribute("WBSItem",WBSItem);
				ListWBSItem.Append(WBSItem);
			}

		}
	}
}

HRESULT XMLService::ReadSRConfigFromFile(const CATUnicodeString &xmlPath,
									CATLISTV(CATUnicodeString) &ListShapeType,
									CATLISTV(CATUnicodeString) &ListMaterial,
									CATLISTV(CATUnicodeString) &ListGrid,
									CATLISTV(CATUnicodeString) &ListSection,
									CATLISTV(CATUnicodeString) &ListAnchor,
									CATLISTV(CATUnicodeString) &ListAngle,
									CATLISTV(CATUnicodeString) &ListOtherInfo)
{

	CATIDOMDocument_var oDocument = NULL_var;
	CATIXMLDOMDocumentBuilder_var  oBuilder = NULL_var;

	HRESULT rc = XMLService::ReadXml(xmlPath,oDocument,oBuilder);
	if (FAILED(rc)||(oDocument == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return rc;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = oDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return rc;
	}

	CATIDOMNodeList_var childElements = NULL_var;
	rootElement->GetChildNodes(childElements);

	unsigned int iLength = 0;
	childElements->GetLength(iLength);

	for (int i = 0;i < iLength;i++)
	{
		CATIDOMElement_var childElement = NULL_var;
		childElements->Item(i,childElement);
		if (childElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			childElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString("Shape"))
			{
				//获取库节点相关信息
				CATUnicodeString strType("");
				childElement->GetAttribute("Type",strType);
				ListShapeType.Append(strType);

				childElement->GetAttribute("Material",strType);
				ListMaterial.Append(strType);

				childElement->GetAttribute("Grade",strType);
				ListGrid.Append(strType);

				childElement->GetAttribute("Section",strType);
				ListSection.Append(strType);

				childElement->GetAttribute("Anchor",strType);
				ListAnchor.Append(strType);

				childElement->GetAttribute("Angle",strType);
				ListAngle.Append(strType);

				childElement->GetAttribute("OtherInfo",strType);
				ListOtherInfo.Append(strType);
			}
		}
	}

	return S_OK;
}

//------------------------------------------------------------
//从XML中读取信息,第一行为头
//------------------------------------------------------------
BOOL XMLService::ReadXMLInfoFromFile( const CATUnicodeString xmlPath, CATListPV &ListStr)
{
	CATIDOMDocument_var oDocument = NULL_var;
	CATIXMLDOMDocumentBuilder_var  oBuilder = NULL_var;
	HRESULT rc = XMLService::ReadXml(xmlPath,oDocument,oBuilder);
	if (FAILED(rc)||(oDocument == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return FALSE;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = oDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return FALSE;
	}

	CATIDOMNodeList_var childElements = NULL_var;
	rootElement->GetChildNodes(childElements);

	unsigned int iLength = 0;
	childElements->GetLength(iLength);

	//获得第一行信息
	CATLISTV(CATUnicodeString) *LstStrAtrrName = new CATLISTV(CATUnicodeString)() ;
	if (iLength>1)
	{
		CATIDOMElement_var childElement = NULL_var;
		childElements->Item(1,childElement);
		if (childElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			childElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString("HEAD"))
			{
				CATUnicodeString AtrrValue("");
				childElement->GetAttribute("AtrrNum",AtrrValue);
				int iAtrrNum;
				AtrrValue.ConvertToNum(&iAtrrNum);
				for (int i=1;i<=iAtrrNum;i++)
				{
					CATUnicodeString StrColumn;
					StrColumn.BuildFromNum(i);
					CATUnicodeString StrAtrName = "Atrr" + StrColumn;
					childElement->GetAttribute(StrAtrName,AtrrValue);
					LstStrAtrrName->Append(AtrrValue);
				}			
			}
		}
	}
	ListStr.Append(LstStrAtrrName);

	for (int i=1;i<=LstStrAtrrName->Size();i++)
	{
		CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)() ;
		for (int j = 1; j < iLength; j++)
		{
			CATIDOMElement_var childElement = NULL_var;
			childElements->Item(j,childElement);
			if (childElement != NULL_var)
			{
				CATUnicodeString nodeName("");
				childElement->GetNodeName(nodeName);
				if (nodeName == CATUnicodeString("NODE"))
				{
					//获取库节点相关信息
					CATUnicodeString AtrrValue("");
					CATUnicodeString StrAtrrName = (*LstStrAtrrName)[i];
					childElement->GetAttribute(StrAtrrName,AtrrValue);
					LstStrAtrrValue->Append(AtrrValue);
				}
			}
		}
		ListStr.Append(LstStrAtrrValue);
	}

	return TRUE;
}

 
