// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CEProjectApp wrapper class

class CEProjectApp : public COleDispatchDriver
{
public:
	CEProjectApp(){} // Calls COleDispatchDriver default constructor
	CEProjectApp(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CEProjectApp(const CEProjectApp& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _EProjectApp methods
public:
	void NewProject(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void ProjectBeforeTaskDelete(LPDISPATCH tsk, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Cancel);
	}
	void ProjectBeforeResourceDelete(LPDISPATCH res, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Cancel);
	}
	void ProjectBeforeAssignmentDelete(LPDISPATCH asg, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Cancel);
	}
	void ProjectBeforeTaskChange(LPDISPATCH tsk, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Field, &NewVal, Cancel);
	}
	void ProjectBeforeResourceChange(LPDISPATCH res, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Field, &NewVal, Cancel);
	}
	void ProjectBeforeAssignmentChange(LPDISPATCH asg, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Field, &NewVal, Cancel);
	}
	void ProjectBeforeTaskNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeResourceNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeAssignmentNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeClose(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforePrint(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeSave(LPDISPATCH pj, BOOL SaveAsUi, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_PBOOL ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, SaveAsUi, Cancel);
	}
	void ProjectCalculate(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}

	// _EProjectApp properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CEProjectApp2 wrapper class

class CEProjectApp2 : public COleDispatchDriver
{
public:
	CEProjectApp2(){} // Calls COleDispatchDriver default constructor
	CEProjectApp2(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CEProjectApp2(const CEProjectApp2& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _EProjectApp2 methods
public:
	void NewProject(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void ProjectBeforeTaskDelete(LPDISPATCH tsk, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Cancel);
	}
	void ProjectBeforeResourceDelete(LPDISPATCH res, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Cancel);
	}
	void ProjectBeforeAssignmentDelete(LPDISPATCH asg, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Cancel);
	}
	void ProjectBeforeTaskChange(LPDISPATCH tsk, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Field, &NewVal, Cancel);
	}
	void ProjectBeforeResourceChange(LPDISPATCH res, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Field, &NewVal, Cancel);
	}
	void ProjectBeforeAssignmentChange(LPDISPATCH asg, long Field, VARIANT& NewVal, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_PBOOL ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Field, &NewVal, Cancel);
	}
	void ProjectBeforeTaskNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeResourceNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeAssignmentNew(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeClose(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforePrint(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void ProjectBeforeSave(LPDISPATCH pj, BOOL SaveAsUi, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_PBOOL ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, SaveAsUi, Cancel);
	}
	void ProjectCalculate(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void WindowGoalAreaChange(LPDISPATCH Window, long goalArea)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, goalArea);
	}
	void WindowSelectionChange(LPDISPATCH Window, LPDISPATCH sel, VARIANT& selType)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_VARIANT ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, sel, &selType);
	}
	void WindowBeforeViewChange(LPDISPATCH Window, LPDISPATCH prevView, LPDISPATCH newView, BOOL projectHasViewWindow, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_DISPATCH VTS_BOOL VTS_DISPATCH ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, prevView, newView, projectHasViewWindow, Info);
	}
	void WindowViewChange(LPDISPATCH Window, LPDISPATCH prevView, LPDISPATCH newView, BOOL success)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_DISPATCH VTS_BOOL ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, prevView, newView, success);
	}
	void WindowActivate(LPDISPATCH activatedWindow)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms, activatedWindow);
	}
	void WindowDeactivate(LPDISPATCH deactivatedWindow)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms, deactivatedWindow);
	}
	void WindowSidepaneDisplayChange(LPDISPATCH Window, BOOL Close)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, Close);
	}
	void WindowSidepaneTaskChange(LPDISPATCH Window, long ID, BOOL IsGoalArea)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_BOOL ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, ID, IsGoalArea);
	}
	void WorkpaneDisplayChange(BOOL DisplayState)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DisplayState);
	}
	void LoadWebPage(LPDISPATCH Window, BSTR * TargetPage)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBSTR ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, TargetPage);
	}
	void ProjectAfterSave()
	{
		InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ProjectTaskNew(LPDISPATCH pj, long ID)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, ID);
	}
	void ProjectResourceNew(LPDISPATCH pj, long ID)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, ID);
	}
	void ProjectAssignmentNew(LPDISPATCH pj, long ID)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, ID);
	}
	void ProjectBeforeSaveBaseline(LPDISPATCH pj, BOOL Interim, long bl, long InterimCopy, long InterimInto, BOOL AllTasks, BOOL RollupToSummaryTasks, BOOL RollupFromSubtasks, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_DISPATCH ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Interim, bl, InterimCopy, InterimInto, AllTasks, RollupToSummaryTasks, RollupFromSubtasks, Info);
	}
	void ProjectBeforeClearBaseline(LPDISPATCH pj, BOOL Interim, long bl, long InterimFrom, BOOL AllTasks, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_I4 VTS_I4 VTS_BOOL VTS_DISPATCH ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Interim, bl, InterimFrom, AllTasks, Info);
	}
	void ProjectBeforeClose2(LPDISPATCH pj, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x40000002, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Info);
	}
	void ProjectBeforePrint2(LPDISPATCH pj, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x40000004, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Info);
	}
	void ProjectBeforeSave2(LPDISPATCH pj, BOOL SaveAsUi, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_BOOL VTS_DISPATCH ;
		InvokeHelper(0x40000003, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, SaveAsUi, Info);
	}
	void ProjectBeforeTaskDelete2(LPDISPATCH tsk, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x40000006, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Info);
	}
	void ProjectBeforeResourceDelete2(LPDISPATCH res, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x40000007, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Info);
	}
	void ProjectBeforeAssignmentDelete2(LPDISPATCH asg, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x40000008, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Info);
	}
	void ProjectBeforeTaskChange2(LPDISPATCH tsk, long Field, VARIANT& NewVal, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_DISPATCH ;
		InvokeHelper(0x40000009, DISPATCH_METHOD, VT_EMPTY, NULL, parms, tsk, Field, &NewVal, Info);
	}
	void ProjectBeforeResourceChange2(LPDISPATCH res, long Field, VARIANT& NewVal, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_DISPATCH ;
		InvokeHelper(0x4000000a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, res, Field, &NewVal, Info);
	}
	void ProjectBeforeAssignmentChange2(LPDISPATCH asg, long Field, VARIANT& NewVal, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT VTS_DISPATCH ;
		InvokeHelper(0x4000000b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, asg, Field, &NewVal, Info);
	}
	void ProjectBeforeTaskNew2(LPDISPATCH pj, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x4000000c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Info);
	}
	void ProjectBeforeResourceNew2(LPDISPATCH pj, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x4000000d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Info);
	}
	void ProjectBeforeAssignmentNew2(LPDISPATCH pj, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH ;
		InvokeHelper(0x4000000e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Info);
	}
	void ApplicationBeforeClose(LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Info);
	}
	void OnUndoOrRedo(LPCTSTR bstrLabel, LPCTSTR bstrGUID, BOOL fUndo)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrLabel, bstrGUID, fUndo);
	}
	void AfterCubeBuilt(BSTR * CubeFileName)
	{
		static BYTE parms[] = VTS_PBSTR ;
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CubeFileName);
	}
	void LoadWebPane(LPDISPATCH Window, BSTR * TargetPage)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBSTR ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, TargetPage);
	}
	void JobStart(LPCTSTR bstrName, LPCTSTR bstrprojGuid, LPCTSTR bstrjobGuid, long jobType, long lResult)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrName, bstrprojGuid, bstrjobGuid, jobType, lResult);
	}
	void JobCompleted(LPCTSTR bstrName, LPCTSTR bstrprojGuid, LPCTSTR bstrjobGuid, long jobType, long lResult)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrName, bstrprojGuid, bstrjobGuid, jobType, lResult);
	}
	void SaveStartingToServer(LPCTSTR bstrName, LPCTSTR bstrprojGuid)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrName, bstrprojGuid);
	}
	void SaveCompletedToServer(LPCTSTR bstrName, LPCTSTR bstrprojGuid)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrName, bstrprojGuid);
	}
	void ProjectBeforePublish(LPDISPATCH pj, BOOL * Cancel)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_PBOOL ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj, Cancel);
	}
	void PaneActivate()
	{
		InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SecondaryViewChange(LPDISPATCH Window, LPDISPATCH prevView, LPDISPATCH newView, BOOL success)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_DISPATCH VTS_DISPATCH VTS_BOOL ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window, prevView, newView, success);
	}
	void IsFunctionalitySupported(LPCTSTR bstrFunctionality, LPDISPATCH Info)
	{
		static BYTE parms[] = VTS_BSTR VTS_DISPATCH ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bstrFunctionality, Info);
	}
	void ConnectionStatusChanged(BOOL online)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, online);
	}

	// _EProjectApp2 properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CEProjectDoc wrapper class

class CEProjectDoc : public COleDispatchDriver
{
public:
	CEProjectDoc(){} // Calls COleDispatchDriver default constructor
	CEProjectDoc(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CEProjectDoc(const CEProjectDoc& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _EProjectDoc methods
public:
	void Open(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void BeforeClose(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void BeforeSave(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void BeforePrint(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void Calculate(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void Change(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void Activate(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}
	void Deactivate(LPDISPATCH pj)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pj);
	}

	// _EProjectDoc properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CGlobal wrapper class

class CGlobal : public COleDispatchDriver
{
public:
	CGlobal(){} // Calls COleDispatchDriver default constructor
	CGlobal(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CGlobal(const CGlobal& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _Global methods
public:
	LPDISPATCH get_Windows()
	{
		LPDISPATCH result;
		InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CommandBars()
	{
		LPDISPATCH result;
		InvokeHelper(0x13b1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_AnswerWizard()
	{
		LPDISPATCH result;
		InvokeHelper(0x13c0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Projects()
	{
		LPDISPATCH result;
		InvokeHelper(0x1388, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Quit(long SaveChanges)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1390, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SaveChanges);
	}
	CString get_OperatingSystem()
	{
		CString result;
		InvokeHelper(0x13a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT DateSubtract(VARIANT& FinishDate, VARIANT& Duration, VARIANT& Calendar)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &FinishDate, &Duration, &Calendar);
		return result;
	}
	CString DurationFormat(VARIANT& Duration, VARIANT& Units)
	{
		CString result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Duration, &Units);
		return result;
	}
	VARIANT DurationValue(LPCTSTR Duration)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13a3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Duration);
		return result;
	}
	VARIANT DateFormat(VARIANT& Date, VARIANT& Format)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Date, &Format);
		return result;
	}
	void MailLogon(VARIANT& Name, VARIANT& Password, VARIANT& DownloadNewMail)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13aa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name, &Password, &DownloadNewMail);
	}
	void MailLogoff()
	{
		InvokeHelper(0x13ab, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	VARIANT MailSession()
	{
		VARIANT result;
		InvokeHelper(0x13ac, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT MailSystem()
	{
		VARIANT result;
		InvokeHelper(0x13ad, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT TimescaledData(long TaskID, long ResourceID, VARIANT& StartDate, VARIANT& EndDate, long Type, long TimeScaleUnit, VARIANT& Count)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x1324, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, TaskID, ResourceID, &StartDate, &EndDate, Type, TimeScaleUnit, &Count);
		return result;
	}
	CString CustomFieldGetName(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13af, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	void Run(LPCTSTR Name, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13b9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
	}
	CString get_FileFormatID(LPCTSTR Name, VARIANT& UserID, VARIANT& DatabasePassWord)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13bd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, Name, &UserID, &DatabasePassWord);
		return result;
	}
	CString get_FileBuildID(LPCTSTR Name, VARIANT& UserID, VARIANT& DatabasePassWord)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13be, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, Name, &UserID, &DatabasePassWord);
		return result;
	}
	LPDISPATCH get_COMAddIns()
	{
		LPDISPATCH result;
		InvokeHelper(0x13bf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long BoxGetXPosition(long TaskID, VARIANT& ProjectName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x13c1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TaskID, &ProjectName);
		return result;
	}
	long BoxGetYPosition(long TaskID, VARIANT& ProjectName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x13c2, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TaskID, &ProjectName);
		return result;
	}
	CString CustomFieldGetFormula(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	CString CustomFieldValueListGetItem(long FieldID, long Item, long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x13c4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID, Item, Index);
		return result;
	}
	void GoalAreaHighlight(long goalArea)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, goalArea);
	}
	void SetSidepaneStateButton(BOOL DisplayState)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x13c8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DisplayState);
	}
	void GoalAreaTaskHighlight(long TaskID)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TaskID);
	}
	long FieldNameToFieldConstant(LPCTSTR FieldName, long FieldType)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x13ca, DISPATCH_METHOD, VT_I4, (void*)&result, parms, FieldName, FieldType);
		return result;
	}
	CString FieldConstantToFieldName(long Field)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13cb, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Field);
		return result;
	}
	CString GetProjectServerSettings(LPCTSTR RequestXML, VARIANT& Project)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x13d3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, RequestXML, &Project);
		return result;
	}
	void UnloadWebBrowserControl(VARIANT * Window)
	{
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0x13d4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window);
	}
	long GetProjectServerVersion(LPCTSTR ServerURL)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13d8, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ServerURL);
		return result;
	}
	VARIANT UpdateFromProjectServer(LPCTSTR DataFile)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13da, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, DataFile);
		return result;
	}
	long LocaleID()
	{
		long result;
		InvokeHelper(0x13dc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void EnterpriseMakeServerURLTrusted()
	{
		InvokeHelper(0x13dd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL IsURLTrusted(LPCTSTR URL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13de, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, URL);
		return result;
	}
	void PublishNewAndChangedAssignments(BOOL ShowDialog, long ItemsScope, BOOL NotifyResources, VARIANT& NotificationText)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_VARIANT ;
		InvokeHelper(0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyResources, &NotificationText);
	}
	void PublishProjectPlan(BOOL ShowDialog, BOOL PublishFullPlan)
	{
		static BYTE parms[] = VTS_BOOL VTS_BOOL ;
		InvokeHelper(0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, PublishFullPlan);
	}
	void PublishAllInformation()
	{
		InvokeHelper(0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void RequestProgressInformation(BOOL ShowDialog, long ItemsScope, BOOL NotifyTaskLead, VARIANT& NotificationText, VARIANT& ReportingPeriodFrom, VARIANT& ReportingPeriodTo)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyTaskLead, &NotificationText, &ReportingPeriodFrom, &ReportingPeriodTo);
	}
	void RepublishAssignments(BOOL ShowDialog, long ItemsScope, BOOL NotifyResources, BOOL OverwriteActuals, BOOL BecomeManager, VARIANT& NotificationText)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_VARIANT ;
		InvokeHelper(0x1455, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyResources, OverwriteActuals, BecomeManager, &NotificationText);
	}
	long RegisterProject(BOOL WaitForCompletion)
	{
		long result;
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x1456, DISPATCH_METHOD, VT_I4, (void*)&result, parms, WaitForCompletion);
		return result;
	}
	BOOL SaveProjectIfDirty(LPCTSTR AlertText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1457, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, AlertText);
		return result;
	}
	BOOL IsOfficeTaskPaneVisible()
	{
		BOOL result;
		InvokeHelper(0x1459, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void OfficeTaskPaneHide()
	{
		InvokeHelper(0x145a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetCurrentTheme()
	{
		long result;
		InvokeHelper(0x145b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Windows2()
	{
		LPDISPATCH result;
		InvokeHelper(0x145c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL Message(LPCTSTR Message, long Type, VARIANT& YesText, VARIANT& NoText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Message, Type, &YesText, &NoText);
		return result;
	}
	BOOL Alerts(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL FileNew(VARIANT& SummaryInfo, VARIANT& Template, VARIANT& FileNewDialog, VARIANT& FileNewWorkpane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SummaryInfo, &Template, &FileNewDialog, &FileNewWorkpane);
		return result;
	}
	BOOL FileProperties()
	{
		BOOL result;
		InvokeHelper(0x272, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FileOpen(VARIANT& Name, VARIANT& ReadOnly, VARIANT& Merge, VARIANT& TaskInformation, VARIANT& Table, VARIANT& Sheet, VARIANT& NoAuto, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, long openPool, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& XMLName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ReadOnly, &Merge, &TaskInformation, &Table, &Sheet, &NoAuto, &UserID, &DatabasePassWord, &FormatID, &Map, openPool, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &XMLName);
		return result;
	}
	BOOL Zoom()
	{
		BOOL result;
		InvokeHelper(0x132, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomTimescale(VARIANT& Duration, VARIANT& Entire, VARIANT& Selection, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x133, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Duration, &Entire, &Selection, &Reset);
		return result;
	}
	BOOL BoxZoom(VARIANT& Percent, VARIANT& Entire)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x134, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Percent, &Entire);
		return result;
	}
	BOOL FileClose(long Save, VARIANT& NoAuto)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &NoAuto);
		return result;
	}
	BOOL FileCloseAll(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL ResourceSharing(VARIANT& Share, VARIANT& Name, VARIANT& Pool)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Share, &Name, &Pool);
		return result;
	}
	BOOL FileSave()
	{
		BOOL result;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FileSaveAs(VARIANT& Name, long Format, VARIANT& Backup, VARIANT& ReadOnly, VARIANT& TaskInformation, VARIANT& Filtered, VARIANT& Table, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ClearBaseline, VARIANT& ClearActuals, VARIANT& ClearResourceRates, VARIANT& ClearFixedCosts, VARIANT& XMLName, VARIANT& ClearConfirmed)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Format, &Backup, &ReadOnly, &TaskInformation, &Filtered, &Table, &UserID, &DatabasePassWord, &FormatID, &Map, &Password, &WriteResPassword, &ClearBaseline, &ClearActuals, &ClearResourceRates, &ClearFixedCosts, &XMLName, &ClearConfirmed);
		return result;
	}
	BOOL FileSaveWorkspace(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePrint(VARIANT& FromPage, VARIANT& ToPage, VARIANT& PageBreaks, VARIANT& Draft, VARIANT& Copies, VARIANT& FromDate, VARIANT& ToDate, VARIANT& OnePageWide, VARIANT& Preview, VARIANT& Color, VARIANT& ShowIEPrintDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FromPage, &ToPage, &PageBreaks, &Draft, &Copies, &FromDate, &ToDate, &OnePageWide, &Preview, &Color, &ShowIEPrintDialog);
		return result;
	}
	BOOL ReportPrint(VARIANT& Name, VARIANT& FromPage, VARIANT& ToPage, VARIANT& PageBreaks, VARIANT& Draft, VARIANT& Copies, VARIANT& FromDate, VARIANT& ToDate, VARIANT& Preview, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &FromPage, &ToPage, &PageBreaks, &Draft, &Copies, &FromDate, &ToDate, &Preview, &Color);
		return result;
	}
	BOOL FilePrintPreview()
	{
		BOOL result;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ReportPrintPreview(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePrintSetup(VARIANT& Printer)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Printer);
		return result;
	}
	BOOL FilePageSetup(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePageSetupPage(VARIANT& Name, VARIANT& Portrait, VARIANT& PercentScale, VARIANT& PagesTall, VARIANT& PagesWide, long PaperSize, VARIANT& FirstPageNumber)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x933, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Portrait, &PercentScale, &PagesTall, &PagesWide, PaperSize, &FirstPageNumber);
		return result;
	}
	BOOL FilePageSetupMargins(VARIANT& Name, VARIANT& Top, VARIANT& Bottom, VARIANT& Left, VARIANT& Right, VARIANT& Borders)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x934, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Top, &Bottom, &Left, &Right, &Borders);
		return result;
	}
	BOOL FilePageSetupHeader(VARIANT& Name, long Alignment, VARIANT& Text)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x935, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Alignment, &Text);
		return result;
	}
	BOOL FilePageSetupFooter(VARIANT& Name, long Alignment, VARIANT& Text)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x936, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Alignment, &Text);
		return result;
	}
	BOOL FilePageSetupLegend(VARIANT& Name, VARIANT& TextWidth, VARIANT& LegendOn, long Alignment, VARIANT& Text, VARIANT& LabelFontName, VARIANT& LabelFontSize, VARIANT& LabelFontBold, VARIANT& LabelFontItalic, VARIANT& LabelFontUnderline, long LabelFontColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x937, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &TextWidth, &LegendOn, Alignment, &Text, &LabelFontName, &LabelFontSize, &LabelFontBold, &LabelFontItalic, &LabelFontUnderline, LabelFontColor);
		return result;
	}
	BOOL FilePageSetupView(VARIANT& Name, VARIANT& AllSheetColumns, VARIANT& RepeatColumns, VARIANT& PrintNotes, VARIANT& PrintBlankPages, VARIANT& BestPageFitTimescale, VARIANT& PrintColumnTotals, VARIANT& PrintRowTotals)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x938, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &AllSheetColumns, &RepeatColumns, &PrintNotes, &PrintBlankPages, &BestPageFitTimescale, &PrintColumnTotals, &PrintRowTotals);
		return result;
	}
	BOOL FilePageSetupCalendar(VARIANT& Name, VARIANT& MonthsPerPage, VARIANT& WeeksPerPage, VARIANT& ScreenWeekHeight, VARIANT& OnlyDaysInMonth, VARIANT& OnlyWeeksInMonth, VARIANT& MonthPreviews, VARIANT& MonthTitle, VARIANT& AdditionalTasks, VARIANT& GroupAdditionalTasks, VARIANT& PrintNotes)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x939, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &MonthsPerPage, &WeeksPerPage, &ScreenWeekHeight, &OnlyDaysInMonth, &OnlyWeeksInMonth, &MonthPreviews, &MonthTitle, &AdditionalTasks, &GroupAdditionalTasks, &PrintNotes);
		return result;
	}
	BOOL FilePageSetupCalendarText(VARIANT& Name, VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x943, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color);
		return result;
	}
	BOOL MailOpen(VARIANT& Any)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Any);
		return result;
	}
	BOOL MailSend(VARIANT& To, VARIANT& Cc, VARIANT& Subject, VARIANT& Body, VARIANT& Enclosures, VARIANT& IncludeDocument, VARIANT& ReturnReceipt, VARIANT& Bcc, VARIANT& Urgent, VARIANT& SaveCopy, VARIANT& AddRecipient)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x78, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &To, &Cc, &Subject, &Body, &Enclosures, &IncludeDocument, &ReturnReceipt, &Bcc, &Urgent, &SaveCopy, &AddRecipient);
		return result;
	}
	BOOL MailSendScheduleNote(VARIANT& Manager, VARIANT& Resources, VARIANT& TaskContacts, VARIANT& Selection, VARIANT& IncludeDocument, VARIANT& IncludePicture, VARIANT& Body, VARIANT& Subject)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Manager, &Resources, &TaskContacts, &Selection, &IncludeDocument, &IncludePicture, &Body, &Subject);
		return result;
	}
	BOOL MailPostDocument()
	{
		BOOL result;
		InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ODBCManageDataSources()
	{
		BOOL result;
		InvokeHelper(0x84, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ODBCCreateDataSource()
	{
		BOOL result;
		InvokeHelper(0x85, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MailRoutingSlip(VARIANT& To, VARIANT& Subject, VARIANT& Body, VARIANT& AllAtOnce, VARIANT& ReturnWhenDone, VARIANT& TrackStatus, VARIANT& Clear, VARIANT& SendNow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &To, &Subject, &Body, &AllAtOnce, &ReturnWhenDone, &TrackStatus, &Clear, &SendNow);
		return result;
	}
	BOOL FileLoadLast(VARIANT& Number)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Number);
		return result;
	}
	BOOL FileExit(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL MenuBars()
	{
		BOOL result;
		InvokeHelper(0x818, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MenuBarEdit(VARIANT& Copy, VARIANT& Create, VARIANT& Name, VARIANT& NewName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Copy, &Create, &Name, &NewName);
		return result;
	}
	BOOL MenuBarApply(LPCTSTR Name, VARIANT& Default, VARIANT& NoFiles)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &Default, &NoFiles);
		return result;
	}
	BOOL EditUndo()
	{
		BOOL result;
		InvokeHelper(0xc9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCut()
	{
		BOOL result;
		InvokeHelper(0xca, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCopy()
	{
		BOOL result;
		InvokeHelper(0xcb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCopyPicture(VARIANT& Object, VARIANT& ForPrinter, VARIANT& SelectedRows, VARIANT& FromDate, VARIANT& ToDate, VARIANT& FileName, long ScaleOption, VARIANT& MaxImageHeight, VARIANT& MaxImageWidth, VARIANT& MeasurementUnits)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Object, &ForPrinter, &SelectedRows, &FromDate, &ToDate, &FileName, ScaleOption, &MaxImageHeight, &MaxImageWidth, &MeasurementUnits);
		return result;
	}
	BOOL EditPaste()
	{
		BOOL result;
		InvokeHelper(0xce, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditPasteSpecial(VARIANT& Link, VARIANT& Type, VARIANT& DisplayAsIcon)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Link, &Type, &DisplayAsIcon);
		return result;
	}
	BOOL EditClearFormats()
	{
		BOOL result;
		InvokeHelper(0xf0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditClear(VARIANT& Contents, VARIANT& Formats, VARIANT& Notes, VARIANT& Hyperlinks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xcd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Contents, &Formats, &Notes, &Hyperlinks);
		return result;
	}
	BOOL RowClear()
	{
		BOOL result;
		InvokeHelper(0xef, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DDEPasteLink()
	{
		BOOL result;
		InvokeHelper(0xcf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditDelete()
	{
		BOOL result;
		InvokeHelper(0xd0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ColumnDelete()
	{
		BOOL result;
		InvokeHelper(0xe6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RowDelete()
	{
		BOOL result;
		InvokeHelper(0xe7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectVerb(VARIANT& Verb)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Verb);
		return result;
	}
	BOOL ObjectLinks()
	{
		BOOL result;
		InvokeHelper(0xee, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectChangeIcon()
	{
		BOOL result;
		InvokeHelper(0xeb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectConvert()
	{
		BOOL result;
		InvokeHelper(0xec, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditInsert()
	{
		BOOL result;
		InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ColumnInsert()
	{
		BOOL result;
		InvokeHelper(0xe4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RowInsert()
	{
		BOOL result;
		InvokeHelper(0xe5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LinkTasks()
	{
		BOOL result;
		InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LinkTasksEdit(long From, long To, VARIANT& Delete, VARIANT& Type, VARIANT& Lag, VARIANT& PredecessorProjectName, VARIANT& SuccessorProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x804, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, From, To, &Delete, &Type, &Lag, &PredecessorProjectName, &SuccessorProjectName);
		return result;
	}
	BOOL UnlinkTasks()
	{
		BOOL result;
		InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAssignment(VARIANT& Resources, long Operation, VARIANT& With)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Resources, Operation, &With);
		return result;
	}
	BOOL EditGoTo(VARIANT& ID, VARIANT& Date)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xd5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ID, &Date);
		return result;
	}
	BOOL GotoNextOverAllocation()
	{
		BOOL result;
		InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InsertNotes()
	{
		BOOL result;
		InvokeHelper(0x81e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Find(VARIANT& Field, VARIANT& Test, VARIANT& Value, VARIANT& Next, VARIANT& MatchCase, VARIANT& FieldID, VARIANT& TestID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Field, &Test, &Value, &Next, &MatchCase, &FieldID, &TestID);
		return result;
	}
	BOOL Replace(VARIANT& Field, VARIANT& Test, VARIANT& Value, VARIANT& Replacement, VARIANT& ReplaceAll, VARIANT& Next, VARIANT& MatchCase, VARIANT& FieldID, VARIANT& TestID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xf1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Field, &Test, &Value, &Replacement, &ReplaceAll, &Next, &MatchCase, &FieldID, &TestID);
		return result;
	}
	BOOL SelectAll()
	{
		BOOL result;
		InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectInsert()
	{
		BOOL result;
		InvokeHelper(0xdd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SubscribeTo(VARIANT& Edition, long Format)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Edition, Format);
		return result;
	}
	BOOL SubscriberOptions(VARIANT& Name, VARIANT& IsTask, VARIANT& UniqueID, VARIANT& Field, VARIANT& Automatically, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &IsTask, &UniqueID, &Field, &Automatically, &Action);
		return result;
	}
	BOOL CreatePublisher(VARIANT& Edition, VARIANT& Contains)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Edition, &Contains);
		return result;
	}
	BOOL PublisherOptions(VARIANT& Name, VARIANT& View, VARIANT& IsTask, VARIANT& UniqueID, VARIANT& Field, VARIANT& OnSave, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &View, &IsTask, &UniqueID, &Field, &OnSave, &Action);
		return result;
	}
	BOOL EditionStopAll(VARIANT& Stop)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xe0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Stop);
		return result;
	}
	BOOL ClipboardShow()
	{
		BOOL result;
		InvokeHelper(0x2c3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewApply(VARIANT& Name, VARIANT& SinglePane, VARIANT& Toggle)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x12e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &SinglePane, &Toggle);
		return result;
	}
	BOOL ViewEditSingle(VARIANT& Name, VARIANT& Create, VARIANT& NewName, VARIANT& Screen, VARIANT& ShowInMenu, VARIANT& HighlightFilter, VARIANT& Table, VARIANT& Filter, VARIANT& Group)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x12f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &NewName, &Screen, &ShowInMenu, &HighlightFilter, &Table, &Filter, &Group);
		return result;
	}
	BOOL ViewEditCombination(VARIANT& Name, VARIANT& Create, VARIANT& NewName, VARIANT& TopView, VARIANT& BottomView, VARIANT& ShowInMenu)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x130, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &NewName, &TopView, &BottomView, &ShowInMenu);
		return result;
	}
	BOOL TableApply(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x192, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL TableEdit(LPCTSTR Name, BOOL TaskTable, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& NewName, VARIANT& FieldName, VARIANT& NewFieldName, VARIANT& Title, VARIANT& Width, VARIANT& Align, VARIANT& ShowInMenu, VARIANT& LockFirstColumn, VARIANT& DateFormat, VARIANT& RowHeight, VARIANT& ColumnPosition, VARIANT& AlignTitle, VARIANT& HeaderAutoRowHeightAdjustment, VARIANT& HeaderTextWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x193, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, TaskTable, &Create, &OverwriteExisting, &NewName, &FieldName, &NewFieldName, &Title, &Width, &Align, &ShowInMenu, &LockFirstColumn, &DateFormat, &RowHeight, &ColumnPosition, &AlignTitle, &HeaderAutoRowHeightAdjustment, &HeaderTextWrap);
		return result;
	}
	BOOL FilterApply(VARIANT& Name, VARIANT& Highlight, VARIANT& Value1, VARIANT& Value2)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Highlight, &Value1, &Value2);
		return result;
	}
	BOOL FilterEdit(LPCTSTR Name, BOOL TaskFilter, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& Parenthesis, VARIANT& NewName, VARIANT& FieldName, VARIANT& NewFieldName, VARIANT& Test, VARIANT& Value, VARIANT& Operation, VARIANT& ShowInMenu, VARIANT& ShowSummaryTasks)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, TaskFilter, &Create, &OverwriteExisting, &Parenthesis, &NewName, &FieldName, &NewFieldName, &Test, &Value, &Operation, &ShowInMenu, &ShowSummaryTasks);
		return result;
	}
	BOOL ProjectSummaryInfo(VARIANT& Project, VARIANT& Title, VARIANT& Subject, VARIANT& Author, VARIANT& Company, VARIANT& Manager, VARIANT& Keywords, VARIANT& Comments, VARIANT& Start, VARIANT& Finish, VARIANT& ScheduleFrom, VARIANT& CurrentDate, VARIANT& Calendar, VARIANT& StatusDate, VARIANT& Priority, VARIANT& PartiallyDisabled)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x259, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Project, &Title, &Subject, &Author, &Company, &Manager, &Keywords, &Comments, &Start, &Finish, &ScheduleFrom, &CurrentDate, &Calendar, &StatusDate, &Priority, &PartiallyDisabled);
		return result;
	}
	BOOL ProjectStatistics(VARIANT& Project)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x25a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Project);
		return result;
	}
	BOOL OptionsCalendar(VARIANT& StartWeekOnMonday, VARIANT& StartYearIn, VARIANT& StartTime, VARIANT& FinishTime, VARIANT& HoursPerDay, VARIANT& HoursPerWeek, VARIANT& SetDefaults, VARIANT& StartWeekOn, VARIANT& UseFYStartYear, VARIANT& DaysPerMonth)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x289, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &StartWeekOnMonday, &StartYearIn, &StartTime, &FinishTime, &HoursPerDay, &HoursPerWeek, &SetDefaults, &StartWeekOn, &UseFYStartYear, &DaysPerMonth);
		return result;
	}
	BOOL OptionsEdit(VARIANT& MoveAfterReturn, VARIANT& DragAndDrop, VARIANT& UpdateLinks, VARIANT& CopyResourceUsageHeader, VARIANT& PhoneticInfo, VARIANT& PhoneticType, VARIANT& MinuteLabelDisplay, VARIANT& HourLabelDisplay, VARIANT& DayLabelDisplay, VARIANT& WeekLabelDisplay, VARIANT& YearLabelDisplay, VARIANT& SpaceBeforeTimeLabel, VARIANT& SetDefaults, VARIANT& MonthLabelDisplay, VARIANT& SetDefaultsTimeUnits, VARIANT& HyperlinkColor, VARIANT& FollowedHyperlinkColor, VARIANT& UnderlineHyperlinks, VARIANT& SetDefaultsHyperlink, VARIANT& InCellEditing)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x281, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MoveAfterReturn, &DragAndDrop, &UpdateLinks, &CopyResourceUsageHeader, &PhoneticInfo, &PhoneticType, &MinuteLabelDisplay, &HourLabelDisplay, &DayLabelDisplay, &WeekLabelDisplay, &YearLabelDisplay, &SpaceBeforeTimeLabel, &SetDefaults, &MonthLabelDisplay, &SetDefaultsTimeUnits, &HyperlinkColor, &FollowedHyperlinkColor, &UnderlineHyperlinks, &SetDefaultsHyperlink, &InCellEditing);
		return result;
	}
	BOOL OptionsGeneral(VARIANT& PlanningWizard, VARIANT& WizardUsage, VARIANT& WizardErrors, VARIANT& WizardScheduling, VARIANT& ShowTipOfDay, VARIANT& AutoAddResources, VARIANT& StandardRate, VARIANT& OvertimeRate, VARIANT& LastFile, VARIANT& SummaryInfo, VARIANT& UserName, VARIANT& SetDefaults, VARIANT& ShowWelcome, VARIANT& AutoFilter, VARIANT& MacroVirusProtection, VARIANT& DisplayRecentFiles, VARIANT& RecentFilesMaximum, VARIANT& FontConversion, VARIANT& ShowStartupWorkpane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x282, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PlanningWizard, &WizardUsage, &WizardErrors, &WizardScheduling, &ShowTipOfDay, &AutoAddResources, &StandardRate, &OvertimeRate, &LastFile, &SummaryInfo, &UserName, &SetDefaults, &ShowWelcome, &AutoFilter, &MacroVirusProtection, &DisplayRecentFiles, &RecentFilesMaximum, &FontConversion, &ShowStartupWorkpane);
		return result;
	}
	BOOL OptionsSchedule(VARIANT& ScheduleMessages, VARIANT& StartOnCurrentDate, VARIANT& AutoLink, VARIANT& AutoSplit, VARIANT& CriticalSlack, VARIANT& TaskType, VARIANT& DurationUnits, VARIANT& WorkUnits, VARIANT& AutoTrack, VARIANT& SetDefaults, VARIANT& AssignmentUnits, VARIANT& EffortDriven, VARIANT& HonorConstraints, VARIANT& ShowEstimated, VARIANT& NewTasksEstimated)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x284, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ScheduleMessages, &StartOnCurrentDate, &AutoLink, &AutoSplit, &CriticalSlack, &TaskType, &DurationUnits, &WorkUnits, &AutoTrack, &SetDefaults, &AssignmentUnits, &EffortDriven, &HonorConstraints, &ShowEstimated, &NewTasksEstimated);
		return result;
	}
	BOOL OptionsView(VARIANT& DefaultView, VARIANT& DateFormat, VARIANT& ProjectSummary, VARIANT& DisplayStatusBar, VARIANT& DisplayEntryBar, VARIANT& DisplayScrollBars, VARIANT& CurrencySymbol, VARIANT& SymbolPlacement, VARIANT& CurrencyDigits, VARIANT& ProjectCurrency, VARIANT& DisplayOutlineNumber, VARIANT& DisplayOutlineSymbols, VARIANT& DisplayNameIndent, VARIANT& DisplaySummaryTasks, VARIANT& DisplayOLEIndicator, VARIANT& DisplayExternalSuccessors, VARIANT& DisplayExternalPredecessors, VARIANT& CrossProjectLinksInfo, VARIANT& AcceptNewExternalData, VARIANT& DisplayWindowsInTaskbar)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x286, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultView, &DateFormat, &ProjectSummary, &DisplayStatusBar, &DisplayEntryBar, &DisplayScrollBars, &CurrencySymbol, &SymbolPlacement, &CurrencyDigits, &ProjectCurrency, &DisplayOutlineNumber, &DisplayOutlineSymbols, &DisplayNameIndent, &DisplaySummaryTasks, &DisplayOLEIndicator, &DisplayExternalSuccessors, &DisplayExternalPredecessors, &CrossProjectLinksInfo, &AcceptNewExternalData, &DisplayWindowsInTaskbar);
		return result;
	}
	BOOL OptionsWorkgroup(VARIANT& WorkgroupMessages, VARIANT& ServerURL, VARIANT& ServerPath, VARIANT& ReceiveNotifications, VARIANT& SendHyperlinkNote, VARIANT& HyperlinkColor, VARIANT& FollowedHyperlinkColor, VARIANT& UnderlineHyperlinks, VARIANT& SetDefaults, VARIANT& ServerIdentification, VARIANT& AllowTaskDelegation, VARIANT& UpdateProjectToWeb, VARIANT& PublishInformationOnSave, VARIANT& SetDefaultsMessaging, VARIANT& SetDefaultsWebServer, VARIANT& ManagerEmail, VARIANT& ConfirmationDialog, VARIANT& ChangesMarkAssnDirty)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &WorkgroupMessages, &ServerURL, &ServerPath, &ReceiveNotifications, &SendHyperlinkNote, &HyperlinkColor, &FollowedHyperlinkColor, &UnderlineHyperlinks, &SetDefaults, &ServerIdentification, &AllowTaskDelegation, &UpdateProjectToWeb, &PublishInformationOnSave, &SetDefaultsMessaging, &SetDefaultsWebServer, &ManagerEmail, &ConfirmationDialog, &ChangesMarkAssnDirty);
		return result;
	}
	BOOL OptionsCalculation(VARIANT& Automatic, VARIANT& AutoTrack, VARIANT& SpreadPercentToStatusDate, VARIANT& SpreadCostsToStatusDate, VARIANT& AutoCalcCosts, VARIANT& FixedCostAccrual, VARIANT& CalcMultipleCriticalPaths, VARIANT& CriticalSlack, VARIANT& SetDefaults, VARIANT& CalcInsProjLikeSummTask, VARIANT& MoveCompleted, VARIANT& AndMoveRemaining, VARIANT& MoveRemaining, VARIANT& AndMoveCompleted, VARIANT& EVMethod, VARIANT& EVBaseline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Automatic, &AutoTrack, &SpreadPercentToStatusDate, &SpreadCostsToStatusDate, &AutoCalcCosts, &FixedCostAccrual, &CalcMultipleCriticalPaths, &CriticalSlack, &SetDefaults, &CalcInsProjLikeSummTask, &MoveCompleted, &AndMoveRemaining, &MoveRemaining, &AndMoveCompleted, &EVMethod, &EVBaseline);
		return result;
	}
	BOOL CalculateAll()
	{
		BOOL result;
		InvokeHelper(0x25f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsPreferences()
	{
		BOOL result;
		InvokeHelper(0x25b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ChangeWorkingTime(VARIANT& CalendarName, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x271, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CalendarName, &Locked);
		return result;
	}
	BOOL BaseCalendars(VARIANT& Index, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Index, &Locked);
		return result;
	}
	BOOL BaseCalendarCreate(LPCTSTR Name, VARIANT& FromName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x26a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &FromName);
		return result;
	}
	BOOL BaseCalendarRename(LPCTSTR FromName, LPCTSTR ToName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x270, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FromName, ToName);
		return result;
	}
	BOOL BaseCalendarDelete(LPCTSTR Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x26b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name);
		return result;
	}
	BOOL BaseCalendarEditDays(LPCTSTR Name, VARIANT& StartDate, VARIANT& EndDate, VARIANT& WeekDay, VARIANT& Working, VARIANT& From1, VARIANT& To1, VARIANT& From2, VARIANT& To2, VARIANT& From3, VARIANT& To3, VARIANT& Default, VARIANT& From4, VARIANT& To4, VARIANT& From5, VARIANT& To5)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x267, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &StartDate, &EndDate, &WeekDay, &Working, &From1, &To1, &From2, &To2, &From3, &To3, &Default, &From4, &To4, &From5, &To5);
		return result;
	}
	BOOL ResourceCalendarEditDays(LPCTSTR ProjectName, LPCTSTR ResourceName, VARIANT& StartDate, VARIANT& EndDate, VARIANT& WeekDay, VARIANT& Working, VARIANT& Default, VARIANT& From1, VARIANT& To1, VARIANT& From2, VARIANT& To2, VARIANT& From3, VARIANT& To3, VARIANT& From4, VARIANT& To4, VARIANT& From5, VARIANT& To5)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x26c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ProjectName, ResourceName, &StartDate, &EndDate, &WeekDay, &Working, &Default, &From1, &To1, &From2, &To2, &From3, &To3, &From4, &To4, &From5, &To5);
		return result;
	}
	BOOL BaseCalendarReset(LPCTSTR Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x269, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name);
		return result;
	}
	BOOL ResourceCalendarReset(LPCTSTR ProjectName, LPCTSTR ResourceName, VARIANT& BaseCalendar)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ProjectName, ResourceName, &BaseCalendar);
		return result;
	}
	BOOL ResourceCalendars(VARIANT& Index, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Index, &Locked);
		return result;
	}
	BOOL LevelingOptions(VARIANT& Automatic, VARIANT& DelayInSlack, VARIANT& AutoClearLeveling, VARIANT& Order, VARIANT& LevelEntireProject, VARIANT& FromDate, VARIANT& ToDate, VARIANT& PeriodBasis, VARIANT& LevelIndividualAssignments, VARIANT& LevelingCanSplit, VARIANT& LevelProposedBookings)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x260, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Automatic, &DelayInSlack, &AutoClearLeveling, &Order, &LevelEntireProject, &FromDate, &ToDate, &PeriodBasis, &LevelIndividualAssignments, &LevelingCanSplit, &LevelProposedBookings);
		return result;
	}
	BOOL LevelNow(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x261, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL BaselineSave(VARIANT& All, VARIANT& Copy, VARIANT& Into, VARIANT& RollupToSummaryTasks, VARIANT& RollupFromSubtasks, VARIANT& SetDefaults)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x262, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &Copy, &Into, &RollupToSummaryTasks, &RollupFromSubtasks, &SetDefaults);
		return result;
	}
	BOOL UpdateProject(VARIANT& All, VARIANT& UpdateDate, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x263, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &UpdateDate, &Action);
		return result;
	}
	BOOL UpdateTasks(VARIANT& PercentComplete, VARIANT& ActualDuration, VARIANT& RemainingDuration, VARIANT& ActualStart, VARIANT& ActualFinish, VARIANT& Notes)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PercentComplete, &ActualDuration, &RemainingDuration, &ActualStart, &ActualFinish, &Notes);
		return result;
	}
	BOOL WindowNewWindow(VARIANT& Projects, VARIANT& View, VARIANT& AllProjects, VARIANT& ShowDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2bd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Projects, &View, &AllProjects, &ShowDialog);
		return result;
	}
	BOOL WindowArrangeAll()
	{
		BOOL result;
		InvokeHelper(0x2be, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowHide(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2bf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL WindowUnhide(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2c0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL WindowActivate(VARIANT& WindowName, VARIANT& DialogID, VARIANT& TopPane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2c1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &WindowName, &DialogID, &TopPane);
		return result;
	}
	BOOL PageBreakSet()
	{
		BOOL result;
		InvokeHelper(0x3a6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PageBreakRemove()
	{
		BOOL result;
		InvokeHelper(0x3a7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PageBreaksRemoveAll()
	{
		BOOL result;
		InvokeHelper(0x3a8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowResourcesPredecessors()
	{
		BOOL result;
		InvokeHelper(0x393, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowResourcesSuccessors()
	{
		BOOL result;
		InvokeHelper(0x394, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPredecessorsSuccessors()
	{
		BOOL result;
		InvokeHelper(0x395, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowNotes()
	{
		BOOL result;
		InvokeHelper(0x397, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowObjects()
	{
		BOOL result;
		InvokeHelper(0x398, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowOverallocation()
	{
		BOOL result;
		InvokeHelper(0x39d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPercentAllocation()
	{
		BOOL result;
		InvokeHelper(0x39e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowWork()
	{
		BOOL result;
		InvokeHelper(0x39a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCost()
	{
		BOOL result;
		InvokeHelper(0x399, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowSchedule()
	{
		BOOL result;
		InvokeHelper(0x396, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPeakUnits()
	{
		BOOL result;
		InvokeHelper(0x39b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowAvailability()
	{
		BOOL result;
		InvokeHelper(0x39f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowRemainingAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCumulativeWork()
	{
		BOOL result;
		InvokeHelper(0x39c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCumulativeCost()
	{
		BOOL result;
		InvokeHelper(0x3a0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneNext()
	{
		BOOL result;
		InvokeHelper(0x7d2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneCreate()
	{
		BOOL result;
		InvokeHelper(0x7d3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormViewShow()
	{
		BOOL result;
		InvokeHelper(0x81a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneClose()
	{
		BOOL result;
		InvokeHelper(0x7d4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowSplit()
	{
		BOOL result;
		InvokeHelper(0x819, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowNext(VARIANT& NoWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7d5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NoWrap);
		return result;
	}
	BOOL WindowPrev(VARIANT& NoWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7d6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NoWrap);
		return result;
	}
	BOOL DocClose()
	{
		BOOL result;
		InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMaximize()
	{
		BOOL result;
		InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMinimize()
	{
		BOOL result;
		InvokeHelper(0x7d9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMove(VARIANT& XPosition, VARIANT& YPosition, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &XPosition, &YPosition, &Points);
		return result;
	}
	BOOL AppRestore()
	{
		BOOL result;
		InvokeHelper(0x7db, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppSize(VARIANT& Width, VARIANT& Height, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7dc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Width, &Height, &Points);
		return result;
	}
	BOOL DocMaximize()
	{
		BOOL result;
		InvokeHelper(0x7dd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocMove(VARIANT& XPosition, VARIANT& YPosition, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7df, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &XPosition, &YPosition, &Points);
		return result;
	}
	BOOL DocRestore()
	{
		BOOL result;
		InvokeHelper(0x7e0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocSize(VARIANT& Width, VARIANT& Height, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7e1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Width, &Height, &Points);
		return result;
	}
	BOOL OutlineOutdent(VARIANT& Levels)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Levels);
		return result;
	}
	BOOL OutlineShowTasks(long OutlineNumber, VARIANT& ExpandInsertedProjects)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, OutlineNumber, &ExpandInsertedProjects);
		return result;
	}
	BOOL OutlineIndent(VARIANT& Levels)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7e3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Levels);
		return result;
	}
	BOOL OutlineHideSubTasks()
	{
		BOOL result;
		InvokeHelper(0x7e4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OutlineShowSubTasks()
	{
		BOOL result;
		InvokeHelper(0x7e5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OutlineShowAllTasks()
	{
		BOOL result;
		InvokeHelper(0x7e6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SelectBeginning(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectEnd(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectRowStart(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectRowEnd(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectCellLeft(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellRight(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x800, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellUp(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x801, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellDown(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x802, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectionExtend(VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x803, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend, &Add);
		return result;
	}
	BOOL ColumnBestFit(VARIANT& Column)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column);
		return result;
	}
	BOOL ColumnEdit(VARIANT& Column)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column);
		return result;
	}
	BOOL SelectRange(long Row, short Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectTimescaleRange(long Row, LPCTSTR StartTime, short Width, long Height)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_I2 VTS_I4 ;
		InvokeHelper(0x3ba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, StartTime, Width, Height);
		return result;
	}
	BOOL SelectTaskField(long Row, LPCTSTR Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectResourceField(long Row, LPCTSTR Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x810, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectRow(VARIANT& Row, VARIANT& RowRelative, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7fd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &RowRelative, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7fe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectTaskColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x811, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectResourceColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x812, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectTaskCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x814, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectResourceCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x815, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x816, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectSheet()
	{
		BOOL result;
		InvokeHelper(0x813, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DDEInitiate(LPCTSTR App, LPCTSTR Topic)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x4b1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, App, Topic);
		return result;
	}
	BOOL DDEExecute(LPCTSTR Command, VARIANT& TimeOut)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x4b2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Command, &TimeOut);
		return result;
	}
	BOOL DDETerminate()
	{
		BOOL result;
		InvokeHelper(0x4b3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InformationDialog(VARIANT& Tab)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xd9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Tab);
		return result;
	}
	BOOL Form(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3ec, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL CustomForms()
	{
		BOOL result;
		InvokeHelper(0x3eb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Tables()
	{
		BOOL result;
		InvokeHelper(0x191, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Filters()
	{
		BOOL result;
		InvokeHelper(0x1f5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Macro(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3e9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FillDown(VARIANT& Down)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xda, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Down);
		return result;
	}
	BOOL Views()
	{
		BOOL result;
		InvokeHelper(0x12d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalculateProject()
	{
		BOOL result;
		InvokeHelper(0x7f2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LevelingClear(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x264, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL SpellingCheck()
	{
		BOOL result;
		InvokeHelper(0x265, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsSpelling(VARIANT& TaskName, VARIANT& TaskNotes, VARIANT& TaskText1, VARIANT& TaskText2, VARIANT& TaskText3, VARIANT& TaskText4, VARIANT& TaskText5, VARIANT& TaskText6, VARIANT& TaskText7, VARIANT& TaskText8, VARIANT& TaskText9, VARIANT& TaskText10, VARIANT& ResourceCode, VARIANT& ResourceName, VARIANT& ResourceNotes, VARIANT& ResourceGroup, VARIANT& ResourceText1, VARIANT& ResourceText2, VARIANT& ResourceText3, VARIANT& ResourceText4, VARIANT& ResourceText5, VARIANT& AssignNotes, VARIANT& IgnoreUppercase, VARIANT& IgnoreNumberWords, VARIANT& AlwaysSuggest, VARIANT& UseCustomDictionary)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x266, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskName, &TaskNotes, &TaskText1, &TaskText2, &TaskText3, &TaskText4, &TaskText5, &TaskText6, &TaskText7, &TaskText8, &TaskText9, &TaskText10, &ResourceCode, &ResourceName, &ResourceNotes, &ResourceGroup, &ResourceText1, &ResourceText2, &ResourceText3, &ResourceText4, &ResourceText5, &AssignNotes, &IgnoreUppercase, &IgnoreNumberWords, &AlwaysSuggest, &UseCustomDictionary);
		return result;
	}
	BOOL WindowMoreWindows()
	{
		BOOL result;
		InvokeHelper(0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpContents()
	{
		BOOL result;
		InvokeHelper(0x324, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpSearch()
	{
		BOOL result;
		InvokeHelper(0x328, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpOnlineIndex()
	{
		BOOL result;
		InvokeHelper(0x329, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpAbout()
	{
		BOOL result;
		InvokeHelper(0x326, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpLaunch(VARIANT& FileName, VARIANT& ContextNumber, VARIANT& Search, VARIANT& SearchKey)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x32a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName, &ContextNumber, &Search, &SearchKey);
		return result;
	}
	BOOL HelpCueCards(VARIANT& FileName, VARIANT& ContextNumber)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x32d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName, &ContextNumber);
		return result;
	}
	BOOL HelpTopics()
	{
		BOOL result;
		InvokeHelper(0x32f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpAnswerWizard()
	{
		BOOL result;
		InvokeHelper(0x330, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpMSProjectFundamentals()
	{
		BOOL result;
		InvokeHelper(0x331, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AutoCorrect()
	{
		BOOL result;
		InvokeHelper(0x273, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpQuickPreview()
	{
		BOOL result;
		InvokeHelper(0x32b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpTechnicalSupport()
	{
		BOOL result;
		InvokeHelper(0x32c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpCreateYourProject()
	{
		BOOL result;
		InvokeHelper(0x946, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpContextHelp()
	{
		BOOL result;
		InvokeHelper(0x32e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TextStyles(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x385, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color);
		return result;
	}
	BOOL DetailStylesFormat(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& CellColor, VARIANT& Pattern, VARIANT& ShowInMenu)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color, &CellColor, &Pattern, &ShowInMenu);
		return result;
	}
	BOOL DetailStylesAdd(long Item, VARIANT& Position)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x3c3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Position);
		return result;
	}
	BOOL DetailStylesRemove(long Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL DetailStylesRemoveAll()
	{
		BOOL result;
		InvokeHelper(0x3c5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Font(VARIANT& Name, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3a9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Size, &Bold, &Italic, &Underline, &Color, &Reset);
		return result;
	}
	BOOL Timescale()
	{
		BOOL result;
		InvokeHelper(0x3ae, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TimescaleEdit(VARIANT& MajorUnits, VARIANT& MinorUnits, VARIANT& MajorLabel, VARIANT& MinorLabel, VARIANT& MajorAlign, VARIANT& MinorAlign, VARIANT& MajorCount, VARIANT& MinorCount, VARIANT& MajorTicks, VARIANT& MinorTicks, VARIANT& Enlarge, VARIANT& Separator, VARIANT& MajorUseFY, VARIANT& MinorUseFY, VARIANT& TopUnits, VARIANT& TopLabel, VARIANT& TopAlign, VARIANT& TopCount, VARIANT& TopTicks, VARIANT& TopUseFY, VARIANT& TierCount)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x386, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MajorUnits, &MinorUnits, &MajorLabel, &MinorLabel, &MajorAlign, &MinorAlign, &MajorCount, &MinorCount, &MajorTicks, &MinorTicks, &Enlarge, &Separator, &MajorUseFY, &MinorUseFY, &TopUnits, &TopLabel, &TopAlign, &TopCount, &TopTicks, &TopUseFY, &TierCount);
		return result;
	}
	BOOL Sort(VARIANT& Key1, VARIANT& Ascending1, VARIANT& Key2, VARIANT& Ascending2, VARIANT& Key3, VARIANT& Ascending3, VARIANT& Renumber, VARIANT& Outline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x387, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Key1, &Ascending1, &Key2, &Ascending2, &Key3, &Ascending3, &Renumber, &Outline);
		return result;
	}
	BOOL BarBoxStyles()
	{
		BOOL result;
		InvokeHelper(0x388, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttBarFormat(VARIANT& TaskID, VARIANT& GanttStyle, VARIANT& StartShape, VARIANT& StartType, VARIANT& StartColor, VARIANT& MiddleShape, VARIANT& MiddlePattern, VARIANT& MiddleColor, VARIANT& EndShape, VARIANT& EndType, VARIANT& EndColor, VARIANT& LeftText, VARIANT& RightText, VARIANT& TopText, VARIANT& BottomText, VARIANT& InsideText, VARIANT& Reset, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3aa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskID, &GanttStyle, &StartShape, &StartType, &StartColor, &MiddleShape, &MiddlePattern, &MiddleColor, &EndShape, &EndType, &EndColor, &LeftText, &RightText, &TopText, &BottomText, &InsideText, &Reset, &ProjectName);
		return result;
	}
	BOOL TimescaleNonWorking(VARIANT& Draw, VARIANT& Calendar, VARIANT& Color, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x392, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Draw, &Calendar, &Color, &Pattern);
		return result;
	}
	BOOL BoxShowHideFields(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x389, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL Layout()
	{
		BOOL result;
		InvokeHelper(0x3ad, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PERTLayout(VARIANT& Straight, VARIANT& DisplayArrows, VARIANT& AdjustForPageBreaks, VARIANT& DisplayPageBreaks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x38a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Straight, &DisplayArrows, &AdjustForPageBreaks, &DisplayPageBreaks);
		return result;
	}
	BOOL LayoutNow()
	{
		BOOL result;
		InvokeHelper(0x38b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PERTBorders(VARIANT& CriticalStyle, VARIANT& CriticalColor, VARIANT& NoncriticalStyle, VARIANT& NoncriticalColor, VARIANT& CriticalMilestoneStyle, VARIANT& CriticalMilestoneColor, VARIANT& NoncriticalMilestoneStyle, VARIANT& NoncriticalMilestoneColor, VARIANT& CriticalSummaryStyle, VARIANT& CriticalSummaryColor, VARIANT& NoncriticalSummaryStyle, VARIANT& NoncriticalSummaryColor, VARIANT& CriticalSubprojectStyle, VARIANT& CriticalSubprojectColor, VARIANT& NoncriticalSubprojectStyle, VARIANT& NoncriticalSubprojectColor, VARIANT& CriticalMarkedStyle, VARIANT& CriticalMarkedColor, VARIANT& NoncriticalMarkedStyle, VARIANT& NoncriticalMarkedColor, VARIANT& CriticalExternalTaskStyle, VARIANT& CriticalExternalTaskColor, VARIANT& NoncriticalExternalTaskStyle, VARIANT& NoncriticalExternalTaskColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x38c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CriticalStyle, &CriticalColor, &NoncriticalStyle, &NoncriticalColor, &CriticalMilestoneStyle, &CriticalMilestoneColor, &NoncriticalMilestoneStyle, &NoncriticalMilestoneColor, &CriticalSummaryStyle, &CriticalSummaryColor, &NoncriticalSummaryStyle, &NoncriticalSummaryColor, &CriticalSubprojectStyle, &CriticalSubprojectColor, &NoncriticalSubprojectStyle, &NoncriticalSubprojectColor, &CriticalMarkedStyle, &CriticalMarkedColor, &NoncriticalMarkedStyle, &NoncriticalMarkedColor, &CriticalExternalTaskStyle, &CriticalExternalTaskColor, &NoncriticalExternalTaskStyle, &NoncriticalExternalTaskColor);
		return result;
	}
	BOOL Gridlines()
	{
		BOOL result;
		InvokeHelper(0x390, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GridlinesEdit(long Item, VARIANT& NormalType, VARIANT& NormalColor, VARIANT& Interval, VARIANT& IntervalType, VARIANT& IntervalColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &NormalType, &NormalColor, &Interval, &IntervalType, &IntervalColor);
		return result;
	}
	BOOL ViewShowSelectedTasks(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL PageBreaksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL FindNext()
	{
		BOOL result;
		InvokeHelper(0x7f0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FindPrevious()
	{
		BOOL result;
		InvokeHelper(0x7f1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomOut()
	{
		BOOL result;
		InvokeHelper(0x7f3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomIn()
	{
		BOOL result;
		InvokeHelper(0x7f4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetField(LPCTSTR Field, LPCTSTR Value, VARIANT& Create)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &Create);
		return result;
	}
	BOOL SetTaskField(LPCTSTR Field, LPCTSTR Value, VARIANT& AllSelectedTasks, VARIANT& Create, VARIANT& TaskID, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &AllSelectedTasks, &Create, &TaskID, &ProjectName);
		return result;
	}
	BOOL SetResourceField(LPCTSTR Field, LPCTSTR Value, VARIANT& AllSelectedResources, VARIANT& Create, VARIANT& ResourceID, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &AllSelectedResources, &Create, &ResourceID, &ProjectName);
		return result;
	}
	BOOL SetActiveCell(LPCTSTR Value, VARIANT& Create)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Value, &Create);
		return result;
	}
	VARIANT CheckField(LPCTSTR Field, LPCTSTR Value, VARIANT& Test, VARIANT& Op, VARIANT& Field2, VARIANT& Value2, VARIANT& Test2)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Field, Value, &Test, &Op, &Field2, &Value2, &Test2);
		return result;
	}
	BOOL SetMatchingField(LPCTSTR Field, LPCTSTR Value, LPCTSTR CheckField, LPCTSTR CheckValue, VARIANT& CheckTest, VARIANT& CheckOperation, VARIANT& CheckField2, VARIANT& CheckValue2, VARIANT& CheckTest2)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, CheckField, CheckValue, &CheckTest, &CheckOperation, &CheckField2, &CheckValue2, &CheckTest2);
		return result;
	}
	BOOL AppExecute(VARIANT& Window, VARIANT& Command, VARIANT& Minimize, VARIANT& Activate)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Window, &Command, &Minimize, &Activate);
		return result;
	}
	BOOL AppLaunch(LPCTSTR Application, VARIANT& Document, VARIANT& Activate)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Application, &Document, &Activate);
		return result;
	}
	BOOL DDELinksUpdate()
	{
		BOOL result;
		InvokeHelper(0x805, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GotoTaskDates()
	{
		BOOL result;
		InvokeHelper(0x806, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttBarLinks(long Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x817, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Display);
		return result;
	}
	BOOL GanttShowDrawings(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x81f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL BarRounding(VARIANT& On)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x820, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &On);
		return result;
	}
	BOOL GanttRollup(VARIANT& AlwaysRollup, VARIANT& HideWhenSummaryExpanded)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x847, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AlwaysRollup, &HideWhenSummaryExpanded);
		return result;
	}
	BOOL GanttBarTextDateFormat(long DateFormat)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x821, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DateFormat);
		return result;
	}
	BOOL GanttBarSize(long Size)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x80a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Size);
		return result;
	}
	BOOL GanttBarStyleDelete(LPCTSTR Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x80b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL GanttBarStyleEdit(LPCTSTR Item, VARIANT& Create, VARIANT& Name, VARIANT& StartShape, VARIANT& StartType, VARIANT& StartColor, VARIANT& MiddleShape, VARIANT& MiddleColor, VARIANT& MiddlePattern, VARIANT& EndShape, VARIANT& EndType, VARIANT& EndColor, VARIANT& ShowFor, VARIANT& Row, VARIANT& From, VARIANT& To, VARIANT& BottomText, VARIANT& TopText, VARIANT& LeftText, VARIANT& RightText, VARIANT& InsideText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Create, &Name, &StartShape, &StartType, &StartColor, &MiddleShape, &MiddleColor, &MiddlePattern, &EndShape, &EndType, &EndColor, &ShowFor, &Row, &From, &To, &BottomText, &TopText, &LeftText, &RightText, &InsideText);
		return result;
	}
	BOOL PERTBoxStyles(VARIANT& Size, VARIANT& DateFormat, VARIANT& Gridlines, VARIANT& CrossMarks, VARIANT& Field1, VARIANT& Field2, VARIANT& Field3, VARIANT& Field4, VARIANT& Field5)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x808, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Size, &DateFormat, &Gridlines, &CrossMarks, &Field1, &Field2, &Field3, &Field4, &Field5);
		return result;
	}
	BOOL PERTSetTask(VARIANT& Create, VARIANT& Move, VARIANT& TaskID, VARIANT& XPosition, VARIANT& YPosition)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x807, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Create, &Move, &TaskID, &XPosition, &YPosition);
		return result;
	}
	BOOL ResourceGraphBarStyles(VARIANT& TopLeftShowAs, VARIANT& TopLeftColor, VARIANT& TopLeftPattern, VARIANT& BottomLeftShowAs, VARIANT& BottomLeftColor, VARIANT& BottomLeftPattern, VARIANT& TopRightShowAs, VARIANT& TopRightColor, VARIANT& TopRightPattern, VARIANT& BottomRightShowAs, VARIANT& BottomRightColor, VARIANT& BottomRightPattern, VARIANT& ShowValues, VARIANT& ShowAvailabilityLine, VARIANT& PercentBarOverlap, VARIANT& ProposedLeftShowAs, VARIANT& ProposedLeftColor, VARIANT& ProposedLeftPattern, VARIANT& ProposedRightShowAs, VARIANT& ProposedRightColor, VARIANT& ProposedRightPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x809, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TopLeftShowAs, &TopLeftColor, &TopLeftPattern, &BottomLeftShowAs, &BottomLeftColor, &BottomLeftPattern, &TopRightShowAs, &TopRightColor, &TopRightPattern, &BottomRightShowAs, &BottomRightColor, &BottomRightPattern, &ShowValues, &ShowAvailabilityLine, &PercentBarOverlap, &ProposedLeftShowAs, &ProposedLeftColor, &ProposedLeftPattern, &ProposedRightShowAs, &ProposedRightColor, &ProposedRightPattern);
		return result;
	}
	BOOL ConsolidateProjects(VARIANT& Filenames, VARIANT& NewWindow, VARIANT& AttachToSources, VARIANT& PoolResources, VARIANT& HideSubtasks, long openPool, VARIANT& UserID, VARIANT& Password)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Filenames, &NewWindow, &AttachToSources, &PoolResources, &HideSubtasks, openPool, &UserID, &Password);
		return result;
	}
	BOOL Organizer(long Type, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Type, &Task);
		return result;
	}
	BOOL OrganizerMoveItem(VARIANT& Type, VARIANT& FileName, VARIANT& ToFileName, VARIANT& Name, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &ToFileName, &Name, &Task);
		return result;
	}
	BOOL OrganizerDeleteItem(VARIANT& Type, VARIANT& FileName, VARIANT& Name, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &Name, &Task);
		return result;
	}
	BOOL OrganizerRenameItem(VARIANT& Type, VARIANT& FileName, VARIANT& Name, VARIANT& NewName, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x82, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &Name, &NewName, &Task);
		return result;
	}
	BOOL RecurringTaskInsert()
	{
		BOOL result;
		InvokeHelper(0x8ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalendarTimescale()
	{
		BOOL result;
		InvokeHelper(0x929, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalendarDateBoxes(VARIANT& TopLeft, VARIANT& TopRight, VARIANT& BottomLeft, VARIANT& BottomRight, VARIANT& TopColor, VARIANT& BottomColor, VARIANT& TopPattern, VARIANT& BottomPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x924, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TopLeft, &TopRight, &BottomLeft, &BottomRight, &TopColor, &BottomColor, &TopPattern, &BottomPattern);
		return result;
	}
	BOOL CalendarWeekHeadings(VARIANT& MonthTitle, VARIANT& WeekTitle, VARIANT& DayTitle, VARIANT& ShowPreview, VARIANT& DaysPerWeek)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x925, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MonthTitle, &WeekTitle, &DayTitle, &ShowPreview, &DaysPerWeek);
		return result;
	}
	BOOL CalendarDateShadingEdit(long Item, VARIANT& Pattern, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x927, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Pattern, &Color);
		return result;
	}
	BOOL CalendarDateShading(VARIANT& BaseCalendarName, VARIANT& ResourceUniqueID, VARIANT& ProjectIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x928, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BaseCalendarName, &ResourceUniqueID, &ProjectIndex);
		return result;
	}
	BOOL ZoomCalendar(VARIANT& NumWeeks, VARIANT& StartDate, VARIANT& EndDate)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumWeeks, &StartDate, &EndDate);
		return result;
	}
	BOOL CalendarLayout(VARIANT& SortOrder, VARIANT& AutoLayout)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SortOrder, &AutoLayout);
		return result;
	}
	BOOL CalendarBarStyles(VARIANT& BarRounding)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x916, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BarRounding);
		return result;
	}
	BOOL CalendarBarStylesEdit(long Item, VARIANT& Bar, VARIANT& Pattern, VARIANT& Color, VARIANT& Align, VARIANT& Wrap, VARIANT& Shadow, VARIANT& Field1, VARIANT& Field2, VARIANT& Field3, VARIANT& Field4, VARIANT& Field5, VARIANT& SplitPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x923, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Bar, &Pattern, &Color, &Align, &Wrap, &Shadow, &Field1, &Field2, &Field3, &Field4, &Field5, &SplitPattern);
		return result;
	}
	BOOL CalendarBestFitWeekHeight()
	{
		BOOL result;
		InvokeHelper(0x917, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingCreate(long Type, VARIANT& Behind)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x902, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Type, &Behind);
		return result;
	}
	BOOL DrawingMove(VARIANT& Forward, VARIANT& Full)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x907, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Forward, &Full);
		return result;
	}
	BOOL DrawingReshape()
	{
		BOOL result;
		InvokeHelper(0x90a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingProperties(VARIANT& SizePositionTab)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x903, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SizePositionTab);
		return result;
	}
	BOOL DrawingCycleColor()
	{
		BOOL result;
		InvokeHelper(0x90b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatCopy()
	{
		BOOL result;
		InvokeHelper(0x908, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatPaste()
	{
		BOOL result;
		InvokeHelper(0x909, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatPainter()
	{
		BOOL result;
		InvokeHelper(0x91d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Toolbars(VARIANT& Action, VARIANT& ToolbarName, VARIANT& NewToolbarName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x904, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Action, &ToolbarName, &NewToolbarName);
		return result;
	}
	BOOL ToolbarInsertTool(LPCTSTR ToolbarName, short ButtonIndex, VARIANT& Command, VARIANT& FaceIndex, VARIANT& Description, VARIANT& ToolTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex, &Command, &FaceIndex, &Description, &ToolTip);
		return result;
	}
	BOOL ToolbarDeleteTool(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x92d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL ToolbarsCustomize()
	{
		BOOL result;
		InvokeHelper(0x905, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ToolbarCustomizeTool(VARIANT& ToolbarName, VARIANT& ButtonIndex, VARIANT& Command, VARIANT& FaceIndex, VARIANT& Description, VARIANT& ToolTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x90c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ToolbarName, &ButtonIndex, &Command, &FaceIndex, &Description, &ToolTip);
		return result;
	}
	BOOL ToolbarCopyToolFace(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x90e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL ToolbarPasteToolFace(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x90f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL FontBold(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x910, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL FontItalic(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x911, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL FontUnderLine(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x914, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL ColumnAlignment(long Align)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x915, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Align);
		return result;
	}
	BOOL Reports()
	{
		BOOL result;
		InvokeHelper(0x91e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TipOfTheDay()
	{
		BOOL result;
		InvokeHelper(0x91f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FindFile()
	{
		BOOL result;
		InvokeHelper(0x922, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MailUpdateProject(LPCTSTR DataFile)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x944, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DataFile);
		return result;
	}
	BOOL MailSendProjectMail(VARIANT& MessageType, VARIANT& Subject, VARIANT& Body, VARIANT& Fields, VARIANT& UpdateAsOf, VARIANT& ShowDialog, VARIANT& InstallationMessage, VARIANT& UpdateFrom, VARIANT& PublishScope)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MessageType, &Subject, &Body, &Fields, &UpdateAsOf, &ShowDialog, &InstallationMessage, &UpdateFrom, &PublishScope);
		return result;
	}
	BOOL WebInbox()
	{
		BOOL result;
		InvokeHelper(0x949, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttChartWizard()
	{
		BOOL result;
		InvokeHelper(0x9c4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingToolbarShow()
	{
		BOOL result;
		InvokeHelper(0x930, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ReminderSet(VARIANT& Start, VARIANT& LeadTime)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Start, &LeadTime);
		return result;
	}
	BOOL SchedulePlusReminderSet(VARIANT& Start, VARIANT& LeadTime)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x931, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Start, &LeadTime);
		return result;
	}
	BOOL CalendarTaskList(VARIANT& Date)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x932, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Date);
		return result;
	}
	BOOL OutlineSymbolsToggle(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x822, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL ResourceSharingPoolAction(long Action, VARIANT& FileName, VARIANT& ReadOnly)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x823, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Action, &FileName, &ReadOnly);
		return result;
	}
	BOOL ResourceActiveDirectory()
	{
		BOOL result;
		InvokeHelper(0x898, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAddressBook()
	{
		BOOL result;
		InvokeHelper(0x843, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceDetails(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x844, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL MailProjectMailCustomize(VARIANT& Action, VARIANT& Position, VARIANT& FieldID, VARIANT& Title, VARIANT& IncludeInTeamStatus, VARIANT& Editable, VARIANT& UseAssignmentField)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x945, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Action, &Position, &FieldID, &Title, &IncludeInTeamStatus, &Editable, &UseAssignmentField);
		return result;
	}
	BOOL FileQuit(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x947, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL About()
	{
		BOOL result;
		InvokeHelper(0x948, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DetailStylesProperties(VARIANT& AlignCellData, VARIANT& RepeatRowLabel, VARIANT& ShortLabels, VARIANT& DisplayDetailsColumn)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3b8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AlignCellData, &RepeatRowLabel, &ShortLabels, &DisplayDetailsColumn);
		return result;
	}
	BOOL DetailStylesToggleItem(long Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL AutoFilter()
	{
		BOOL result;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewBar()
	{
		BOOL result;
		InvokeHelper(0x3c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroShowVba()
	{
		BOOL result;
		InvokeHelper(0x8c5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroShowCode()
	{
		BOOL result;
		InvokeHelper(0x8c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebGoBack()
	{
		BOOL result;
		InvokeHelper(0x514, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebGoForward()
	{
		BOOL result;
		InvokeHelper(0x515, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebStopLoading()
	{
		BOOL result;
		InvokeHelper(0x516, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebRefresh()
	{
		BOOL result;
		InvokeHelper(0x517, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebOpenStartPage()
	{
		BOOL result;
		InvokeHelper(0x518, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebOpenSearchPage()
	{
		BOOL result;
		InvokeHelper(0x519, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebHideToolbars(VARIANT& Hide)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x51a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Hide);
		return result;
	}
	BOOL FollowHyperlink(VARIANT& Address, VARIANT& SubAddress, VARIANT& AddHistory, VARIANT& NewWindow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address, &SubAddress, &AddHistory, &NewWindow);
		return result;
	}
	BOOL EditPasteAsHyperlink()
	{
		BOOL result;
		InvokeHelper(0x51c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InsertHyperlink(VARIANT& Name, VARIANT& Address, VARIANT& SubAddress, VARIANT& ScreenTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Address, &SubAddress, &ScreenTip);
		return result;
	}
	BOOL EditHyperlink(VARIANT& Name, VARIANT& Address, VARIANT& SubAddress, VARIANT& ScreenTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Address, &SubAddress, &ScreenTip);
		return result;
	}
	BOOL WebOpenHyperlink(VARIANT& Address, VARIANT& SubAddress, VARIANT& AddHistory, VARIANT& NewWindow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address, &SubAddress, &AddHistory, &NewWindow);
		return result;
	}
	BOOL WebCopyHyperlink()
	{
		BOOL result;
		InvokeHelper(0x521, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebAddToFavorites(VARIANT& CurrentLink)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x522, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CurrentLink);
		return result;
	}
	BOOL EditClearHyperlink()
	{
		BOOL result;
		InvokeHelper(0x524, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebSetStartPage(VARIANT& Address)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x525, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address);
		return result;
	}
	BOOL WebSetSearchPage(VARIANT& Address)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x526, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address);
		return result;
	}
	BOOL WebOpenFavorites()
	{
		BOOL result;
		InvokeHelper(0x528, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebToolbar(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x529, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL SplitTask(VARIANT& Lock)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3f3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Lock);
		return result;
	}
	BOOL CustomFieldRename(long FieldID, VARIANT& NewName, VARIANT& Phonetic)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &NewName, &Phonetic);
		return result;
	}
	BOOL CustomizeField()
	{
		BOOL result;
		InvokeHelper(0x94b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttShowBarSplits(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x94d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL CalendarShowBarSplits(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x94e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL MapEdit(VARIANT& Name, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& NewName, VARIANT& DataCategory, VARIANT& CategoryEnabled, VARIANT& TableName, VARIANT& FieldName, VARIANT& ExternalFieldName, VARIANT& ExportFilter, VARIANT& ImportMethod, VARIANT& MergeKey, VARIANT& HeaderRow, VARIANT& AssignmentData, VARIANT& TextDelimiter, VARIANT& TextFileOrigin, VARIANT& UseHtmlTemplate, VARIANT& TemplateFile, VARIANT& IncludeImage, VARIANT& ImageFile)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xf3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &OverwriteExisting, &NewName, &DataCategory, &CategoryEnabled, &TableName, &FieldName, &ExternalFieldName, &ExportFilter, &ImportMethod, &MergeKey, &HeaderRow, &AssignmentData, &TextDelimiter, &TextFileOrigin, &UseHtmlTemplate, &TemplateFile, &IncludeImage, &ImageFile);
		return result;
	}
	BOOL FillAcross(VARIANT& Right)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Right);
		return result;
	}
	BOOL LinksBetweenProjects(VARIANT& AcceptAll)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AcceptAll);
		return result;
	}
	BOOL ToggleAssignments()
	{
		BOOL result;
		InvokeHelper(0xf6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ProgressLines()
	{
		BOOL result;
		InvokeHelper(0xf7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceSharingPoolUpdate(VARIANT& allSharers)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &allSharers);
		return result;
	}
	BOOL ResourceSharingPoolRefresh()
	{
		BOOL result;
		InvokeHelper(0xf9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebHelp(VARIANT& Type)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xfb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type);
		return result;
	}
	BOOL AddProgressLine()
	{
		BOOL result;
		InvokeHelper(0xfc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CustomizeIMEMode(long FieldID, long IMEMode)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xfe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, IMEMode);
		return result;
	}
	BOOL DeleteFromDatabase(VARIANT& Name, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x87, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &UserID, &DatabasePassWord, &FormatID);
		return result;
	}
	BOOL WBSCodeRenumber(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x275, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL WBSCodeMaskEdit(VARIANT& CodePrefix, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& CodeGenerate, VARIANT& VerifyUniqueness)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x276, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CodePrefix, &Level, Sequence, &Length, &Separator, &CodeGenerate, &VerifyUniqueness);
		return result;
	}
	BOOL CustomOutlineCodeEdit(long FieldID, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& OnlyLookUpTableCodes, VARIANT& OnlyCompleteCodes, VARIANT& LookupTableLink, VARIANT& OnlyLeaves, VARIANT& MatchGeneric, VARIANT& RequiredCode)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x277, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, Sequence, &Length, &Separator, &OnlyLookUpTableCodes, &OnlyCompleteCodes, &LookupTableLink, &OnlyLeaves, &MatchGeneric, &RequiredCode);
		return result;
	}
	BOOL OptionsSave(VARIANT& DefaultSaveFormat, VARIANT& DefaultProjectsPath, VARIANT& DefaultUserTemplatesPath, VARIANT& DefaultWorkgroupTemplatesPath, VARIANT& ExpandDatabaseTimephasedData, VARIANT& AutomaticSave, VARIANT& AutomaticSaveInterval, VARIANT& AutomaticSaveOptions, VARIANT& AutomaticSavePrompt, VARIANT& SetDefaultsDatabase)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x28a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultSaveFormat, &DefaultProjectsPath, &DefaultUserTemplatesPath, &DefaultWorkgroupTemplatesPath, &ExpandDatabaseTimephasedData, &AutomaticSave, &AutomaticSaveInterval, &AutomaticSaveOptions, &AutomaticSavePrompt, &SetDefaultsDatabase);
		return result;
	}
	BOOL OfficeOnTheWeb()
	{
		BOOL result;
		InvokeHelper(0x52a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FixMe()
	{
		BOOL result;
		InvokeHelper(0x52b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowWorkAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowUnitAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BaselineClear(VARIANT& All, VARIANT& From)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x950, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &From);
		return result;
	}
	BOOL Groups()
	{
		BOOL result;
		InvokeHelper(0x1ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GroupApply(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x200, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL GroupBy()
	{
		BOOL result;
		InvokeHelper(0x201, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LookUpTableAdd(long FieldID, VARIANT& Level, VARIANT& Code, VARIANT& Description)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x27b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, &Code, &Description);
		return result;
	}
	BOOL BoxStylesEdit(long Style, VARIANT& DataTemplate, VARIANT& HorizontalGridlines, VARIANT& VerticalGridlines, long BorderShape, long BorderColor, VARIANT& BorderWidth, long BackgroundColor, long BackgroundPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 ;
		InvokeHelper(0x953, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Style, &DataTemplate, &HorizontalGridlines, &VerticalGridlines, BorderShape, BorderColor, &BorderWidth, BackgroundColor, BackgroundPattern);
		return result;
	}
	BOOL BoxFormat(VARIANT& ProjectName, VARIANT& TaskID, VARIANT& DataTemplate, VARIANT& HorizontalGridlines, VARIANT& VerticalGridlines, long BorderShape, long BorderColor, VARIANT& BorderWidth, long BackgroundColor, long BackgroundPattern, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x954, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectName, &TaskID, &DataTemplate, &HorizontalGridlines, &VerticalGridlines, BorderShape, BorderColor, &BorderWidth, BackgroundColor, BackgroundPattern, &Reset);
		return result;
	}
	BOOL BarBoxFormat()
	{
		BOOL result;
		InvokeHelper(0x955, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CreateWebAccount(VARIANT& ServerURL, VARIANT& Name, long AuthenticationType, long AccountType, VARIANT& ShowDialog, VARIANT& Email, VARIANT& WindowsAccount)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x956, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL, &Name, AuthenticationType, AccountType, &ShowDialog, &Email, &WindowsAccount);
		return result;
	}
	BOOL BoxDataTemplate(LPCTSTR Name, long Action, VARIANT& NewName, VARIANT& Overwrite)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x957, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, Action, &NewName, &Overwrite);
		return result;
	}
	BOOL BoxCellLayout(LPCTSTR Name, VARIANT& CellRows, VARIANT& CellColumns, VARIANT& CellWidth, VARIANT& MergeCells)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x958, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &CellRows, &CellColumns, &CellWidth, &MergeCells);
		return result;
	}
	BOOL BoxCellEdit(LPCTSTR Name, long Cell, long FieldName, VARIANT& Font, VARIANT& FontSize, long FontColor, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, long HorizontalAlignment, long VerticalAlignment, VARIANT& TextLineLimit, VARIANT& ShowLabel, VARIANT& Label, long DateFormat)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x959, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, Cell, FieldName, &Font, &FontSize, FontColor, &Bold, &Italic, &Underline, HorizontalAlignment, VerticalAlignment, &TextLineLimit, &ShowLabel, &Label, DateFormat);
		return result;
	}
	BOOL ResourceWindowsAccount(VARIANT& Name, VARIANT& ShowDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x95a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ShowDialog);
		return result;
	}
	BOOL SetRowHeight(VARIANT& Unit, VARIANT& Rows, VARIANT& UseUniqueID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x846, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Unit, &Rows, &UseUniqueID);
		return result;
	}
	BOOL ComAddInsDialog()
	{
		BOOL result;
		InvokeHelper(0x95b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroSecurity()
	{
		BOOL result;
		InvokeHelper(0x95c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LayoutSelectionNow()
	{
		BOOL result;
		InvokeHelper(0x95f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BoxAlign(long Alignment)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Alignment);
		return result;
	}
	BOOL ConvertHangulToHanja()
	{
		BOOL result;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL UpdateProjectToWeb(VARIANT& ServerURL, VARIANT& EmbedProjectFile, VARIANT& OnlyRegisterProject, VARIANT& WaitForCompletion)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8c7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL, &EmbedProjectFile, &OnlyRegisterProject, &WaitForCompletion);
		return result;
	}
	BOOL CustomFieldProperties(long FieldID, long Attribute, long SummaryCalc, VARIANT& GraphicalIndicators, VARIANT& Required)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Attribute, SummaryCalc, &GraphicalIndicators, &Required);
		return result;
	}
	BOOL CustomFieldSetFormula(long FieldID, VARIANT& Formula)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Formula);
		return result;
	}
	BOOL CustomFieldIndicatorAdd(long FieldID, long Test, LPCTSTR Value, long IndicatorID, long CriteriaList, VARIANT& Index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Test, Value, IndicatorID, CriteriaList, &Index);
		return result;
	}
	BOOL CustomFieldIndicators(long FieldID, VARIANT& SummaryInheritsNonsummary, VARIANT& ProjectInheritsSummary, VARIANT& ShowToolTips)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &SummaryInheritsNonsummary, &ProjectInheritsSummary, &ShowToolTips);
		return result;
	}
	BOOL CustomFieldIndicatorDelete(long FieldID, short Index, long CriteriaList)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_I4 ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Index, CriteriaList);
		return result;
	}
	BOOL CustomFieldValueList(long FieldID, VARIANT& ListDefault, VARIANT& DefaultValue, VARIANT& RestrictToList, VARIANT& AppendNew, VARIANT& PromptOnNew, long DisplayOrder)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &ListDefault, &DefaultValue, &RestrictToList, &AppendNew, &PromptOnNew, DisplayOrder);
		return result;
	}
	BOOL CustomFieldValueListAdd(long FieldID, VARIANT& Value, VARIANT& Description, VARIANT& Phonetic, VARIANT& Index, VARIANT& FieldDefault)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Value, &Description, &Phonetic, &Index, &FieldDefault);
		return result;
	}
	BOOL CustomFieldValueListDelete(long FieldID, short Index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Index);
		return result;
	}
	BOOL BoxLayout(long LayoutMode, long LayoutScheme, VARIANT& SummaryPrecedence, long RowAlignment, long ColumnAlignment, VARIANT& RowSpacing, VARIANT& ColumnSpacing, long RowHeight, long ColumnWidth, VARIANT& AdjustForPageBreaks, VARIANT& ShowSummaryTasks, long ViewBackgroundColor, long ViewBackgroundPattern, VARIANT& ShowProgressMarks, VARIANT& ShowPageBreaks, VARIANT& ShowIDOnly)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LayoutMode, LayoutScheme, &SummaryPrecedence, RowAlignment, ColumnAlignment, &RowSpacing, &ColumnSpacing, RowHeight, ColumnWidth, &AdjustForPageBreaks, &ShowSummaryTasks, ViewBackgroundColor, ViewBackgroundPattern, &ShowProgressMarks, &ShowPageBreaks, &ShowIDOnly);
		return result;
	}
	BOOL BoxLinks(long Style, VARIANT& ShowArrows, VARIANT& ShowLabels, long ColorMode, long CriticalColor, long NoncriticalColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Style, &ShowArrows, &ShowLabels, ColorMode, CriticalColor, NoncriticalColor);
		return result;
	}
	BOOL SummaryTasksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxProgressMarksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxLinkLabelsShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxLinkStyleToggle(VARIANT& StraightLinks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &StraightLinks);
		return result;
	}
	BOOL LayoutRelatedNow()
	{
		BOOL result;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BoxSet(long Action, VARIANT& TaskID, VARIANT& XPosition, VARIANT& YPosition, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Action, &TaskID, &XPosition, &YPosition, &ProjectName);
		return result;
	}
	BOOL SetSplitBar(VARIANT& ShowColumns)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowColumns);
		return result;
	}
	BOOL SetTitleRowHeight(VARIANT& TitleHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x848, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TitleHeight);
		return result;
	}
	BOOL GoalAreaChange(short goalArea)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, goalArea);
		return result;
	}
	BOOL SidepaneToggle(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL SearchFiles()
	{
		BOOL result;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ImportOutlookTasks()
	{
		BOOL result;
		InvokeHelper(0x849, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsInterface(VARIANT& ShowResourceAssignmentIndicators, VARIANT& ShowEditToStartFinishDates, VARIANT& ShowEditsToWorkUnitsDurationIndicators, VARIANT& ShowDeletionInNameColumn, VARIANT& DisplayProjectGuide, VARIANT& ProjectGuideUseDefaultFunctionalLayoutPage, VARIANT& ProjectGuideFunctionalLayoutPage, VARIANT& ProjectGuideUseDefaultContent, VARIANT& ProjectGuideContent, VARIANT& SetAsDefaults)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x28b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceAssignmentIndicators, &ShowEditToStartFinishDates, &ShowEditsToWorkUnitsDurationIndicators, &ShowDeletionInNameColumn, &DisplayProjectGuide, &ProjectGuideUseDefaultFunctionalLayoutPage, &ProjectGuideFunctionalLayoutPage, &ProjectGuideUseDefaultContent, &ProjectGuideContent, &SetAsDefaults);
		return result;
	}
	BOOL SidepaneTaskChange(short ID, VARIANT& IsGoalArea)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_VARIANT ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ID, &IsGoalArea);
		return result;
	}
	BOOL ImportResourceList(VARIANT& ServerURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x84a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL);
		return result;
	}
	BOOL EnterpriseResSubstitutionWizard(VARIANT& ProjectList, long PoolOption, VARIANT& RBSorResourceList, VARIANT& FreezeHorizonDate, VARIANT& UpdateProjects, VARIANT& SaveReport, VARIANT& Path, VARIANT& AssignProposedResources, VARIANT& LevelProposedBookings)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x84b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectList, PoolOption, &RBSorResourceList, &FreezeHorizonDate, &UpdateProjects, &SaveReport, &Path, &AssignProposedResources, &LevelProposedBookings);
		return result;
	}
	BOOL EnterpriseResourcesOpen(VARIANT& EUID, long OpenType)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x828, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &EUID, OpenType);
		return result;
	}
	BOOL EnterpriseResourcesImport(VARIANT& LocalRUIDs)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x82a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUIDs);
		return result;
	}
	BOOL EnterpriseResourceGet(VARIANT& EUID, VARIANT& RUID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x82e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &EUID, &RUID);
		return result;
	}
	BOOL EnterpriseProjectImportWizard(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8c8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL EnterpriseTeamBuilder()
	{
		BOOL result;
		InvokeHelper(0x84c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseCustomOutlineCodeShare(long LinkFrom, VARIANT& LinkTo)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x920, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LinkFrom, &LinkTo);
		return result;
	}
	BOOL EnterpriseCustomizeFields()
	{
		BOOL result;
		InvokeHelper(0x84d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseGlobalCheckOut()
	{
		BOOL result;
		InvokeHelper(0x921, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseProjectProfiles()
	{
		BOOL result;
		InvokeHelper(0x90d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAssignmentDialog(VARIANT& ShowResourceListOptions, long ResourceListFields, VARIANT& UseNamedFilter, VARIANT& FilterName, VARIANT& UseAvailableToWorkFilter, VARIANT& AvailableToWork)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3af, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceListOptions, ResourceListFields, &UseNamedFilter, &FilterName, &UseAvailableToWorkFilter, &AvailableToWork);
		return result;
	}
	BOOL LoadWebBrowserControl(LPCTSTR TargetPage, VARIANT& WrapperPage)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage);
		return result;
	}
	BOOL FileSaveOffline(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x88, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL HelpReference()
	{
		BOOL result;
		InvokeHelper(0x84f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpWhatsNew()
	{
		BOOL result;
		InvokeHelper(0x851, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StopWebBrowserControlNavigation()
	{
		BOOL result;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseGlobalBackup(VARIANT& BackupFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BackupFileName);
		return result;
	}
	BOOL EnterpriseGlobalRestore(VARIANT& ProfileName, VARIANT& RestoreFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProfileName, &RestoreFileName);
		return result;
	}
	BOOL SpellCheckField(long FieldName, VARIANT& EnableSpellCheck)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x8cc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldName, &EnableSpellCheck);
		return result;
	}
	BOOL AddResourcesFromProjectServer()
	{
		BOOL result;
		InvokeHelper(0x852, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResetTrackingMethod()
	{
		BOOL result;
		InvokeHelper(0x8cd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ServiceOptionsDialog()
	{
		BOOL result;
		InvokeHelper(0x942, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseProjectDelete(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x850, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL CheckIn(VARIANT& fSaveChanges, VARIANT& Comments, VARIANT& fMakePublic)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x913, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &fSaveChanges, &Comments, &fMakePublic);
		return result;
	}
	BOOL CheckOut()
	{
		BOOL result;
		InvokeHelper(0x91c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocumentLibraryVersionsDialog()
	{
		BOOL result;
		InvokeHelper(0x926, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DisplaySharedWorkspace()
	{
		BOOL result;
		InvokeHelper(0x93b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseSynchActuals(VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8ce, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectName);
		return result;
	}
	BOOL OptionsSecurity(VARIANT& RemoveFileProperties)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x28c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &RemoveFileProperties);
		return result;
	}
	BOOL SaveSheetSelection()
	{
		BOOL result;
		InvokeHelper(0x82f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RestoreSheetSelection()
	{
		BOOL result;
		InvokeHelper(0x830, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CustomFieldDelete(long Field)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x854, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field);
		return result;
	}
	BOOL ImportCommitment(VARIANT& CommitmentDate, VARIANT& CommitmentGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x832, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CommitmentDate, &CommitmentGuid);
		return result;
	}
	BOOL SummaryResourceAssignmentsRefresh()
	{
		BOOL result;
		InvokeHelper(0x833, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditEnterpriseCalendar(VARIANT& UniqueID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x856, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &UniqueID);
		return result;
	}
	BOOL CreateEnterpriseCalendar()
	{
		BOOL result;
		InvokeHelper(0x857, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LoadWebPaneControl(LPCTSTR TargetPage, VARIANT& WrapperPage)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage);
		return result;
	}
	BOOL ResourceMappingDialog()
	{
		BOOL result;
		InvokeHelper(0x8cf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MakeLocalCalendarEnterprise(VARIANT& OldName, VARIANT& NewName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x941, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &OldName, &NewName);
		return result;
	}
	BOOL CustomFieldMappingDialog(VARIANT& TaskCustomFields)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8d0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskCustomFields);
		return result;
	}
	BOOL CheckTaskErrors(VARIANT& TaskID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8d1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskID);
		return result;
	}
	BOOL CheckResourceErrors(VARIANT& LocalRUID, VARIANT& ResetImport, VARIANT& CheckEnterprise)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUID, &ResetImport, &CheckEnterprise);
		return result;
	}
	BOOL EditRedo()
	{
		BOOL result;
		InvokeHelper(0xc8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Publish(VARIANT& Republish, VARIANT& WssUrl)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Republish, &WssUrl);
		return result;
	}
	BOOL MakeFieldEnterprise(VARIANT& FieldID, VARIANT& FieldName, VARIANT& LookupTableName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FieldID, &FieldName, &LookupTableName);
		return result;
	}
	BOOL SaveForSharing(VARIANT& FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x855, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName);
		return result;
	}
	BOOL CacheSettings()
	{
		BOOL result;
		InvokeHelper(0x8e4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CleanupCache()
	{
		BOOL result;
		InvokeHelper(0x8e5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CacheStatus()
	{
		BOOL result;
		InvokeHelper(0x8ea, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WorkOffline(VARIANT& fOffline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8eb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &fOffline);
		return result;
	}
	BOOL TaskDrivers()
	{
		BOOL result;
		InvokeHelper(0x8e7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ToggleChangeHighlighting()
	{
		BOOL result;
		InvokeHelper(0x858, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL VisualReports(long PjVisualReportsTab)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x859, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PjVisualReportsTab);
		return result;
	}
	BOOL VisualReportsSaveDatabase(VARIANT& strNamePath, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strNamePath, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsSaveCube(VARIANT& strNamePath, long PjVisualReportsCubeType, VARIANT& ReportAllFields, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strNamePath, PjVisualReportsCubeType, &ReportAllFields, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsNewTemplate(long PjVisualReportsTemplateType, long PjVisualReportsCubeType, VARIANT& ReportAllFields, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PjVisualReportsTemplateType, PjVisualReportsCubeType, &ReportAllFields, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsView(VARIANT& strVisualReportTemplateFile, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strVisualReportTemplateFile, PjVisualReportsDataLevel);
		return result;
	}
	BOOL CommitmentsPane()
	{
		BOOL result;
		InvokeHelper(0x8e8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DependenciesPane()
	{
		BOOL result;
		InvokeHelper(0x8e9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL VisualReportsEdit(VARIANT& strVisualReportTemplateFile, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strVisualReportTemplateFile, PjVisualReportsDataLevel);
		return result;
	}
	BOOL FileOpenEx(VARIANT& Name, VARIANT& ReadOnly, VARIANT& Merge, VARIANT& TaskInformation, VARIANT& Table, VARIANT& Sheet, VARIANT& NoAuto, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, long openPool, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& XMLName, VARIANT& DoNotLoadFromEnterprise)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ReadOnly, &Merge, &TaskInformation, &Table, &Sheet, &NoAuto, &UserID, &DatabasePassWord, &FormatID, &Map, openPool, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &XMLName, &DoNotLoadFromEnterprise);
		return result;
	}
	BOOL FileCloseEx(long Save, VARIANT& NoAuto, VARIANT& CheckIn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &NoAuto, &CheckIn);
		return result;
	}
	BOOL FileCloseAllEx(long Save, VARIANT& CheckIn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x8d4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &CheckIn);
		return result;
	}
	BOOL OptionsGeneralEx(VARIANT& PlanningWizard, VARIANT& WizardUsage, VARIANT& WizardErrors, VARIANT& WizardScheduling, VARIANT& ShowTipOfDay, VARIANT& AutoAddResources, VARIANT& StandardRate, VARIANT& OvertimeRate, VARIANT& LastFile, VARIANT& SummaryInfo, VARIANT& UserName, VARIANT& SetDefaults, VARIANT& ShowWelcome, VARIANT& AutoFilter, VARIANT& MacroVirusProtection, VARIANT& DisplayRecentFiles, VARIANT& RecentFilesMaximum, VARIANT& FontConversion, VARIANT& ShowStartupWorkpane, VARIANT& MaxUndoRecords)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PlanningWizard, &WizardUsage, &WizardErrors, &WizardScheduling, &ShowTipOfDay, &AutoAddResources, &StandardRate, &OvertimeRate, &LastFile, &SummaryInfo, &UserName, &SetDefaults, &ShowWelcome, &AutoFilter, &MacroVirusProtection, &DisplayRecentFiles, &RecentFilesMaximum, &FontConversion, &ShowStartupWorkpane, &MaxUndoRecords);
		return result;
	}
	BOOL OptionsViewEx(VARIANT& DefaultView, VARIANT& DateFormat, VARIANT& ProjectSummary, VARIANT& DisplayStatusBar, VARIANT& DisplayEntryBar, VARIANT& DisplayScrollBars, VARIANT& CurrencySymbol, VARIANT& SymbolPlacement, VARIANT& CurrencyDigits, VARIANT& ProjectCurrency, VARIANT& DisplayOutlineNumber, VARIANT& DisplayOutlineSymbols, VARIANT& DisplayNameIndent, VARIANT& DisplaySummaryTasks, VARIANT& DisplayOLEIndicator, VARIANT& DisplayExternalSuccessors, VARIANT& DisplayExternalPredecessors, VARIANT& CrossProjectLinksInfo, VARIANT& AcceptNewExternalData, VARIANT& DisplayWindowsInTaskbar, VARIANT& DisplayScreentips, VARIANT& CalendarType, VARIANT& Use3DLook)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultView, &DateFormat, &ProjectSummary, &DisplayStatusBar, &DisplayEntryBar, &DisplayScrollBars, &CurrencySymbol, &SymbolPlacement, &CurrencyDigits, &ProjectCurrency, &DisplayOutlineNumber, &DisplayOutlineSymbols, &DisplayNameIndent, &DisplaySummaryTasks, &DisplayOLEIndicator, &DisplayExternalSuccessors, &DisplayExternalPredecessors, &CrossProjectLinksInfo, &AcceptNewExternalData, &DisplayWindowsInTaskbar, &DisplayScreentips, &CalendarType, &Use3DLook);
		return result;
	}
	BOOL ChangeWorkingTimeEx(VARIANT& CalendarName, VARIANT& Locked, VARIANT& SelectedDate, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8de, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CalendarName, &Locked, &SelectedDate, &ProjectName);
		return result;
	}
	BOOL TextStylesEx(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& CellColor, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color, &CellColor, &Pattern);
		return result;
	}
	BOOL FontEx(VARIANT& Name, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& Reset, VARIANT& CellColor, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Size, &Bold, &Italic, &Underline, &Color, &Reset, &CellColor, &Pattern);
		return result;
	}
	BOOL CalendarWeekHeadingsEx(VARIANT& MonthTitle, VARIANT& WeekTitle, VARIANT& DayTitle, VARIANT& ShowPreview, VARIANT& DaysPerWeek, VARIANT& ShowTitleBeginningEndDates)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8dd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MonthTitle, &WeekTitle, &DayTitle, &ShowPreview, &DaysPerWeek, &ShowTitleBeginningEndDates);
		return result;
	}
	BOOL CustomOutlineCodeEditEx(long FieldID, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& OnlyLookUpTableCodes, VARIANT& OnlyCompleteCodes, VARIANT& LookupTableLink, VARIANT& OnlyLeaves, VARIANT& MatchGeneric, VARIANT& RequiredCode, VARIANT& LookupDefault, VARIANT& DefaultValue, VARIANT& SortOrder)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, Sequence, &Length, &Separator, &OnlyLookUpTableCodes, &OnlyCompleteCodes, &LookupTableLink, &OnlyLeaves, &MatchGeneric, &RequiredCode, &LookupDefault, &DefaultValue, &SortOrder);
		return result;
	}
	BOOL LookUpTableAddEx(long FieldID, VARIANT& Level, VARIANT& Code, VARIANT& Description, VARIANT& Phonetic)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, &Code, &Description, &Phonetic);
		return result;
	}
	BOOL CustomFieldPropertiesEx(long FieldID, long Attribute, long SummaryCalc, VARIANT& GraphicalIndicators, VARIANT& Required, VARIANT& AutomaticallyRolldownToAssn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8db, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Attribute, SummaryCalc, &GraphicalIndicators, &Required, &AutomaticallyRolldownToAssn);
		return result;
	}
	BOOL OptionsInterfaceEx(VARIANT& ShowResourceAssignmentIndicators, VARIANT& ShowEditToStartFinishDates, VARIANT& ShowEditsToWorkUnitsDurationIndicators, VARIANT& ShowDeletionInNameColumn, VARIANT& DisplayProjectGuide, VARIANT& ProjectGuideUseDefaultFunctionalLayoutPage, VARIANT& ProjectGuideFunctionalLayoutPage, VARIANT& ProjectGuideUseDefaultContent, VARIANT& ProjectGuideContent, VARIANT& SetAsDefaults, VARIANT& UseOMIDs)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8dc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceAssignmentIndicators, &ShowEditToStartFinishDates, &ShowEditsToWorkUnitsDurationIndicators, &ShowDeletionInNameColumn, &DisplayProjectGuide, &ProjectGuideUseDefaultFunctionalLayoutPage, &ProjectGuideFunctionalLayoutPage, &ProjectGuideUseDefaultContent, &ProjectGuideContent, &SetAsDefaults, &UseOMIDs);
		return result;
	}
	BOOL EnterpriseResourcesImportEx(VARIANT& LocalRUIDs, VARIANT& UseImportColumn)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUIDs, &UseImportColumn);
		return result;
	}
	BOOL LoadWebBrowserControlEx(LPCTSTR TargetPage, VARIANT& WrapperPage, VARIANT& FunctionalityName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8df, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage, &FunctionalityName);
		return result;
	}
	BOOL OptionsSecurityEx(VARIANT& RemoveFileProperties, VARIANT& TrustWSS, VARIANT& LegacyFileFormats)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &RemoveFileProperties, &TrustWSS, &LegacyFileFormats);
		return result;
	}
	BOOL IsUndoingOrRedoing()
	{
		BOOL result;
		InvokeHelper(0x1460, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString ValidateEnterpriseFormula(long propertyID, LPCTSTR strFormula, BOOL Localized)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x1461, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, propertyID, strFormula, Localized);
		return result;
	}
	void UndoClear()
	{
		InvokeHelper(0x145f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL Undo(long HowManyUndos)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x145d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, HowManyUndos);
		return result;
	}
	BOOL Redo(long HowManyRedos)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x145e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, HowManyRedos);
		return result;
	}
	void OpenUndoTransaction(LPCTSTR Label, VARIANT& Guid)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x1463, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Label, &Guid);
	}
	void CloseUndoTransaction()
	{
		InvokeHelper(0x1464, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString ValidateGraphicalIndicators(long propertyID, LPCTSTR strGraphicalIndicators, BOOL Localized)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x1465, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, propertyID, strGraphicalIndicators, Localized);
		return result;
	}
	long GetUndoListCount()
	{
		long result;
		InvokeHelper(0x146a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetRedoListCount()
	{
		long result;
		InvokeHelper(0x146b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetUndoListItem(long ItemIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x146c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ItemIndex);
		return result;
	}
	CString GetRedoListItem(long ItemIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x146d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ItemIndex);
		return result;
	}
	LPDISPATCH GetCellInfo(long x, long y)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x146e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, x, y);
		return result;
	}
	CString GetProjectServerSettingsEx()
	{
		CString result;
		InvokeHelper(0x13d6, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void AfterUnloadWebBrowserControl()
	{
		InvokeHelper(0x1470, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL IsOffline()
	{
		BOOL result;
		InvokeHelper(0x1471, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsReducedFunctionalityMode()
	{
		BOOL result;
		InvokeHelper(0x1472, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Assistance()
	{
		LPDISPATCH result;
		InvokeHelper(0x1473, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString GetThemedColor(long elementType)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1474, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, elementType);
		return result;
	}
	long IsCommandEnabled(LPCTSTR CommandName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1475, DISPATCH_METHOD, VT_I4, (void*)&result, parms, CommandName);
		return result;
	}

	// _Global properties
public:
	Application * GetApplication()
	{
		Application * result;
		GetProperty(0xfff4, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetApplication(Application * propVal)
	{
		SetProperty(0xfff4, VT_DISPATCH, propVal);
	}
	Application * GetParent()
	{
		Application * result;
		GetProperty(0xfff3, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetParent(Application * propVal)
	{
		SetProperty(0xfff3, VT_DISPATCH, propVal);
	}
	Selection * GetActiveSelection()
	{
		Selection * result;
		GetProperty(0x13a8, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveSelection(Selection * propVal)
	{
		SetProperty(0x13a8, VT_DISPATCH, propVal);
	}
	Cell * GetActiveCell()
	{
		Cell * result;
		GetProperty(0x13a9, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveCell(Cell * propVal)
	{
		SetProperty(0x13a9, VT_DISPATCH, propVal);
	}
	Project * GetActiveProject()
	{
		Project * result;
		GetProperty(0x138a, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveProject(Project * propVal)
	{
		SetProperty(0x138a, VT_DISPATCH, propVal);
	}
	Window * GetActiveWindow()
	{
		Window * result;
		GetProperty(0x138b, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveWindow(Window * propVal)
	{
		SetProperty(0x138b, VT_DISPATCH, propVal);
	}
	BOOL GetSupportsMultipleDocuments()
	{
		BOOL result;
		GetProperty(0x138c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSupportsMultipleDocuments(BOOL propVal)
	{
		SetProperty(0x138c, VT_BOOL, propVal);
	}
	BOOL GetSupportsMultipleWindows()
	{
		BOOL result;
		GetProperty(0x138d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSupportsMultipleWindows(BOOL propVal)
	{
		SetProperty(0x138d, VT_BOOL, propVal);
	}
	BOOL GetVisible()
	{
		BOOL result;
		GetProperty(0x138e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetVisible(BOOL propVal)
	{
		SetProperty(0x138e, VT_BOOL, propVal);
	}
	CString GetPathSeparator()
	{
		CString result;
		GetProperty(0x138f, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPathSeparator(CString propVal)
	{
		SetProperty(0x138f, VT_BSTR, propVal);
	}
	CString GetCaption()
	{
		CString result;
		GetProperty(0x1392, VT_BSTR, (void*)&result);
		return result;
	}
	void SetCaption(CString propVal)
	{
		SetProperty(0x1392, VT_BSTR, propVal);
	}
	CString GetName()
	{
		CString result;
		GetProperty(0x0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetName(CString propVal)
	{
		SetProperty(0x0, VT_BSTR, propVal);
	}
	CString GetPath()
	{
		CString result;
		GetProperty(0x1397, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPath(CString propVal)
	{
		SetProperty(0x1397, VT_BSTR, propVal);
	}
	CString GetVersion()
	{
		CString result;
		GetProperty(0x139c, VT_BSTR, (void*)&result);
		return result;
	}
	void SetVersion(CString propVal)
	{
		SetProperty(0x139c, VT_BSTR, propVal);
	}
	long GetWindowState()
	{
		long result;
		GetProperty(0x139e, VT_I4, (void*)&result);
		return result;
	}
	void SetWindowState(long propVal)
	{
		SetProperty(0x139e, VT_I4, propVal);
	}
	ReportTemplates * GetVisualReportTemplateList()
	{
		ReportTemplates * result;
		GetProperty(0x1467, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetVisualReportTemplateList(ReportTemplates * propVal)
	{
		SetProperty(0x1467, VT_DISPATCH, propVal);
	}
	long GetDateOrder()
	{
		long result;
		GetProperty(0x13ef, VT_I4, (void*)&result);
		return result;
	}
	void SetDateOrder(long propVal)
	{
		SetProperty(0x13ef, VT_I4, propVal);
	}
	CString GetDateSeparator()
	{
		CString result;
		GetProperty(0x13f0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDateSeparator(CString propVal)
	{
		SetProperty(0x13f0, VT_BSTR, propVal);
	}
	CString GetThousandSeparator()
	{
		CString result;
		GetProperty(0x13f1, VT_BSTR, (void*)&result);
		return result;
	}
	void SetThousandSeparator(CString propVal)
	{
		SetProperty(0x13f1, VT_BSTR, propVal);
	}
	CString GetDecimalSeparator()
	{
		CString result;
		GetProperty(0x13f2, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDecimalSeparator(CString propVal)
	{
		SetProperty(0x13f2, VT_BSTR, propVal);
	}
	CString GetListSeparator()
	{
		CString result;
		GetProperty(0x13f3, VT_BSTR, (void*)&result);
		return result;
	}
	void SetListSeparator(CString propVal)
	{
		SetProperty(0x13f3, VT_BSTR, propVal);
	}
	CString GetTimeSeparator()
	{
		CString result;
		GetProperty(0x13f4, VT_BSTR, (void*)&result);
		return result;
	}
	void SetTimeSeparator(CString propVal)
	{
		SetProperty(0x13f4, VT_BSTR, propVal);
	}
	BOOL GetTwelveHourTimeFormat()
	{
		BOOL result;
		GetProperty(0x13f5, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTwelveHourTimeFormat(BOOL propVal)
	{
		SetProperty(0x13f5, VT_BOOL, propVal);
	}
	CString GetAMText()
	{
		CString result;
		GetProperty(0x13f6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetAMText(CString propVal)
	{
		SetProperty(0x13f6, VT_BSTR, propVal);
	}
	CString GetPMText()
	{
		CString result;
		GetProperty(0x13f7, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPMText(CString propVal)
	{
		SetProperty(0x13f7, VT_BSTR, propVal);
	}
	CString GetDefaultView()
	{
		CString result;
		GetProperty(0x13f8, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDefaultView(CString propVal)
	{
		SetProperty(0x13f8, VT_BSTR, propVal);
	}
	BOOL GetDisplayStatusBar()
	{
		BOOL result;
		GetProperty(0x13f9, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayStatusBar(BOOL propVal)
	{
		SetProperty(0x13f9, VT_BOOL, propVal);
	}
	BOOL GetDisplayAlerts()
	{
		BOOL result;
		GetProperty(0x1425, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayAlerts(BOOL propVal)
	{
		SetProperty(0x1425, VT_BOOL, propVal);
	}
	BOOL GetDisplayEntryBar()
	{
		BOOL result;
		GetProperty(0x13fa, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayEntryBar(BOOL propVal)
	{
		SetProperty(0x13fa, VT_BOOL, propVal);
	}
	BOOL GetDisplayScrollBars()
	{
		BOOL result;
		GetProperty(0x13fb, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayScrollBars(BOOL propVal)
	{
		SetProperty(0x13fb, VT_BOOL, propVal);
	}
	BOOL GetDisplayWindowsInTaskbar()
	{
		BOOL result;
		GetProperty(0x1434, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWindowsInTaskbar(BOOL propVal)
	{
		SetProperty(0x1434, VT_BOOL, propVal);
	}
	long GetCalculation()
	{
		long result;
		GetProperty(0x1401, VT_I4, (void*)&result);
		return result;
	}
	void SetCalculation(long propVal)
	{
		SetProperty(0x1401, VT_I4, propVal);
	}
	BOOL GetAutoLevel()
	{
		BOOL result;
		GetProperty(0x1407, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoLevel(BOOL propVal)
	{
		SetProperty(0x1407, VT_BOOL, propVal);
	}
	BOOL GetAutoClearLeveling()
	{
		BOOL result;
		GetProperty(0x1408, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoClearLeveling(BOOL propVal)
	{
		SetProperty(0x1408, VT_BOOL, propVal);
	}
	BOOL GetLevelWithinSlack()
	{
		BOOL result;
		GetProperty(0x1409, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelWithinSlack(BOOL propVal)
	{
		SetProperty(0x1409, VT_BOOL, propVal);
	}
	long GetLevelOrder()
	{
		long result;
		GetProperty(0x140a, VT_I4, (void*)&result);
		return result;
	}
	void SetLevelOrder(long propVal)
	{
		SetProperty(0x140a, VT_I4, propVal);
	}
	long GetLevelPeriodBasis()
	{
		long result;
		GetProperty(0x142f, VT_I4, (void*)&result);
		return result;
	}
	void SetLevelPeriodBasis(long propVal)
	{
		SetProperty(0x142f, VT_I4, propVal);
	}
	BOOL GetLevelIndividualAssignments()
	{
		BOOL result;
		GetProperty(0x1430, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelIndividualAssignments(BOOL propVal)
	{
		SetProperty(0x1430, VT_BOOL, propVal);
	}
	BOOL GetLevelProposedBookings()
	{
		BOOL result;
		GetProperty(0x1436, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelProposedBookings(BOOL propVal)
	{
		SetProperty(0x1436, VT_BOOL, propVal);
	}
	BOOL GetLevelingCanSplit()
	{
		BOOL result;
		GetProperty(0x1431, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelingCanSplit(BOOL propVal)
	{
		SetProperty(0x1431, VT_BOOL, propVal);
	}
	BOOL GetMoveAfterReturn()
	{
		BOOL result;
		GetProperty(0x140b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMoveAfterReturn(BOOL propVal)
	{
		SetProperty(0x140b, VT_BOOL, propVal);
	}
	BOOL GetDisplayScheduleMessages()
	{
		BOOL result;
		GetProperty(0x140d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayScheduleMessages(BOOL propVal)
	{
		SetProperty(0x140d, VT_BOOL, propVal);
	}
	long GetStartWeekOn()
	{
		long result;
		GetProperty(0x140f, VT_I4, (void*)&result);
		return result;
	}
	void SetStartWeekOn(long propVal)
	{
		SetProperty(0x140f, VT_I4, propVal);
	}
	long GetStartYearIn()
	{
		long result;
		GetProperty(0x1411, VT_I4, (void*)&result);
		return result;
	}
	void SetStartYearIn(long propVal)
	{
		SetProperty(0x1411, VT_I4, propVal);
	}
	BOOL GetCellDragAndDrop()
	{
		BOOL result;
		GetProperty(0x1413, VT_BOOL, (void*)&result);
		return result;
	}
	void SetCellDragAndDrop(BOOL propVal)
	{
		SetProperty(0x1413, VT_BOOL, propVal);
	}
	CString GetUserName()
	{
		CString result;
		GetProperty(0x141e, VT_BSTR, (void*)&result);
		return result;
	}
	void SetUserName(CString propVal)
	{
		SetProperty(0x141e, VT_BSTR, propVal);
	}
	BOOL GetDisplayNotesIndicator()
	{
		BOOL result;
		GetProperty(0x1421, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayNotesIndicator(BOOL propVal)
	{
		SetProperty(0x1421, VT_BOOL, propVal);
	}
	BOOL GetAskToUpdateLinks()
	{
		BOOL result;
		GetProperty(0x1423, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAskToUpdateLinks(BOOL propVal)
	{
		SetProperty(0x1423, VT_BOOL, propVal);
	}
	BOOL GetDisplayPlanningWizard()
	{
		BOOL result;
		GetProperty(0x1416, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayPlanningWizard(BOOL propVal)
	{
		SetProperty(0x1416, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardUsage()
	{
		BOOL result;
		GetProperty(0x1418, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardUsage(BOOL propVal)
	{
		SetProperty(0x1418, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardErrors()
	{
		BOOL result;
		GetProperty(0x1419, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardErrors(BOOL propVal)
	{
		SetProperty(0x1419, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardScheduling()
	{
		BOOL result;
		GetProperty(0x1417, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardScheduling(BOOL propVal)
	{
		SetProperty(0x1417, VT_BOOL, propVal);
	}
	BOOL GetShowTipOfDay()
	{
		BOOL result;
		GetProperty(0x141b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowTipOfDay(BOOL propVal)
	{
		SetProperty(0x141b, VT_BOOL, propVal);
	}
	BOOL GetShowToolTips()
	{
		BOOL result;
		GetProperty(0x141c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowToolTips(BOOL propVal)
	{
		SetProperty(0x141c, VT_BOOL, propVal);
	}
	BOOL GetShowWelcome()
	{
		BOOL result;
		GetProperty(0x1424, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowWelcome(BOOL propVal)
	{
		SetProperty(0x1424, VT_BOOL, propVal);
	}
	BOOL GetLoadLastFile()
	{
		BOOL result;
		GetProperty(0x1410, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLoadLastFile(BOOL propVal)
	{
		SetProperty(0x1410, VT_BOOL, propVal);
	}
	BOOL GetPromptForSummaryInfo()
	{
		BOOL result;
		GetProperty(0x141d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetPromptForSummaryInfo(BOOL propVal)
	{
		SetProperty(0x141d, VT_BOOL, propVal);
	}
	BOOL GetDisplayOLEIndicator()
	{
		BOOL result;
		GetProperty(0x1422, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayOLEIndicator(BOOL propVal)
	{
		SetProperty(0x1422, VT_BOOL, propVal);
	}
	long GetDefaultDateFormat()
	{
		long result;
		GetProperty(0x1405, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultDateFormat(long propVal)
	{
		SetProperty(0x1405, VT_I4, propVal);
	}
	BOOL GetDayLeadingZero()
	{
		BOOL result;
		GetProperty(0x1426, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDayLeadingZero(BOOL propVal)
	{
		SetProperty(0x1426, VT_BOOL, propVal);
	}
	BOOL GetMonthLeadingZero()
	{
		BOOL result;
		GetProperty(0x1427, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMonthLeadingZero(BOOL propVal)
	{
		SetProperty(0x1427, VT_BOOL, propVal);
	}
	BOOL GetTimeLeadingZero()
	{
		BOOL result;
		GetProperty(0x1428, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTimeLeadingZero(BOOL propVal)
	{
		SetProperty(0x1428, VT_BOOL, propVal);
	}
	BOOL GetCopyResourceUsageHeader()
	{
		BOOL result;
		GetProperty(0x1412, VT_BOOL, (void*)&result);
		return result;
	}
	void SetCopyResourceUsageHeader(BOOL propVal)
	{
		SetProperty(0x1412, VT_BOOL, propVal);
	}
	long GetRecentFilesMaximum()
	{
		long result;
		GetProperty(0x142a, VT_I4, (void*)&result);
		return result;
	}
	void SetRecentFilesMaximum(long propVal)
	{
		SetProperty(0x142a, VT_I4, propVal);
	}
	BOOL GetDisplayRecentFiles()
	{
		BOOL result;
		GetProperty(0x1429, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayRecentFiles(BOOL propVal)
	{
		SetProperty(0x1429, VT_BOOL, propVal);
	}
	BOOL GetMacroVirusProtection()
	{
		BOOL result;
		GetProperty(0x142b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMacroVirusProtection(BOOL propVal)
	{
		SetProperty(0x142b, VT_BOOL, propVal);
	}
	long GetShowAssignmentUnitsAs()
	{
		long result;
		GetProperty(0x142c, VT_I4, (void*)&result);
		return result;
	}
	void SetShowAssignmentUnitsAs(long propVal)
	{
		SetProperty(0x142c, VT_I4, propVal);
	}
	BOOL GetAutomaticallyFillPhoneticFields()
	{
		BOOL result;
		GetProperty(0x142d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutomaticallyFillPhoneticFields(BOOL propVal)
	{
		SetProperty(0x142d, VT_BOOL, propVal);
	}
	BOOL GetDefaultAutoFilter()
	{
		BOOL result;
		GetProperty(0x142e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDefaultAutoFilter(BOOL propVal)
	{
		SetProperty(0x142e, VT_BOOL, propVal);
	}
	BOOL GetShowEstimatedDuration()
	{
		BOOL result;
		GetProperty(0x1432, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowEstimatedDuration(BOOL propVal)
	{
		SetProperty(0x1432, VT_BOOL, propVal);
	}
	BOOL GetNewTasksEstimated()
	{
		BOOL result;
		GetProperty(0x1433, VT_BOOL, (void*)&result);
		return result;
	}
	void SetNewTasksEstimated(BOOL propVal)
	{
		SetProperty(0x1433, VT_BOOL, propVal);
	}
	Assistant * GetAssistant()
	{
		Assistant * result;
		GetProperty(0x13b2, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetAssistant(Assistant * propVal)
	{
		SetProperty(0x13b2, VT_DISPATCH, propVal);
	}
	BOOL GetDisplayViewBar()
	{
		BOOL result;
		GetProperty(0x13b7, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayViewBar(BOOL propVal)
	{
		SetProperty(0x13b7, VT_BOOL, propVal);
	}
	VBE * GetVBE()
	{
		VBE * result;
		GetProperty(0x13b3, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetVBE(VBE * propVal)
	{
		SetProperty(0x13b3, VT_DISPATCH, propVal);
	}
	long GetEnableCancelKey()
	{
		long result;
		GetProperty(0x13b4, VT_I4, (void*)&result);
		return result;
	}
	void SetEnableCancelKey(long propVal)
	{
		SetProperty(0x13b4, VT_I4, propVal);
	}
	BOOL GetUserControl()
	{
		BOOL result;
		GetProperty(0x13b6, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUserControl(BOOL propVal)
	{
		SetProperty(0x13b6, VT_BOOL, propVal);
	}
	double GetUsableWidth()
	{
		double result;
		GetProperty(0x139a, VT_R8, (void*)&result);
		return result;
	}
	void SetUsableWidth(double propVal)
	{
		SetProperty(0x139a, VT_R8, propVal);
	}
	double GetUsableHeight()
	{
		double result;
		GetProperty(0x1399, VT_R8, (void*)&result);
		return result;
	}
	void SetUsableHeight(double propVal)
	{
		SetProperty(0x1399, VT_R8, propVal);
	}
	BOOL GetScreenUpdating()
	{
		BOOL result;
		GetProperty(0x13b5, VT_BOOL, (void*)&result);
		return result;
	}
	void SetScreenUpdating(BOOL propVal)
	{
		SetProperty(0x13b5, VT_BOOL, propVal);
	}
	BOOL GetDisplayProjectGuide()
	{
		BOOL result;
		GetProperty(0x1435, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayProjectGuide(BOOL propVal)
	{
		SetProperty(0x1435, VT_BOOL, propVal);
	}
	BOOL GetEnterpriseAllowLocalBaseCalendars()
	{
		BOOL result;
		GetProperty(0x13b8, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnterpriseAllowLocalBaseCalendars(BOOL propVal)
	{
		SetProperty(0x13b8, VT_BOOL, propVal);
	}
	long GetEdition()
	{
		long result;
		GetProperty(0x13d5, VT_I4, (void*)&result);
		return result;
	}
	void SetEdition(long propVal)
	{
		SetProperty(0x13d5, VT_I4, propVal);
	}
	Profiles * GetProfiles()
	{
		Profiles * result;
		GetProperty(0x13ae, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetProfiles(Profiles * propVal)
	{
		SetProperty(0x13ae, VT_DISPATCH, propVal);
	}
	Calendars * GetGlobalBaseCalendars()
	{
		Calendars * result;
		GetProperty(0x13db, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalBaseCalendars(Calendars * propVal)
	{
		SetProperty(0x13db, VT_DISPATCH, propVal);
	}
	Views * GetGlobalViews()
	{
		Views * result;
		GetProperty(0x13cc, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViews(Views * propVal)
	{
		SetProperty(0x13cc, VT_DISPATCH, propVal);
	}
	ViewsSingle * GetGlobalViewsSingle()
	{
		ViewsSingle * result;
		GetProperty(0x13cd, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViewsSingle(ViewsSingle * propVal)
	{
		SetProperty(0x13cd, VT_DISPATCH, propVal);
	}
	ViewsCombination * GetGlobalViewsCombination()
	{
		ViewsCombination * result;
		GetProperty(0x13ce, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViewsCombination(ViewsCombination * propVal)
	{
		SetProperty(0x13ce, VT_DISPATCH, propVal);
	}
	Tables * GetGlobalTaskTables()
	{
		Tables * result;
		GetProperty(0x13cf, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalTaskTables(Tables * propVal)
	{
		SetProperty(0x13cf, VT_DISPATCH, propVal);
	}
	Tables * GetGlobalResourceTables()
	{
		Tables * result;
		GetProperty(0x13d0, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalResourceTables(Tables * propVal)
	{
		SetProperty(0x13d0, VT_DISPATCH, propVal);
	}
	Filters * GetGlobalTaskFilters()
	{
		Filters * result;
		GetProperty(0x13d1, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalTaskFilters(Filters * propVal)
	{
		SetProperty(0x13d1, VT_DISPATCH, propVal);
	}
	Filters * GetGlobalResourceFilters()
	{
		Filters * result;
		GetProperty(0x13d2, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalResourceFilters(Filters * propVal)
	{
		SetProperty(0x13d2, VT_DISPATCH, propVal);
	}
	OutlineCodes * GetGlobalOutlineCodes()
	{
		OutlineCodes * result;
		GetProperty(0x13b0, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalOutlineCodes(OutlineCodes * propVal)
	{
		SetProperty(0x13b0, VT_DISPATCH, propVal);
	}
	CString GetEnterpriseListSeparator()
	{
		CString result;
		GetProperty(0x13c6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetEnterpriseListSeparator(CString propVal)
	{
		SetProperty(0x13c6, VT_BSTR, propVal);
	}
	BOOL GetEnterpriseProtectActuals()
	{
		BOOL result;
		GetProperty(0x1458, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnterpriseProtectActuals(BOOL propVal)
	{
		SetProperty(0x1458, VT_BOOL, propVal);
	}
	BOOL GetUse3DLook()
	{
		BOOL result;
		GetProperty(0x143a, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUse3DLook(BOOL propVal)
	{
		SetProperty(0x143a, VT_BOOL, propVal);
	}
	BOOL GetUseOMIDs()
	{
		BOOL result;
		GetProperty(0x1437, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUseOMIDs(BOOL propVal)
	{
		SetProperty(0x1437, VT_BOOL, propVal);
	}
	long GetUndoLevels()
	{
		long result;
		GetProperty(0x143b, VT_I4, (void*)&result);
		return result;
	}
	void SetUndoLevels(long propVal)
	{
		SetProperty(0x143b, VT_I4, propVal);
	}
	BOOL GetEnableChangeHighlighting()
	{
		BOOL result;
		GetProperty(0x1466, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnableChangeHighlighting(BOOL propVal)
	{
		SetProperty(0x1466, VT_BOOL, propVal);
	}
	CString GetVisualReportsAdditionalTemplatePath()
	{
		CString result;
		GetProperty(0x146f, VT_BSTR, (void*)&result);
		return result;
	}
	void SetVisualReportsAdditionalTemplatePath(CString propVal)
	{
		SetProperty(0x146f, VT_BSTR, propVal);
	}
	BOOL GetTrustProjectServerAndWSSPages()
	{
		BOOL result;
		GetProperty(0x143c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTrustProjectServerAndWSSPages(BOOL propVal)
	{
		SetProperty(0x143c, VT_BOOL, propVal);
	}

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CIProjectDoc wrapper class

class CIProjectDoc : public COleDispatchDriver
{
public:
	CIProjectDoc(){} // Calls COleDispatchDriver default constructor
	CIProjectDoc(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CIProjectDoc(const CIProjectDoc& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _IProjectDoc methods
public:
	CString get__CodeName()
	{
		CString result;
		InvokeHelper(0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put__CodeName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_CodeName()
	{
		CString result;
		InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_OutlineChildren()
	{
		LPDISPATCH result;
		InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CostVariance()
	{
		VARIANT result;
		InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ProjectSummaryTask()
	{
		LPDISPATCH result;
		InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingCost()
	{
		VARIANT result;
		InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWP()
	{
		VARIANT result;
		InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWS()
	{
		VARIANT result;
		InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_SV()
	{
		VARIANT result;
		InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CV()
	{
		VARIANT result;
		InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_OutlineNumber()
	{
		CString result;
		InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Critical()
	{
		VARIANT result;
		InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FreeSlack()
	{
		VARIANT result;
		InvokeHelper(0x79, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_TotalSlack()
	{
		VARIANT result;
		InvokeHelper(0x7a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_UniqueID()
	{
		long result;
		InvokeHelper(0xba, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_OutlineLevel()
	{
		long result;
		InvokeHelper(0xb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BaselineDuration()
	{
		VARIANT result;
		InvokeHelper(0x7f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_DurationVariance()
	{
		VARIANT result;
		InvokeHelper(0x82, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EarlyStart()
	{
		VARIANT result;
		InvokeHelper(0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EarlyFinish()
	{
		VARIANT result;
		InvokeHelper(0x8a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LateStart()
	{
		VARIANT result;
		InvokeHelper(0x8b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_StartVariance()
	{
		VARIANT result;
		InvokeHelper(0x91, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FinishVariance()
	{
		VARIANT result;
		InvokeHelper(0x92, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Project()
	{
		VARIANT result;
		InvokeHelper(0xb8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Milestone()
	{
		VARIANT result;
		InvokeHelper(0x7c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingDuration()
	{
		VARIANT result;
		InvokeHelper(0x83, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_PercentComplete()
	{
		VARIANT result;
		InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0x87, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ResourceNames()
	{
		VARIANT result;
		InvokeHelper(0x95, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ResourceInitials()
	{
		VARIANT result;
		InvokeHelper(0x96, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Resume()
	{
		VARIANT result;
		InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Stop()
	{
		VARIANT result;
		InvokeHelper(0xc8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ResumeNoEarlierThan()
	{
		VARIANT result;
		InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ConstraintType()
	{
		VARIANT result;
		InvokeHelper(0x75, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ConstraintDate()
	{
		VARIANT result;
		InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualCost()
	{
		VARIANT result;
		InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Cost()
	{
		VARIANT result;
		InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Created()
	{
		VARIANT result;
		InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualDuration()
	{
		VARIANT result;
		InvokeHelper(0x80, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Duration()
	{
		VARIANT result;
		InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LateFinish()
	{
		VARIANT result;
		InvokeHelper(0x8c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualFinish()
	{
		VARIANT result;
		InvokeHelper(0x8e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_Objects()
	{
		long result;
		InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingWork()
	{
		VARIANT result;
		InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ResourceGroup()
	{
		VARIANT result;
		InvokeHelper(0xd5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualStart()
	{
		VARIANT result;
		InvokeHelper(0x8d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Summary()
	{
		VARIANT result;
		InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Template()
	{
		CString result;
		InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_UpdateNeeded()
	{
		VARIANT result;
		InvokeHelper(0xd3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Work()
	{
		VARIANT result;
		InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_WorkVariance()
	{
		VARIANT result;
		InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LinkedFields()
	{
		VARIANT result;
		InvokeHelper(0xc6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Confirmed()
	{
		VARIANT result;
		InvokeHelper(0xd2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	BOOL get_ReadOnly()
	{
		BOOL result;
		InvokeHelper(0x13f0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL get_HasPassword()
	{
		BOOL result;
		InvokeHelper(0x13f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL get_WriteReserved()
	{
		BOOL result;
		InvokeHelper(0x13f2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Index()
	{
		VARIANT result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void SaveAs(VARIANT& Name, long Format, VARIANT& Backup, VARIANT& ReadOnly, VARIANT& TaskInformation, VARIANT& Filtered, VARIANT& Table, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, VARIANT& ClearBaseline, VARIANT& ClearActuals, VARIANT& ClearResourceRates, VARIANT& ClearFixedCosts)
	{
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1773, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name, Format, &Backup, &ReadOnly, &TaskInformation, &Filtered, &Table, &UserID, &DatabasePassWord, &FormatID, &Map, &ClearBaseline, &ClearActuals, &ClearResourceRates, &ClearFixedCosts);
	}
	LPDISPATCH get_MapList()
	{
		LPDISPATCH result;
		InvokeHelper(0x1776, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Tasks()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Resources()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_BaseCalendars()
	{
		LPDISPATCH result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_BuiltinDocumentProperties()
	{
		LPDISPATCH result;
		InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CustomDocumentProperties()
	{
		LPDISPATCH result;
		InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Container()
	{
		LPDISPATCH result;
		InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_NumberOfTasks()
	{
		long result;
		InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_NumberOfResources()
	{
		long result;
		InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_FullName()
	{
		CString result;
		InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_Path()
	{
		CString result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_ResourcePoolName()
	{
		CString result;
		InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL get_Saved()
	{
		BOOL result;
		InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CreationDate()
	{
		VARIANT result;
		InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LastPrintedDate()
	{
		VARIANT result;
		InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LastSaveDate()
	{
		VARIANT result;
		InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_LastSavedBy()
	{
		CString result;
		InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_RevisionNumber()
	{
		CString result;
		InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ViewList()
	{
		LPDISPATCH result;
		InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskViewList()
	{
		LPDISPATCH result;
		InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceViewList()
	{
		LPDISPATCH result;
		InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_ReadOnlyRecommended()
	{
		BOOL result;
		InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ReportList()
	{
		LPDISPATCH result;
		InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskFilterList()
	{
		LPDISPATCH result;
		InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceFilterList()
	{
		LPDISPATCH result;
		InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskTableList()
	{
		LPDISPATCH result;
		InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceTableList()
	{
		LPDISPATCH result;
		InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_CurrentView()
	{
		CString result;
		InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_CurrentTable()
	{
		CString result;
		InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_CurrentFilter()
	{
		CString result;
		InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_ID()
	{
		long result;
		InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CommandBars()
	{
		LPDISPATCH result;
		InvokeHelper(0x44, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_UserControl()
	{
		BOOL result;
		InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_VBProject()
	{
		LPDISPATCH result;
		InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Activate()
	{
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void LevelClearDates()
	{
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AppendNotes(LPCTSTR Value)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Value);
	}
	LPDISPATCH get_Subprojects()
	{
		LPDISPATCH result;
		InvokeHelper(0x1777, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_CurrentGroup()
	{
		CString result;
		InvokeHelper(0x1778, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskGroupList()
	{
		LPDISPATCH result;
		InvokeHelper(0x1779, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceGroupList()
	{
		LPDISPATCH result;
		InvokeHelper(0x177a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskGroups()
	{
		LPDISPATCH result;
		InvokeHelper(0x177b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceGroups()
	{
		LPDISPATCH result;
		InvokeHelper(0x177c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x1797, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Views()
	{
		LPDISPATCH result;
		InvokeHelper(0x1785, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskTables()
	{
		LPDISPATCH result;
		InvokeHelper(0x1787, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceTables()
	{
		LPDISPATCH result;
		InvokeHelper(0x1788, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskFilters()
	{
		LPDISPATCH result;
		InvokeHelper(0x178f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ResourceFilters()
	{
		LPDISPATCH result;
		InvokeHelper(0x1790, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ViewsSingle()
	{
		LPDISPATCH result;
		InvokeHelper(0x178a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ViewsCombination()
	{
		LPDISPATCH result;
		InvokeHelper(0x178b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BaselineSavedDate(long Baseline)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1786, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms, Baseline);
		return result;
	}
	CString get_ProjectNamePrefix()
	{
		CString result;
		InvokeHelper(0x1791, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_VersionName()
	{
		CString result;
		InvokeHelper(0x1792, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void MakeServerURLTrusted()
	{
		InvokeHelper(0x1795, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_TempToDoList()
	{
		long result;
		InvokeHelper(0x1796, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_TempToDoList(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1796, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_OutlineCodes()
	{
		LPDISPATCH result;
		InvokeHelper(0x17a0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_SharedWorkspace()
	{
		LPDISPATCH result;
		InvokeHelper(0x17a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_DocumentLibraryVersions()
	{
		LPDISPATCH result;
		InvokeHelper(0x17a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_CanCheckIn()
	{
		BOOL result;
		InvokeHelper(0x17a4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void CheckIn(VARIANT& SaveChanges, VARIANT& Comment, VARIANT& MakePublic)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x17a5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &SaveChanges, &Comment, &MakePublic);
	}
	CString GetObjectMatchingID(long ObjectType, LPCTSTR ObjectName)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x17aa, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ObjectType, ObjectName);
		return result;
	}
	void SetObjectMatchingID(long ObjectType, LPCTSTR ObjectName, LPCTSTR MatchingID)
	{
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x17ab, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ObjectType, ObjectName, MatchingID);
	}
	CString GetDisplayNameFromObjectMatchingID(long ObjectType, LPCTSTR MatchingID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x17ac, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ObjectType, MatchingID);
		return result;
	}
	CString DeliverableCreate(LPCTSTR DeliverableName, VARIANT& DeliverableStartDate, VARIANT& DeliverableFinishDate, LPCTSTR TaskGuid)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x17ae, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, DeliverableName, &DeliverableStartDate, &DeliverableFinishDate, TaskGuid);
		return result;
	}
	BOOL DeliverableUpdate(LPCTSTR DeliverableGuid, LPCTSTR DeliverableName, VARIANT& DeliverableStartDate, VARIANT& DeliverableFinishDate)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x17af, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid, DeliverableName, &DeliverableStartDate, &DeliverableFinishDate);
		return result;
	}
	BOOL DeliverableDelete(LPCTSTR DeliverableGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17b0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid);
		return result;
	}
	BOOL DeliverableDependencyCreate(LPCTSTR DeliverableGuid, LPCTSTR TaskGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x17b1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid, TaskGuid);
		return result;
	}
	BOOL DeliverableDependencyDelete(LPCTSTR DeliverableGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17b2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid);
		return result;
	}
	BOOL DeliverableRefreshServerCache(VARIANT& DeliverableGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x17b3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DeliverableGuid);
		return result;
	}
	LPDISPATCH DeliverablesGetServerCachedXml()
	{
		LPDISPATCH result;
		InvokeHelper(0x17b4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH DeliverablesGetXml()
	{
		LPDISPATCH result;
		InvokeHelper(0x17b5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString GetServerProjectGuid()
	{
		CString result;
		InvokeHelper(0x17b6, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL DeliverableLinkToTask(LPCTSTR DeliverableGuid, LPCTSTR TaskGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x17b8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid, TaskGuid);
		return result;
	}
	BOOL DeliverableLinkToProject(LPCTSTR DeliverableGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17b9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid);
		return result;
	}
	BOOL DeliverablesClearAll()
	{
		BOOL result;
		InvokeHelper(0x17ba, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DeliverableAcceptChanges(LPCTSTR DeliverableGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17bb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DeliverableGuid);
		return result;
	}
	CString DeliverablesGetProviderProjects()
	{
		CString result;
		InvokeHelper(0x17bc, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH DeliverablesGetByProject(LPCTSTR ProjectGuid)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17bd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ProjectGuid);
		return result;
	}
	long GetTaskIndexByGuid(LPCTSTR TaskGuid)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17be, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TaskGuid);
		return result;
	}
	VARIANT ReadWssData(LPCTSTR ProjectGuid)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17dd, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, ProjectGuid);
		return result;
	}
	VARIANT GetWinprojURLs()
	{
		VARIANT result;
		InvokeHelper(0x17de, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long LocalResourceErrorCount()
	{
		long result;
		InvokeHelper(0x17e0, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long ImportResourceErrorCount()
	{
		long result;
		InvokeHelper(0x17e4, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long ResourceErrorCount()
	{
		long result;
		InvokeHelper(0x17e1, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long LocalResourceCount()
	{
		long result;
		InvokeHelper(0x17e2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long ResourceCount()
	{
		long result;
		InvokeHelper(0x17e3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}

	// _IProjectDoc properties
public:
	VARIANT GetManager()
	{
		VARIANT result;
		GetProperty(0x5, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetManager(VARIANT &propVal)
	{
		SetProperty(0x5, VT_VARIANT, &propVal);
	}
	VARIANT GetCompany()
	{
		VARIANT result;
		GetProperty(0x4, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetCompany(VARIANT &propVal)
	{
		SetProperty(0x4, VT_VARIANT, &propVal);
	}
	VARIANT GetAuthor()
	{
		VARIANT result;
		GetProperty(0x30, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetAuthor(VARIANT &propVal)
	{
		SetProperty(0x30, VT_VARIANT, &propVal);
	}
	VARIANT GetKeywords()
	{
		VARIANT result;
		GetProperty(0x31, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetKeywords(VARIANT &propVal)
	{
		SetProperty(0x31, VT_VARIANT, &propVal);
	}
	CString GetProjectNotes()
	{
		CString result;
		GetProperty(0x6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetProjectNotes(CString propVal)
	{
		SetProperty(0x6, VT_BSTR, propVal);
	}
	VARIANT GetProjectStart()
	{
		VARIANT result;
		GetProperty(0x7, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetProjectStart(VARIANT &propVal)
	{
		SetProperty(0x7, VT_VARIANT, &propVal);
	}
	VARIANT GetProjectFinish()
	{
		VARIANT result;
		GetProperty(0x8, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetProjectFinish(VARIANT &propVal)
	{
		SetProperty(0x8, VT_VARIANT, &propVal);
	}
	VARIANT GetCurrentDate()
	{
		VARIANT result;
		GetProperty(0x9, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetCurrentDate(VARIANT &propVal)
	{
		SetProperty(0x9, VT_VARIANT, &propVal);
	}
	VARIANT GetStatusDate()
	{
		VARIANT result;
		GetProperty(0x4b, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStatusDate(VARIANT &propVal)
	{
		SetProperty(0x4b, VT_VARIANT, &propVal);
	}
	BOOL GetScheduleFromStart()
	{
		BOOL result;
		GetProperty(0xc, VT_BOOL, (void*)&result);
		return result;
	}
	void SetScheduleFromStart(BOOL propVal)
	{
		SetProperty(0xc, VT_BOOL, propVal);
	}
	VARIANT GetComments()
	{
		VARIANT result;
		GetProperty(0xe, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetComments(VARIANT &propVal)
	{
		SetProperty(0xe, VT_VARIANT, &propVal);
	}
	VARIANT GetTitle()
	{
		VARIANT result;
		GetProperty(0x1b, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetTitle(VARIANT &propVal)
	{
		SetProperty(0x1b, VT_VARIANT, &propVal);
	}
	VARIANT GetSubject()
	{
		VARIANT result;
		GetProperty(0x1c, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetSubject(VARIANT &propVal)
	{
		SetProperty(0x1c, VT_VARIANT, &propVal);
	}
	Windows * GetWindows()
	{
		Windows * result;
		GetProperty(0x1e, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetWindows(Windows * propVal)
	{
		SetProperty(0x1e, VT_DISPATCH, propVal);
	}
	short GetMinuteLabelDisplay()
	{
		short result;
		GetProperty(0x38, VT_I2, (void*)&result);
		return result;
	}
	void SetMinuteLabelDisplay(short propVal)
	{
		SetProperty(0x38, VT_I2, propVal);
	}
	short GetHourLabelDisplay()
	{
		short result;
		GetProperty(0x39, VT_I2, (void*)&result);
		return result;
	}
	void SetHourLabelDisplay(short propVal)
	{
		SetProperty(0x39, VT_I2, propVal);
	}
	short GetDayLabelDisplay()
	{
		short result;
		GetProperty(0x3a, VT_I2, (void*)&result);
		return result;
	}
	void SetDayLabelDisplay(short propVal)
	{
		SetProperty(0x3a, VT_I2, propVal);
	}
	short GetWeekLabelDisplay()
	{
		short result;
		GetProperty(0x3b, VT_I2, (void*)&result);
		return result;
	}
	void SetWeekLabelDisplay(short propVal)
	{
		SetProperty(0x3b, VT_I2, propVal);
	}
	short GetYearLabelDisplay()
	{
		short result;
		GetProperty(0x3c, VT_I2, (void*)&result);
		return result;
	}
	void SetYearLabelDisplay(short propVal)
	{
		SetProperty(0x3c, VT_I2, propVal);
	}
	short GetMonthLabelDisplay()
	{
		short result;
		GetProperty(0x177f, VT_I2, (void*)&result);
		return result;
	}
	void SetMonthLabelDisplay(short propVal)
	{
		SetProperty(0x177f, VT_I2, propVal);
	}
	BOOL GetSpaceBeforeTimeLabels()
	{
		BOOL result;
		GetProperty(0x3d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSpaceBeforeTimeLabels(BOOL propVal)
	{
		SetProperty(0x3d, VT_BOOL, propVal);
	}
	long GetDefaultTaskType()
	{
		long result;
		GetProperty(0x43, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultTaskType(long propVal)
	{
		SetProperty(0x43, VT_I4, propVal);
	}
	BOOL GetDefaultEffortDriven()
	{
		BOOL result;
		GetProperty(0x3f, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDefaultEffortDriven(BOOL propVal)
	{
		SetProperty(0x3f, VT_BOOL, propVal);
	}
	BOOL GetUseFYStartYear()
	{
		BOOL result;
		GetProperty(0x40, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUseFYStartYear(BOOL propVal)
	{
		SetProperty(0x40, VT_BOOL, propVal);
	}
	BOOL GetAutoFilter()
	{
		BOOL result;
		GetProperty(0x42, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoFilter(BOOL propVal)
	{
		SetProperty(0x42, VT_BOOL, propVal);
	}
	BOOL GetHonorConstraints()
	{
		BOOL result;
		GetProperty(0x49, VT_BOOL, (void*)&result);
		return result;
	}
	void SetHonorConstraints(BOOL propVal)
	{
		SetProperty(0x49, VT_BOOL, propVal);
	}
	BOOL GetMultipleCriticalPaths()
	{
		BOOL result;
		GetProperty(0x4a, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMultipleCriticalPaths(BOOL propVal)
	{
		SetProperty(0x4a, VT_BOOL, propVal);
	}
	VARIANT GetLevelFromDate()
	{
		VARIANT result;
		GetProperty(0x4c, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetLevelFromDate(VARIANT &propVal)
	{
		SetProperty(0x4c, VT_VARIANT, &propVal);
	}
	VARIANT GetLevelToDate()
	{
		VARIANT result;
		GetProperty(0x4d, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetLevelToDate(VARIANT &propVal)
	{
		SetProperty(0x4d, VT_VARIANT, &propVal);
	}
	BOOL GetLevelEntireProject()
	{
		BOOL result;
		GetProperty(0x5b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelEntireProject(BOOL propVal)
	{
		SetProperty(0x5b, VT_BOOL, propVal);
	}
	long GetDefaultFixedCostAccrual()
	{
		long result;
		GetProperty(0x51, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultFixedCostAccrual(long propVal)
	{
		SetProperty(0x51, VT_I4, propVal);
	}
	BOOL GetSpreadCostsToStatusDate()
	{
		BOOL result;
		GetProperty(0x53, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSpreadCostsToStatusDate(BOOL propVal)
	{
		SetProperty(0x53, VT_BOOL, propVal);
	}
	BOOL GetSpreadPercentCompleteToStatusDate()
	{
		BOOL result;
		GetProperty(0x5a, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSpreadPercentCompleteToStatusDate(BOOL propVal)
	{
		SetProperty(0x5a, VT_BOOL, propVal);
	}
	BOOL GetAutoCalcCosts()
	{
		BOOL result;
		GetProperty(0x54, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoCalcCosts(BOOL propVal)
	{
		SetProperty(0x54, VT_BOOL, propVal);
	}
	BOOL GetShowExternalSuccessors()
	{
		BOOL result;
		GetProperty(0x55, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowExternalSuccessors(BOOL propVal)
	{
		SetProperty(0x55, VT_BOOL, propVal);
	}
	BOOL GetShowExternalPredecessors()
	{
		BOOL result;
		GetProperty(0x56, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowExternalPredecessors(BOOL propVal)
	{
		SetProperty(0x56, VT_BOOL, propVal);
	}
	BOOL GetShowCrossProjectLinksInfo()
	{
		BOOL result;
		GetProperty(0x57, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowCrossProjectLinksInfo(BOOL propVal)
	{
		SetProperty(0x57, VT_BOOL, propVal);
	}
	BOOL GetAcceptNewExternalData()
	{
		BOOL result;
		GetProperty(0x58, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAcceptNewExternalData(BOOL propVal)
	{
		SetProperty(0x58, VT_BOOL, propVal);
	}
	long GetPhoneticType()
	{
		long result;
		GetProperty(0x59, VT_I4, (void*)&result);
		return result;
	}
	void SetPhoneticType(long propVal)
	{
		SetProperty(0x59, VT_I4, propVal);
	}
	long GetWorkgroupMessages()
	{
		long result;
		GetProperty(0x5c, VT_I4, (void*)&result);
		return result;
	}
	void SetWorkgroupMessages(long propVal)
	{
		SetProperty(0x5c, VT_I4, propVal);
	}
	CString GetServerURL()
	{
		CString result;
		GetProperty(0x5d, VT_BSTR, (void*)&result);
		return result;
	}
	void SetServerURL(CString propVal)
	{
		SetProperty(0x5d, VT_BSTR, propVal);
	}
	CString GetServerPath()
	{
		CString result;
		GetProperty(0x5e, VT_BSTR, (void*)&result);
		return result;
	}
	void SetServerPath(CString propVal)
	{
		SetProperty(0x5e, VT_BSTR, propVal);
	}
	BOOL GetReceiveNotifications()
	{
		BOOL result;
		GetProperty(0x5f, VT_BOOL, (void*)&result);
		return result;
	}
	void SetReceiveNotifications(BOOL propVal)
	{
		SetProperty(0x5f, VT_BOOL, propVal);
	}
	BOOL GetSendHyperlinkNote()
	{
		BOOL result;
		GetProperty(0x60, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSendHyperlinkNote(BOOL propVal)
	{
		SetProperty(0x60, VT_BOOL, propVal);
	}
	long GetHyperlinkColor()
	{
		long result;
		GetProperty(0x61, VT_I4, (void*)&result);
		return result;
	}
	void SetHyperlinkColor(long propVal)
	{
		SetProperty(0x61, VT_I4, propVal);
	}
	long GetFollowedHyperlinkColor()
	{
		long result;
		GetProperty(0x62, VT_I4, (void*)&result);
		return result;
	}
	void SetFollowedHyperlinkColor(long propVal)
	{
		SetProperty(0x62, VT_I4, propVal);
	}
	BOOL GetUnderlineHyperlinks()
	{
		BOOL result;
		GetProperty(0x63, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUnderlineHyperlinks(BOOL propVal)
	{
		SetProperty(0x63, VT_BOOL, propVal);
	}
	long GetAskForCompletedWork()
	{
		long result;
		GetProperty(0x1770, VT_I4, (void*)&result);
		return result;
	}
	void SetAskForCompletedWork(long propVal)
	{
		SetProperty(0x1770, VT_I4, propVal);
	}
	BOOL GetTrackOvertimeWork()
	{
		BOOL result;
		GetProperty(0x1771, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTrackOvertimeWork(BOOL propVal)
	{
		SetProperty(0x1771, VT_BOOL, propVal);
	}
	BOOL GetTeamMembersCanDeclineTasks()
	{
		BOOL result;
		GetProperty(0x1772, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTeamMembersCanDeclineTasks(BOOL propVal)
	{
		SetProperty(0x1772, VT_BOOL, propVal);
	}
	BOOL GetShowEstimatedDuration()
	{
		BOOL result;
		GetProperty(0x1774, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowEstimatedDuration(BOOL propVal)
	{
		SetProperty(0x1774, VT_BOOL, propVal);
	}
	BOOL GetNewTasksEstimated()
	{
		BOOL result;
		GetProperty(0x1775, VT_BOOL, (void*)&result);
		return result;
	}
	void SetNewTasksEstimated(BOOL propVal)
	{
		SetProperty(0x1775, VT_BOOL, propVal);
	}
	BOOL GetWBSCodeGenerate()
	{
		BOOL result;
		GetProperty(0x177d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetWBSCodeGenerate(BOOL propVal)
	{
		SetProperty(0x177d, VT_BOOL, propVal);
	}
	BOOL GetWBSVerifyUniqueness()
	{
		BOOL result;
		GetProperty(0x177e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetWBSVerifyUniqueness(BOOL propVal)
	{
		SetProperty(0x177e, VT_BOOL, propVal);
	}
	BOOL GetUpdateProjOnSave()
	{
		BOOL result;
		GetProperty(0x1781, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUpdateProjOnSave(BOOL propVal)
	{
		SetProperty(0x1781, VT_BOOL, propVal);
	}
	long GetServerIdentification()
	{
		long result;
		GetProperty(0x1780, VT_I4, (void*)&result);
		return result;
	}
	void SetServerIdentification(long propVal)
	{
		SetProperty(0x1780, VT_I4, propVal);
	}
	BOOL GetVBASigned()
	{
		BOOL result;
		GetProperty(0x1782, VT_BOOL, (void*)&result);
		return result;
	}
	void SetVBASigned(BOOL propVal)
	{
		SetProperty(0x1782, VT_BOOL, propVal);
	}
	BOOL GetExpandDatabaseTimephasedData()
	{
		BOOL result;
		GetProperty(0x1784, VT_BOOL, (void*)&result);
		return result;
	}
	void SetExpandDatabaseTimephasedData(BOOL propVal)
	{
		SetProperty(0x1784, VT_BOOL, propVal);
	}
	VARIANT GetDatabaseProjectUniqueID()
	{
		VARIANT result;
		GetProperty(0x1783, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDatabaseProjectUniqueID(VARIANT &propVal)
	{
		SetProperty(0x1783, VT_VARIANT, &propVal);
	}
	VARIANT GetActualWork()
	{
		VARIANT result;
		GetProperty(0x66, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetActualWork(VARIANT &propVal)
	{
		SetProperty(0x66, VT_VARIANT, &propVal);
	}
	VARIANT GetCost1()
	{
		VARIANT result;
		GetProperty(0xce, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetCost1(VARIANT &propVal)
	{
		SetProperty(0xce, VT_VARIANT, &propVal);
	}
	VARIANT GetCost2()
	{
		VARIANT result;
		GetProperty(0xcf, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetCost2(VARIANT &propVal)
	{
		SetProperty(0xcf, VT_VARIANT, &propVal);
	}
	VARIANT GetCost3()
	{
		VARIANT result;
		GetProperty(0xd0, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetCost3(VARIANT &propVal)
	{
		SetProperty(0xd0, VT_VARIANT, &propVal);
	}
	VARIANT GetBaselineWork()
	{
		VARIANT result;
		GetProperty(0x65, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetBaselineWork(VARIANT &propVal)
	{
		SetProperty(0x65, VT_VARIANT, &propVal);
	}
	VARIANT GetBaselineCost()
	{
		VARIANT result;
		GetProperty(0x6a, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetBaselineCost(VARIANT &propVal)
	{
		SetProperty(0x6a, VT_VARIANT, &propVal);
	}
	VARIANT GetFixedCost()
	{
		VARIANT result;
		GetProperty(0x6c, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFixedCost(VARIANT &propVal)
	{
		SetProperty(0x6c, VT_VARIANT, &propVal);
	}
	CString GetWBS()
	{
		CString result;
		GetProperty(0x74, VT_BSTR, (void*)&result);
		return result;
	}
	void SetWBS(CString propVal)
	{
		SetProperty(0x74, VT_BSTR, propVal);
	}
	VARIANT GetDelay()
	{
		VARIANT result;
		GetProperty(0x78, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDelay(VARIANT &propVal)
	{
		SetProperty(0x78, VT_VARIANT, &propVal);
	}
	VARIANT GetPriority()
	{
		VARIANT result;
		GetProperty(0x7d, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetPriority(VARIANT &propVal)
	{
		SetProperty(0x7d, VT_VARIANT, &propVal);
	}
	VARIANT GetDuration1()
	{
		VARIANT result;
		GetProperty(0xcb, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDuration1(VARIANT &propVal)
	{
		SetProperty(0xcb, VT_VARIANT, &propVal);
	}
	VARIANT GetDuration2()
	{
		VARIANT result;
		GetProperty(0xcc, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDuration2(VARIANT &propVal)
	{
		SetProperty(0xcc, VT_VARIANT, &propVal);
	}
	VARIANT GetDuration3()
	{
		VARIANT result;
		GetProperty(0xcd, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDuration3(VARIANT &propVal)
	{
		SetProperty(0xcd, VT_VARIANT, &propVal);
	}
	VARIANT GetPercentWorkComplete()
	{
		VARIANT result;
		GetProperty(0x85, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetPercentWorkComplete(VARIANT &propVal)
	{
		SetProperty(0x85, VT_VARIANT, &propVal);
	}
	VARIANT GetFixedDuration()
	{
		VARIANT result;
		GetProperty(0x86, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFixedDuration(VARIANT &propVal)
	{
		SetProperty(0x86, VT_VARIANT, &propVal);
	}
	VARIANT GetBaselineStart()
	{
		VARIANT result;
		GetProperty(0x8f, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetBaselineStart(VARIANT &propVal)
	{
		SetProperty(0x8f, VT_VARIANT, &propVal);
	}
	VARIANT GetBaselineFinish()
	{
		VARIANT result;
		GetProperty(0x90, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetBaselineFinish(VARIANT &propVal)
	{
		SetProperty(0x90, VT_VARIANT, &propVal);
	}
	CString GetText1()
	{
		CString result;
		GetProperty(0x97, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText1(CString propVal)
	{
		SetProperty(0x97, VT_BSTR, propVal);
	}
	VARIANT GetStart1()
	{
		VARIANT result;
		GetProperty(0x98, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStart1(VARIANT &propVal)
	{
		SetProperty(0x98, VT_VARIANT, &propVal);
	}
	VARIANT GetFinish1()
	{
		VARIANT result;
		GetProperty(0x99, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFinish1(VARIANT &propVal)
	{
		SetProperty(0x99, VT_VARIANT, &propVal);
	}
	CString GetText2()
	{
		CString result;
		GetProperty(0x9a, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText2(CString propVal)
	{
		SetProperty(0x9a, VT_BSTR, propVal);
	}
	VARIANT GetStart2()
	{
		VARIANT result;
		GetProperty(0x9b, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStart2(VARIANT &propVal)
	{
		SetProperty(0x9b, VT_VARIANT, &propVal);
	}
	VARIANT GetFinish2()
	{
		VARIANT result;
		GetProperty(0x9c, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFinish2(VARIANT &propVal)
	{
		SetProperty(0x9c, VT_VARIANT, &propVal);
	}
	CString GetText3()
	{
		CString result;
		GetProperty(0x9d, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText3(CString propVal)
	{
		SetProperty(0x9d, VT_BSTR, propVal);
	}
	VARIANT GetStart3()
	{
		VARIANT result;
		GetProperty(0x9e, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStart3(VARIANT &propVal)
	{
		SetProperty(0x9e, VT_VARIANT, &propVal);
	}
	VARIANT GetFinish3()
	{
		VARIANT result;
		GetProperty(0x9f, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFinish3(VARIANT &propVal)
	{
		SetProperty(0x9f, VT_VARIANT, &propVal);
	}
	CString GetText4()
	{
		CString result;
		GetProperty(0xa0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText4(CString propVal)
	{
		SetProperty(0xa0, VT_BSTR, propVal);
	}
	VARIANT GetStart4()
	{
		VARIANT result;
		GetProperty(0xa1, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStart4(VARIANT &propVal)
	{
		SetProperty(0xa1, VT_VARIANT, &propVal);
	}
	VARIANT GetFinish4()
	{
		VARIANT result;
		GetProperty(0xa2, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFinish4(VARIANT &propVal)
	{
		SetProperty(0xa2, VT_VARIANT, &propVal);
	}
	CString GetText5()
	{
		CString result;
		GetProperty(0xa3, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText5(CString propVal)
	{
		SetProperty(0xa3, VT_BSTR, propVal);
	}
	VARIANT GetStart5()
	{
		VARIANT result;
		GetProperty(0xa4, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStart5(VARIANT &propVal)
	{
		SetProperty(0xa4, VT_VARIANT, &propVal);
	}
	VARIANT GetFinish5()
	{
		VARIANT result;
		GetProperty(0xa5, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFinish5(VARIANT &propVal)
	{
		SetProperty(0xa5, VT_VARIANT, &propVal);
	}
	CString GetText6()
	{
		CString result;
		GetProperty(0xa6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText6(CString propVal)
	{
		SetProperty(0xa6, VT_BSTR, propVal);
	}
	CString GetText7()
	{
		CString result;
		GetProperty(0xa7, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText7(CString propVal)
	{
		SetProperty(0xa7, VT_BSTR, propVal);
	}
	CString GetText8()
	{
		CString result;
		GetProperty(0xa8, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText8(CString propVal)
	{
		SetProperty(0xa8, VT_BSTR, propVal);
	}
	CString GetText9()
	{
		CString result;
		GetProperty(0xa9, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText9(CString propVal)
	{
		SetProperty(0xa9, VT_BSTR, propVal);
	}
	CString GetText10()
	{
		CString result;
		GetProperty(0xaa, VT_BSTR, (void*)&result);
		return result;
	}
	void SetText10(CString propVal)
	{
		SetProperty(0xaa, VT_BSTR, propVal);
	}
	VARIANT GetMarked()
	{
		VARIANT result;
		GetProperty(0xab, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetMarked(VARIANT &propVal)
	{
		SetProperty(0xab, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag1()
	{
		VARIANT result;
		GetProperty(0xac, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag1(VARIANT &propVal)
	{
		SetProperty(0xac, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag2()
	{
		VARIANT result;
		GetProperty(0xad, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag2(VARIANT &propVal)
	{
		SetProperty(0xad, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag3()
	{
		VARIANT result;
		GetProperty(0xae, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag3(VARIANT &propVal)
	{
		SetProperty(0xae, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag4()
	{
		VARIANT result;
		GetProperty(0xaf, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag4(VARIANT &propVal)
	{
		SetProperty(0xaf, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag5()
	{
		VARIANT result;
		GetProperty(0xb0, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag5(VARIANT &propVal)
	{
		SetProperty(0xb0, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag6()
	{
		VARIANT result;
		GetProperty(0xb1, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag6(VARIANT &propVal)
	{
		SetProperty(0xb1, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag7()
	{
		VARIANT result;
		GetProperty(0xb2, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag7(VARIANT &propVal)
	{
		SetProperty(0xb2, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag8()
	{
		VARIANT result;
		GetProperty(0xb3, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag8(VARIANT &propVal)
	{
		SetProperty(0xb3, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag9()
	{
		VARIANT result;
		GetProperty(0xb4, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag9(VARIANT &propVal)
	{
		SetProperty(0xb4, VT_VARIANT, &propVal);
	}
	VARIANT GetFlag10()
	{
		VARIANT result;
		GetProperty(0xb5, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetFlag10(VARIANT &propVal)
	{
		SetProperty(0xb5, VT_VARIANT, &propVal);
	}
	VARIANT GetRollup()
	{
		VARIANT result;
		GetProperty(0xb6, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetRollup(VARIANT &propVal)
	{
		SetProperty(0xb6, VT_VARIANT, &propVal);
	}
	double GetNumber1()
	{
		double result;
		GetProperty(0xbb, VT_R8, (void*)&result);
		return result;
	}
	void SetNumber1(double propVal)
	{
		SetProperty(0xbb, VT_R8, propVal);
	}
	double GetNumber2()
	{
		double result;
		GetProperty(0xbc, VT_R8, (void*)&result);
		return result;
	}
	void SetNumber2(double propVal)
	{
		SetProperty(0xbc, VT_R8, propVal);
	}
	double GetNumber3()
	{
		double result;
		GetProperty(0xbd, VT_R8, (void*)&result);
		return result;
	}
	void SetNumber3(double propVal)
	{
		SetProperty(0xbd, VT_R8, propVal);
	}
	double GetNumber4()
	{
		double result;
		GetProperty(0xbe, VT_R8, (void*)&result);
		return result;
	}
	void SetNumber4(double propVal)
	{
		SetProperty(0xbe, VT_R8, propVal);
	}
	double GetNumber5()
	{
		double result;
		GetProperty(0xbf, VT_R8, (void*)&result);
		return result;
	}
	void SetNumber5(double propVal)
	{
		SetProperty(0xbf, VT_R8, propVal);
	}
	CString GetNotes()
	{
		CString result;
		GetProperty(0x73, VT_BSTR, (void*)&result);
		return result;
	}
	void SetNotes(CString propVal)
	{
		SetProperty(0x73, VT_BSTR, propVal);
	}
	CString GetContact()
	{
		CString result;
		GetProperty(0xd4, VT_BSTR, (void*)&result);
		return result;
	}
	void SetContact(CString propVal)
	{
		SetProperty(0xd4, VT_BSTR, propVal);
	}
	VARIANT GetHideBar()
	{
		VARIANT result;
		GetProperty(0xd1, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetHideBar(VARIANT &propVal)
	{
		SetProperty(0xd1, VT_VARIANT, &propVal);
	}
	CString GetCurrencySymbol()
	{
		CString result;
		GetProperty(0x13ed, VT_BSTR, (void*)&result);
		return result;
	}
	void SetCurrencySymbol(CString propVal)
	{
		SetProperty(0x13ed, VT_BSTR, propVal);
	}
	long GetCurrencySymbolPosition()
	{
		long result;
		GetProperty(0x13ee, VT_I4, (void*)&result);
		return result;
	}
	void SetCurrencySymbolPosition(long propVal)
	{
		SetProperty(0x13ee, VT_I4, propVal);
	}
	short GetCurrencyDigits()
	{
		short result;
		GetProperty(0x13ef, VT_I2, (void*)&result);
		return result;
	}
	void SetCurrencyDigits(short propVal)
	{
		SetProperty(0x13ef, VT_I2, propVal);
	}
	long GetShowCriticalSlack()
	{
		long result;
		GetProperty(0x13f3, VT_I4, (void*)&result);
		return result;
	}
	void SetShowCriticalSlack(long propVal)
	{
		SetProperty(0x13f3, VT_I4, propVal);
	}
	long GetDefaultDurationUnits()
	{
		long result;
		GetProperty(0x13f4, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultDurationUnits(long propVal)
	{
		SetProperty(0x13f4, VT_I4, propVal);
	}
	long GetDefaultWorkUnits()
	{
		long result;
		GetProperty(0x13f5, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultWorkUnits(long propVal)
	{
		SetProperty(0x13f5, VT_I4, propVal);
	}
	BOOL GetStartOnCurrentDate()
	{
		BOOL result;
		GetProperty(0x13f6, VT_BOOL, (void*)&result);
		return result;
	}
	void SetStartOnCurrentDate(BOOL propVal)
	{
		SetProperty(0x13f6, VT_BOOL, propVal);
	}
	BOOL GetAutoTrack()
	{
		BOOL result;
		GetProperty(0x13f8, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoTrack(BOOL propVal)
	{
		SetProperty(0x13f8, VT_BOOL, propVal);
	}
	BOOL GetAutoSplitTasks()
	{
		BOOL result;
		GetProperty(0x13f9, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoSplitTasks(BOOL propVal)
	{
		SetProperty(0x13f9, VT_BOOL, propVal);
	}
	BOOL GetAutoLinkTasks()
	{
		BOOL result;
		GetProperty(0x13fa, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoLinkTasks(BOOL propVal)
	{
		SetProperty(0x13fa, VT_BOOL, propVal);
	}
	VARIANT GetDefaultStartTime()
	{
		VARIANT result;
		GetProperty(0x13fb, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDefaultStartTime(VARIANT &propVal)
	{
		SetProperty(0x13fb, VT_VARIANT, &propVal);
	}
	VARIANT GetDefaultFinishTime()
	{
		VARIANT result;
		GetProperty(0x1403, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDefaultFinishTime(VARIANT &propVal)
	{
		SetProperty(0x1403, VT_VARIANT, &propVal);
	}
	double GetHoursPerDay()
	{
		double result;
		GetProperty(0x13fd, VT_R8, (void*)&result);
		return result;
	}
	void SetHoursPerDay(double propVal)
	{
		SetProperty(0x13fd, VT_R8, propVal);
	}
	double GetHoursPerWeek()
	{
		double result;
		GetProperty(0x13fe, VT_R8, (void*)&result);
		return result;
	}
	void SetHoursPerWeek(double propVal)
	{
		SetProperty(0x13fe, VT_R8, propVal);
	}
	double GetDaysPerMonth()
	{
		double result;
		GetProperty(0x1408, VT_R8, (void*)&result);
		return result;
	}
	void SetDaysPerMonth(double propVal)
	{
		SetProperty(0x1408, VT_R8, propVal);
	}
	VARIANT GetDefaultResourceStandardRate()
	{
		VARIANT result;
		GetProperty(0x13ff, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDefaultResourceStandardRate(VARIANT &propVal)
	{
		SetProperty(0x13ff, VT_VARIANT, &propVal);
	}
	VARIANT GetDefaultResourceOvertimeRate()
	{
		VARIANT result;
		GetProperty(0x1400, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetDefaultResourceOvertimeRate(VARIANT &propVal)
	{
		SetProperty(0x1400, VT_VARIANT, &propVal);
	}
	BOOL GetDisplayProjectSummaryTask()
	{
		BOOL result;
		GetProperty(0x1401, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayProjectSummaryTask(BOOL propVal)
	{
		SetProperty(0x1401, VT_BOOL, propVal);
	}
	BOOL GetAutoAddResources()
	{
		BOOL result;
		GetProperty(0x1402, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoAddResources(BOOL propVal)
	{
		SetProperty(0x1402, VT_BOOL, propVal);
	}
	long GetStartWeekOn()
	{
		long result;
		GetProperty(0x1406, VT_I4, (void*)&result);
		return result;
	}
	void SetStartWeekOn(long propVal)
	{
		SetProperty(0x1406, VT_I4, propVal);
	}
	long GetStartYearIn()
	{
		long result;
		GetProperty(0x1407, VT_I4, (void*)&result);
		return result;
	}
	void SetStartYearIn(long propVal)
	{
		SetProperty(0x1407, VT_I4, propVal);
	}
	BOOL GetAllowTaskDelegation()
	{
		BOOL result;
		GetProperty(0x1409, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAllowTaskDelegation(BOOL propVal)
	{
		SetProperty(0x1409, VT_BOOL, propVal);
	}
	CString GetName()
	{
		CString result;
		GetProperty(0x0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetName(CString propVal)
	{
		SetProperty(0x0, VT_BSTR, propVal);
	}
	long GetPublishInformationOnSave()
	{
		long result;
		GetProperty(0x178e, VT_I4, (void*)&result);
		return result;
	}
	void SetPublishInformationOnSave(long propVal)
	{
		SetProperty(0x178e, VT_I4, propVal);
	}
	CString GetProjectGuideFunctionalLayoutPage()
	{
		CString result;
		GetProperty(0x1789, VT_BSTR, (void*)&result);
		return result;
	}
	void SetProjectGuideFunctionalLayoutPage(CString propVal)
	{
		SetProperty(0x1789, VT_BSTR, propVal);
	}
	CString GetProjectGuideSaveBuffer()
	{
		CString result;
		GetProperty(0x178c, VT_BSTR, (void*)&result);
		return result;
	}
	void SetProjectGuideSaveBuffer(CString propVal)
	{
		SetProperty(0x178c, VT_BSTR, propVal);
	}
	CString GetProjectGuideContent()
	{
		CString result;
		GetProperty(0x178d, VT_BSTR, (void*)&result);
		return result;
	}
	void SetProjectGuideContent(CString propVal)
	{
		SetProperty(0x178d, VT_BSTR, propVal);
	}
	BOOL GetProjectServerUsedForTracking()
	{
		BOOL result;
		GetProperty(0x1793, VT_BOOL, (void*)&result);
		return result;
	}
	void SetProjectServerUsedForTracking(BOOL propVal)
	{
		SetProperty(0x1793, VT_BOOL, propVal);
	}
	long GetTrackingMethod()
	{
		long result;
		GetProperty(0x1794, VT_I4, (void*)&result);
		return result;
	}
	void SetTrackingMethod(long propVal)
	{
		SetProperty(0x1794, VT_I4, propVal);
	}
	BOOL GetMoveCompleted()
	{
		BOOL result;
		GetProperty(0x1798, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMoveCompleted(BOOL propVal)
	{
		SetProperty(0x1798, VT_BOOL, propVal);
	}
	BOOL GetAndMoveRemaining()
	{
		BOOL result;
		GetProperty(0x1799, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAndMoveRemaining(BOOL propVal)
	{
		SetProperty(0x1799, VT_BOOL, propVal);
	}
	BOOL GetMoveRemaining()
	{
		BOOL result;
		GetProperty(0x179a, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMoveRemaining(BOOL propVal)
	{
		SetProperty(0x179a, VT_BOOL, propVal);
	}
	BOOL GetAndMoveCompleted()
	{
		BOOL result;
		GetProperty(0x179b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAndMoveCompleted(BOOL propVal)
	{
		SetProperty(0x179b, VT_BOOL, propVal);
	}
	long GetDefaultEarnedValueMethod()
	{
		long result;
		GetProperty(0x179c, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultEarnedValueMethod(long propVal)
	{
		SetProperty(0x179c, VT_I4, propVal);
	}
	long GetEarnedValueBaseline()
	{
		long result;
		GetProperty(0x179d, VT_I4, (void*)&result);
		return result;
	}
	void SetEarnedValueBaseline(long propVal)
	{
		SetProperty(0x179d, VT_I4, propVal);
	}
	BOOL GetProjectGuideUseDefaultFunctionalLayoutPage()
	{
		BOOL result;
		GetProperty(0x179e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetProjectGuideUseDefaultFunctionalLayoutPage(BOOL propVal)
	{
		SetProperty(0x179e, VT_BOOL, propVal);
	}
	BOOL GetProjectGuideUseDefaultContent()
	{
		BOOL result;
		GetProperty(0x179f, VT_BOOL, (void*)&result);
		return result;
	}
	void SetProjectGuideUseDefaultContent(BOOL propVal)
	{
		SetProperty(0x179f, VT_BOOL, propVal);
	}
	BOOL GetEnterpriseActualsSynched()
	{
		BOOL result;
		GetProperty(0x17a3, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnterpriseActualsSynched(BOOL propVal)
	{
		SetProperty(0x17a3, VT_BOOL, propVal);
	}
	BOOL GetRemoveFileProperties()
	{
		BOOL result;
		GetProperty(0x17a6, VT_BOOL, (void*)&result);
		return result;
	}
	void SetRemoveFileProperties(BOOL propVal)
	{
		SetProperty(0x17a6, VT_BOOL, propVal);
	}
	BOOL GetAdministrativeProject()
	{
		BOOL result;
		GetProperty(0x17a7, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAdministrativeProject(BOOL propVal)
	{
		SetProperty(0x17a7, VT_BOOL, propVal);
	}
	Windows2 * GetWindows2()
	{
		Windows2 * result;
		GetProperty(0x17a8, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetWindows2(Windows2 * propVal)
	{
		SetProperty(0x17a8, VT_DISPATCH, propVal);
	}
	CString GetCurrencyCode()
	{
		CString result;
		GetProperty(0x140b, VT_BSTR, (void*)&result);
		return result;
	}
	void SetCurrencyCode(CString propVal)
	{
		SetProperty(0x140b, VT_BSTR, propVal);
	}
	long GetTaskErrorCount()
	{
		long result;
		GetProperty(0x17db, VT_I4, (void*)&result);
		return result;
	}
	void SetTaskErrorCount(long propVal)
	{
		SetProperty(0x17db, VT_I4, propVal);
	}
	BOOL GetIsTemplate()
	{
		BOOL result;
		GetProperty(0x17df, VT_BOOL, (void*)&result);
		return result;
	}
	void SetIsTemplate(BOOL propVal)
	{
		SetProperty(0x17df, VT_BOOL, propVal);
	}

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CMSProject wrapper class

class CMSProject : public COleDispatchDriver
{
public:
	CMSProject(){} // Calls COleDispatchDriver default constructor
	CMSProject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CMSProject(const CMSProject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// _MSProject methods
public:
	LPDISPATCH get_Windows()
	{
		LPDISPATCH result;
		InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CommandBars()
	{
		LPDISPATCH result;
		InvokeHelper(0x13b1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_AnswerWizard()
	{
		LPDISPATCH result;
		InvokeHelper(0x13c0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Quit(long SaveChanges)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1390, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SaveChanges);
	}
	CString get_OperatingSystem()
	{
		CString result;
		InvokeHelper(0x13a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT DateAdd(VARIANT& StartDate, VARIANT& Duration, VARIANT& Calendar)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x139f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &StartDate, &Duration, &Calendar);
		return result;
	}
	VARIANT DateSubtract(VARIANT& FinishDate, VARIANT& Duration, VARIANT& Calendar)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &FinishDate, &Duration, &Calendar);
		return result;
	}
	VARIANT DateDifference(VARIANT& StartDate, VARIANT& FinishDate, VARIANT& Calendar)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &StartDate, &FinishDate, &Calendar);
		return result;
	}
	CString DurationFormat(VARIANT& Duration, VARIANT& Units)
	{
		CString result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, &Duration, &Units);
		return result;
	}
	VARIANT DurationValue(LPCTSTR Duration)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13a3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Duration);
		return result;
	}
	VARIANT DateFormat(VARIANT& Date, VARIANT& Format)
	{
		VARIANT result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13a7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, &Date, &Format);
		return result;
	}
	void MailLogon(VARIANT& Name, VARIANT& Password, VARIANT& DownloadNewMail)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13aa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Name, &Password, &DownloadNewMail);
	}
	void MailLogoff()
	{
		InvokeHelper(0x13ab, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString MailSession()
	{
		CString result;
		InvokeHelper(0x13ac, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long MailSystem()
	{
		long result;
		InvokeHelper(0x13ad, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT TimescaledData(long TaskID, long ResourceID, VARIANT& StartDate, VARIANT& EndDate, long Type, long TimeScaleUnit, VARIANT& Count)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x1324, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, TaskID, ResourceID, &StartDate, &EndDate, Type, TimeScaleUnit, &Count);
		return result;
	}
	CString CustomFieldGetName(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13af, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	void Run(LPCTSTR Name, VARIANT& Arg1, VARIANT& Arg2, VARIANT& Arg3, VARIANT& Arg4, VARIANT& Arg5, VARIANT& Arg6, VARIANT& Arg7, VARIANT& Arg8, VARIANT& Arg9, VARIANT& Arg10, VARIANT& Arg11, VARIANT& Arg12, VARIANT& Arg13, VARIANT& Arg14, VARIANT& Arg15, VARIANT& Arg16, VARIANT& Arg17, VARIANT& Arg18, VARIANT& Arg19, VARIANT& Arg20, VARIANT& Arg21, VARIANT& Arg22, VARIANT& Arg23, VARIANT& Arg24, VARIANT& Arg25, VARIANT& Arg26, VARIANT& Arg27, VARIANT& Arg28, VARIANT& Arg29, VARIANT& Arg30)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13b9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
	}
	void ActivateMicrosoftApp(long Index)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13bc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index);
	}
	CString get_FileFormatID(LPCTSTR Name, VARIANT& UserID, VARIANT& DatabasePassWord)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13bd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, Name, &UserID, &DatabasePassWord);
		return result;
	}
	CString get_FileBuildID(LPCTSTR Name, VARIANT& UserID, VARIANT& DatabasePassWord)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x13be, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, Name, &UserID, &DatabasePassWord);
		return result;
	}
	LPDISPATCH get_COMAddIns()
	{
		LPDISPATCH result;
		InvokeHelper(0x13bf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long BoxGetXPosition(long TaskID, VARIANT& ProjectName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x13c1, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TaskID, &ProjectName);
		return result;
	}
	long BoxGetYPosition(long TaskID, VARIANT& ProjectName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x13c2, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TaskID, &ProjectName);
		return result;
	}
	CString CustomFieldGetFormula(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	CString CustomFieldValueListGetItem(long FieldID, long Item, long Index)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x13c4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID, Item, Index);
		return result;
	}
	void GoalAreaHighlight(long goalArea)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, goalArea);
	}
	void SetSidepaneStateButton(BOOL DisplayState)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x13c8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DisplayState);
	}
	void GoalAreaTaskHighlight(long TaskID)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13c9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TaskID);
	}
	long FieldNameToFieldConstant(LPCTSTR FieldName, long FieldType)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x13ca, DISPATCH_METHOD, VT_I4, (void*)&result, parms, FieldName, FieldType);
		return result;
	}
	CString FieldConstantToFieldName(long Field)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x13cb, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Field);
		return result;
	}
	CString GetProjectServerSettings(LPCTSTR RequestXML, VARIANT& Project)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x13d3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, RequestXML, &Project);
		return result;
	}
	void UnloadWebBrowserControl(VARIANT * Window)
	{
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0x13d4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Window);
	}
	long OpenXML(LPCTSTR XML)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13d7, DISPATCH_METHOD, VT_I4, (void*)&result, parms, XML);
		return result;
	}
	long GetProjectServerVersion(LPCTSTR ServerURL)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13d8, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ServerURL);
		return result;
	}
	VARIANT UpdateFromProjectServer(LPCTSTR DataFile)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13da, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, DataFile);
		return result;
	}
	long LocaleID()
	{
		long result;
		InvokeHelper(0x13dc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void EnterpriseMakeServerURLTrusted()
	{
		InvokeHelper(0x13dd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL IsURLTrusted(LPCTSTR URL)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13de, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, URL);
		return result;
	}
	void PublishNewAndChangedAssignments(BOOL ShowDialog, long ItemsScope, BOOL NotifyResources, VARIANT& NotificationText)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_VARIANT ;
		InvokeHelper(0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyResources, &NotificationText);
	}
	void PublishProjectPlan(BOOL ShowDialog, BOOL PublishFullPlan)
	{
		static BYTE parms[] = VTS_BOOL VTS_BOOL ;
		InvokeHelper(0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, PublishFullPlan);
	}
	void PublishAllInformation()
	{
		InvokeHelper(0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void RequestProgressInformation(BOOL ShowDialog, long ItemsScope, BOOL NotifyTaskLead, VARIANT& NotificationText, VARIANT& ReportingPeriodFrom, VARIANT& ReportingPeriodTo)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyTaskLead, &NotificationText, &ReportingPeriodFrom, &ReportingPeriodTo);
	}
	void RepublishAssignments(BOOL ShowDialog, long ItemsScope, BOOL NotifyResources, BOOL OverwriteActuals, BOOL BecomeManager, VARIANT& NotificationText)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_VARIANT ;
		InvokeHelper(0x1455, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ShowDialog, ItemsScope, NotifyResources, OverwriteActuals, BecomeManager, &NotificationText);
	}
	long RegisterProject(BOOL WaitForCompletion)
	{
		long result;
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x1456, DISPATCH_METHOD, VT_I4, (void*)&result, parms, WaitForCompletion);
		return result;
	}
	BOOL SaveProjectIfDirty(LPCTSTR AlertText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1457, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, AlertText);
		return result;
	}
	BOOL IsOfficeTaskPaneVisible()
	{
		BOOL result;
		InvokeHelper(0x1459, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void OfficeTaskPaneHide()
	{
		InvokeHelper(0x145a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetCurrentTheme()
	{
		long result;
		InvokeHelper(0x145b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Windows2()
	{
		LPDISPATCH result;
		InvokeHelper(0x145c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL Message(LPCTSTR Message, long Type, VARIANT& YesText, VARIANT& NoText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Message, Type, &YesText, &NoText);
		return result;
	}
	BOOL Alerts(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL FileNew(VARIANT& SummaryInfo, VARIANT& Template, VARIANT& FileNewDialog, VARIANT& FileNewWorkpane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SummaryInfo, &Template, &FileNewDialog, &FileNewWorkpane);
		return result;
	}
	BOOL FileProperties()
	{
		BOOL result;
		InvokeHelper(0x272, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FileOpen(VARIANT& Name, VARIANT& ReadOnly, VARIANT& Merge, VARIANT& TaskInformation, VARIANT& Table, VARIANT& Sheet, VARIANT& NoAuto, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, long openPool, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& XMLName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ReadOnly, &Merge, &TaskInformation, &Table, &Sheet, &NoAuto, &UserID, &DatabasePassWord, &FormatID, &Map, openPool, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &XMLName);
		return result;
	}
	BOOL Zoom()
	{
		BOOL result;
		InvokeHelper(0x132, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomTimescale(VARIANT& Duration, VARIANT& Entire, VARIANT& Selection, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x133, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Duration, &Entire, &Selection, &Reset);
		return result;
	}
	BOOL BoxZoom(VARIANT& Percent, VARIANT& Entire)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x134, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Percent, &Entire);
		return result;
	}
	BOOL FileClose(long Save, VARIANT& NoAuto)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &NoAuto);
		return result;
	}
	BOOL FileCloseAll(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL ResourceSharing(VARIANT& Share, VARIANT& Name, VARIANT& Pool)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Share, &Name, &Pool);
		return result;
	}
	BOOL FileSave()
	{
		BOOL result;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FileSaveAs(VARIANT& Name, long Format, VARIANT& Backup, VARIANT& ReadOnly, VARIANT& TaskInformation, VARIANT& Filtered, VARIANT& Table, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& ClearBaseline, VARIANT& ClearActuals, VARIANT& ClearResourceRates, VARIANT& ClearFixedCosts, VARIANT& XMLName, VARIANT& ClearConfirmed)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Format, &Backup, &ReadOnly, &TaskInformation, &Filtered, &Table, &UserID, &DatabasePassWord, &FormatID, &Map, &Password, &WriteResPassword, &ClearBaseline, &ClearActuals, &ClearResourceRates, &ClearFixedCosts, &XMLName, &ClearConfirmed);
		return result;
	}
	BOOL FileSaveWorkspace(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePrint(VARIANT& FromPage, VARIANT& ToPage, VARIANT& PageBreaks, VARIANT& Draft, VARIANT& Copies, VARIANT& FromDate, VARIANT& ToDate, VARIANT& OnePageWide, VARIANT& Preview, VARIANT& Color, VARIANT& ShowIEPrintDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FromPage, &ToPage, &PageBreaks, &Draft, &Copies, &FromDate, &ToDate, &OnePageWide, &Preview, &Color, &ShowIEPrintDialog);
		return result;
	}
	BOOL ReportPrint(VARIANT& Name, VARIANT& FromPage, VARIANT& ToPage, VARIANT& PageBreaks, VARIANT& Draft, VARIANT& Copies, VARIANT& FromDate, VARIANT& ToDate, VARIANT& Preview, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &FromPage, &ToPage, &PageBreaks, &Draft, &Copies, &FromDate, &ToDate, &Preview, &Color);
		return result;
	}
	BOOL FilePrintPreview()
	{
		BOOL result;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ReportPrintPreview(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePrintSetup(VARIANT& Printer)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Printer);
		return result;
	}
	BOOL FilePageSetup(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FilePageSetupPage(VARIANT& Name, VARIANT& Portrait, VARIANT& PercentScale, VARIANT& PagesTall, VARIANT& PagesWide, long PaperSize, VARIANT& FirstPageNumber)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x933, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Portrait, &PercentScale, &PagesTall, &PagesWide, PaperSize, &FirstPageNumber);
		return result;
	}
	BOOL FilePageSetupMargins(VARIANT& Name, VARIANT& Top, VARIANT& Bottom, VARIANT& Left, VARIANT& Right, VARIANT& Borders)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x934, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Top, &Bottom, &Left, &Right, &Borders);
		return result;
	}
	BOOL FilePageSetupHeader(VARIANT& Name, long Alignment, VARIANT& Text)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x935, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Alignment, &Text);
		return result;
	}
	BOOL FilePageSetupFooter(VARIANT& Name, long Alignment, VARIANT& Text)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x936, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, Alignment, &Text);
		return result;
	}
	BOOL FilePageSetupLegend(VARIANT& Name, VARIANT& TextWidth, VARIANT& LegendOn, long Alignment, VARIANT& Text, VARIANT& LabelFontName, VARIANT& LabelFontSize, VARIANT& LabelFontBold, VARIANT& LabelFontItalic, VARIANT& LabelFontUnderline, long LabelFontColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x937, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &TextWidth, &LegendOn, Alignment, &Text, &LabelFontName, &LabelFontSize, &LabelFontBold, &LabelFontItalic, &LabelFontUnderline, LabelFontColor);
		return result;
	}
	BOOL FilePageSetupView(VARIANT& Name, VARIANT& AllSheetColumns, VARIANT& RepeatColumns, VARIANT& PrintNotes, VARIANT& PrintBlankPages, VARIANT& BestPageFitTimescale, VARIANT& PrintColumnTotals, VARIANT& PrintRowTotals)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x938, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &AllSheetColumns, &RepeatColumns, &PrintNotes, &PrintBlankPages, &BestPageFitTimescale, &PrintColumnTotals, &PrintRowTotals);
		return result;
	}
	BOOL FilePageSetupCalendar(VARIANT& Name, VARIANT& MonthsPerPage, VARIANT& WeeksPerPage, VARIANT& ScreenWeekHeight, VARIANT& OnlyDaysInMonth, VARIANT& OnlyWeeksInMonth, VARIANT& MonthPreviews, VARIANT& MonthTitle, VARIANT& AdditionalTasks, VARIANT& GroupAdditionalTasks, VARIANT& PrintNotes)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x939, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &MonthsPerPage, &WeeksPerPage, &ScreenWeekHeight, &OnlyDaysInMonth, &OnlyWeeksInMonth, &MonthPreviews, &MonthTitle, &AdditionalTasks, &GroupAdditionalTasks, &PrintNotes);
		return result;
	}
	BOOL FilePageSetupCalendarText(VARIANT& Name, VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x943, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color);
		return result;
	}
	BOOL MailOpen(VARIANT& Any)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Any);
		return result;
	}
	BOOL MailSend(VARIANT& To, VARIANT& Cc, VARIANT& Subject, VARIANT& Body, VARIANT& Enclosures, VARIANT& IncludeDocument, VARIANT& ReturnReceipt, VARIANT& Bcc, VARIANT& Urgent, VARIANT& SaveCopy, VARIANT& AddRecipient)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x78, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &To, &Cc, &Subject, &Body, &Enclosures, &IncludeDocument, &ReturnReceipt, &Bcc, &Urgent, &SaveCopy, &AddRecipient);
		return result;
	}
	BOOL MailSendScheduleNote(VARIANT& Manager, VARIANT& Resources, VARIANT& TaskContacts, VARIANT& Selection, VARIANT& IncludeDocument, VARIANT& IncludePicture, VARIANT& Body, VARIANT& Subject)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Manager, &Resources, &TaskContacts, &Selection, &IncludeDocument, &IncludePicture, &Body, &Subject);
		return result;
	}
	BOOL MailPostDocument()
	{
		BOOL result;
		InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ODBCManageDataSources()
	{
		BOOL result;
		InvokeHelper(0x84, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ODBCCreateDataSource()
	{
		BOOL result;
		InvokeHelper(0x85, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MailRoutingSlip(VARIANT& To, VARIANT& Subject, VARIANT& Body, VARIANT& AllAtOnce, VARIANT& ReturnWhenDone, VARIANT& TrackStatus, VARIANT& Clear, VARIANT& SendNow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &To, &Subject, &Body, &AllAtOnce, &ReturnWhenDone, &TrackStatus, &Clear, &SendNow);
		return result;
	}
	BOOL FileLoadLast(VARIANT& Number)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Number);
		return result;
	}
	BOOL FileExit(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL MenuBars()
	{
		BOOL result;
		InvokeHelper(0x818, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MenuBarEdit(VARIANT& Copy, VARIANT& Create, VARIANT& Name, VARIANT& NewName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Copy, &Create, &Name, &NewName);
		return result;
	}
	BOOL MenuBarApply(LPCTSTR Name, VARIANT& Default, VARIANT& NoFiles)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x81c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &Default, &NoFiles);
		return result;
	}
	BOOL EditUndo()
	{
		BOOL result;
		InvokeHelper(0xc9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCut()
	{
		BOOL result;
		InvokeHelper(0xca, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCopy()
	{
		BOOL result;
		InvokeHelper(0xcb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditCopyPicture(VARIANT& Object, VARIANT& ForPrinter, VARIANT& SelectedRows, VARIANT& FromDate, VARIANT& ToDate, VARIANT& FileName, long ScaleOption, VARIANT& MaxImageHeight, VARIANT& MaxImageWidth, VARIANT& MeasurementUnits)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Object, &ForPrinter, &SelectedRows, &FromDate, &ToDate, &FileName, ScaleOption, &MaxImageHeight, &MaxImageWidth, &MeasurementUnits);
		return result;
	}
	BOOL EditPaste()
	{
		BOOL result;
		InvokeHelper(0xce, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditPasteSpecial(VARIANT& Link, VARIANT& Type, VARIANT& DisplayAsIcon)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Link, &Type, &DisplayAsIcon);
		return result;
	}
	BOOL EditClearFormats()
	{
		BOOL result;
		InvokeHelper(0xf0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditClear(VARIANT& Contents, VARIANT& Formats, VARIANT& Notes, VARIANT& Hyperlinks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xcd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Contents, &Formats, &Notes, &Hyperlinks);
		return result;
	}
	BOOL RowClear()
	{
		BOOL result;
		InvokeHelper(0xef, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DDEPasteLink()
	{
		BOOL result;
		InvokeHelper(0xcf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditDelete()
	{
		BOOL result;
		InvokeHelper(0xd0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ColumnDelete()
	{
		BOOL result;
		InvokeHelper(0xe6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RowDelete()
	{
		BOOL result;
		InvokeHelper(0xe7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectVerb(VARIANT& Verb)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Verb);
		return result;
	}
	BOOL ObjectLinks()
	{
		BOOL result;
		InvokeHelper(0xee, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectChangeIcon()
	{
		BOOL result;
		InvokeHelper(0xeb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectConvert()
	{
		BOOL result;
		InvokeHelper(0xec, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditInsert()
	{
		BOOL result;
		InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ColumnInsert()
	{
		BOOL result;
		InvokeHelper(0xe4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RowInsert()
	{
		BOOL result;
		InvokeHelper(0xe5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LinkTasks()
	{
		BOOL result;
		InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LinkTasksEdit(long From, long To, VARIANT& Delete, VARIANT& Type, VARIANT& Lag, VARIANT& PredecessorProjectName, VARIANT& SuccessorProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x804, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, From, To, &Delete, &Type, &Lag, &PredecessorProjectName, &SuccessorProjectName);
		return result;
	}
	BOOL UnlinkTasks()
	{
		BOOL result;
		InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAssignment(VARIANT& Resources, long Operation, VARIANT& With)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Resources, Operation, &With);
		return result;
	}
	BOOL EditGoTo(VARIANT& ID, VARIANT& Date)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xd5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ID, &Date);
		return result;
	}
	BOOL GotoNextOverAllocation()
	{
		BOOL result;
		InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InsertNotes()
	{
		BOOL result;
		InvokeHelper(0x81e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Find(VARIANT& Field, VARIANT& Test, VARIANT& Value, VARIANT& Next, VARIANT& MatchCase, VARIANT& FieldID, VARIANT& TestID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Field, &Test, &Value, &Next, &MatchCase, &FieldID, &TestID);
		return result;
	}
	BOOL Replace(VARIANT& Field, VARIANT& Test, VARIANT& Value, VARIANT& Replacement, VARIANT& ReplaceAll, VARIANT& Next, VARIANT& MatchCase, VARIANT& FieldID, VARIANT& TestID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xf1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Field, &Test, &Value, &Replacement, &ReplaceAll, &Next, &MatchCase, &FieldID, &TestID);
		return result;
	}
	BOOL SelectAll()
	{
		BOOL result;
		InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ObjectInsert()
	{
		BOOL result;
		InvokeHelper(0xdd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SubscribeTo(VARIANT& Edition, long Format)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Edition, Format);
		return result;
	}
	BOOL SubscriberOptions(VARIANT& Name, VARIANT& IsTask, VARIANT& UniqueID, VARIANT& Field, VARIANT& Automatically, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &IsTask, &UniqueID, &Field, &Automatically, &Action);
		return result;
	}
	BOOL CreatePublisher(VARIANT& Edition, VARIANT& Contains)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Edition, &Contains);
		return result;
	}
	BOOL PublisherOptions(VARIANT& Name, VARIANT& View, VARIANT& IsTask, VARIANT& UniqueID, VARIANT& Field, VARIANT& OnSave, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &View, &IsTask, &UniqueID, &Field, &OnSave, &Action);
		return result;
	}
	BOOL EditionStopAll(VARIANT& Stop)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xe0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Stop);
		return result;
	}
	BOOL ClipboardShow()
	{
		BOOL result;
		InvokeHelper(0x2c3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewApply(VARIANT& Name, VARIANT& SinglePane, VARIANT& Toggle)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x12e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &SinglePane, &Toggle);
		return result;
	}
	BOOL ViewEditSingle(VARIANT& Name, VARIANT& Create, VARIANT& NewName, VARIANT& Screen, VARIANT& ShowInMenu, VARIANT& HighlightFilter, VARIANT& Table, VARIANT& Filter, VARIANT& Group)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x12f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &NewName, &Screen, &ShowInMenu, &HighlightFilter, &Table, &Filter, &Group);
		return result;
	}
	BOOL ViewEditCombination(VARIANT& Name, VARIANT& Create, VARIANT& NewName, VARIANT& TopView, VARIANT& BottomView, VARIANT& ShowInMenu)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x130, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &NewName, &TopView, &BottomView, &ShowInMenu);
		return result;
	}
	BOOL TableApply(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x192, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL TableEdit(LPCTSTR Name, BOOL TaskTable, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& NewName, VARIANT& FieldName, VARIANT& NewFieldName, VARIANT& Title, VARIANT& Width, VARIANT& Align, VARIANT& ShowInMenu, VARIANT& LockFirstColumn, VARIANT& DateFormat, VARIANT& RowHeight, VARIANT& ColumnPosition, VARIANT& AlignTitle, VARIANT& HeaderAutoRowHeightAdjustment, VARIANT& HeaderTextWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x193, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, TaskTable, &Create, &OverwriteExisting, &NewName, &FieldName, &NewFieldName, &Title, &Width, &Align, &ShowInMenu, &LockFirstColumn, &DateFormat, &RowHeight, &ColumnPosition, &AlignTitle, &HeaderAutoRowHeightAdjustment, &HeaderTextWrap);
		return result;
	}
	BOOL FilterApply(VARIANT& Name, VARIANT& Highlight, VARIANT& Value1, VARIANT& Value2)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Highlight, &Value1, &Value2);
		return result;
	}
	BOOL FilterEdit(LPCTSTR Name, BOOL TaskFilter, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& Parenthesis, VARIANT& NewName, VARIANT& FieldName, VARIANT& NewFieldName, VARIANT& Test, VARIANT& Value, VARIANT& Operation, VARIANT& ShowInMenu, VARIANT& ShowSummaryTasks)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, TaskFilter, &Create, &OverwriteExisting, &Parenthesis, &NewName, &FieldName, &NewFieldName, &Test, &Value, &Operation, &ShowInMenu, &ShowSummaryTasks);
		return result;
	}
	BOOL ProjectSummaryInfo(VARIANT& Project, VARIANT& Title, VARIANT& Subject, VARIANT& Author, VARIANT& Company, VARIANT& Manager, VARIANT& Keywords, VARIANT& Comments, VARIANT& Start, VARIANT& Finish, VARIANT& ScheduleFrom, VARIANT& CurrentDate, VARIANT& Calendar, VARIANT& StatusDate, VARIANT& Priority, VARIANT& PartiallyDisabled)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x259, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Project, &Title, &Subject, &Author, &Company, &Manager, &Keywords, &Comments, &Start, &Finish, &ScheduleFrom, &CurrentDate, &Calendar, &StatusDate, &Priority, &PartiallyDisabled);
		return result;
	}
	BOOL ProjectStatistics(VARIANT& Project)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x25a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Project);
		return result;
	}
	BOOL OptionsCalendar(VARIANT& StartWeekOnMonday, VARIANT& StartYearIn, VARIANT& StartTime, VARIANT& FinishTime, VARIANT& HoursPerDay, VARIANT& HoursPerWeek, VARIANT& SetDefaults, VARIANT& StartWeekOn, VARIANT& UseFYStartYear, VARIANT& DaysPerMonth)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x289, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &StartWeekOnMonday, &StartYearIn, &StartTime, &FinishTime, &HoursPerDay, &HoursPerWeek, &SetDefaults, &StartWeekOn, &UseFYStartYear, &DaysPerMonth);
		return result;
	}
	BOOL OptionsEdit(VARIANT& MoveAfterReturn, VARIANT& DragAndDrop, VARIANT& UpdateLinks, VARIANT& CopyResourceUsageHeader, VARIANT& PhoneticInfo, VARIANT& PhoneticType, VARIANT& MinuteLabelDisplay, VARIANT& HourLabelDisplay, VARIANT& DayLabelDisplay, VARIANT& WeekLabelDisplay, VARIANT& YearLabelDisplay, VARIANT& SpaceBeforeTimeLabel, VARIANT& SetDefaults, VARIANT& MonthLabelDisplay, VARIANT& SetDefaultsTimeUnits, VARIANT& HyperlinkColor, VARIANT& FollowedHyperlinkColor, VARIANT& UnderlineHyperlinks, VARIANT& SetDefaultsHyperlink, VARIANT& InCellEditing)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x281, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MoveAfterReturn, &DragAndDrop, &UpdateLinks, &CopyResourceUsageHeader, &PhoneticInfo, &PhoneticType, &MinuteLabelDisplay, &HourLabelDisplay, &DayLabelDisplay, &WeekLabelDisplay, &YearLabelDisplay, &SpaceBeforeTimeLabel, &SetDefaults, &MonthLabelDisplay, &SetDefaultsTimeUnits, &HyperlinkColor, &FollowedHyperlinkColor, &UnderlineHyperlinks, &SetDefaultsHyperlink, &InCellEditing);
		return result;
	}
	BOOL OptionsGeneral(VARIANT& PlanningWizard, VARIANT& WizardUsage, VARIANT& WizardErrors, VARIANT& WizardScheduling, VARIANT& ShowTipOfDay, VARIANT& AutoAddResources, VARIANT& StandardRate, VARIANT& OvertimeRate, VARIANT& LastFile, VARIANT& SummaryInfo, VARIANT& UserName, VARIANT& SetDefaults, VARIANT& ShowWelcome, VARIANT& AutoFilter, VARIANT& MacroVirusProtection, VARIANT& DisplayRecentFiles, VARIANT& RecentFilesMaximum, VARIANT& FontConversion, VARIANT& ShowStartupWorkpane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x282, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PlanningWizard, &WizardUsage, &WizardErrors, &WizardScheduling, &ShowTipOfDay, &AutoAddResources, &StandardRate, &OvertimeRate, &LastFile, &SummaryInfo, &UserName, &SetDefaults, &ShowWelcome, &AutoFilter, &MacroVirusProtection, &DisplayRecentFiles, &RecentFilesMaximum, &FontConversion, &ShowStartupWorkpane);
		return result;
	}
	BOOL OptionsSchedule(VARIANT& ScheduleMessages, VARIANT& StartOnCurrentDate, VARIANT& AutoLink, VARIANT& AutoSplit, VARIANT& CriticalSlack, VARIANT& TaskType, VARIANT& DurationUnits, VARIANT& WorkUnits, VARIANT& AutoTrack, VARIANT& SetDefaults, VARIANT& AssignmentUnits, VARIANT& EffortDriven, VARIANT& HonorConstraints, VARIANT& ShowEstimated, VARIANT& NewTasksEstimated)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x284, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ScheduleMessages, &StartOnCurrentDate, &AutoLink, &AutoSplit, &CriticalSlack, &TaskType, &DurationUnits, &WorkUnits, &AutoTrack, &SetDefaults, &AssignmentUnits, &EffortDriven, &HonorConstraints, &ShowEstimated, &NewTasksEstimated);
		return result;
	}
	BOOL OptionsView(VARIANT& DefaultView, VARIANT& DateFormat, VARIANT& ProjectSummary, VARIANT& DisplayStatusBar, VARIANT& DisplayEntryBar, VARIANT& DisplayScrollBars, VARIANT& CurrencySymbol, VARIANT& SymbolPlacement, VARIANT& CurrencyDigits, VARIANT& ProjectCurrency, VARIANT& DisplayOutlineNumber, VARIANT& DisplayOutlineSymbols, VARIANT& DisplayNameIndent, VARIANT& DisplaySummaryTasks, VARIANT& DisplayOLEIndicator, VARIANT& DisplayExternalSuccessors, VARIANT& DisplayExternalPredecessors, VARIANT& CrossProjectLinksInfo, VARIANT& AcceptNewExternalData, VARIANT& DisplayWindowsInTaskbar)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x286, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultView, &DateFormat, &ProjectSummary, &DisplayStatusBar, &DisplayEntryBar, &DisplayScrollBars, &CurrencySymbol, &SymbolPlacement, &CurrencyDigits, &ProjectCurrency, &DisplayOutlineNumber, &DisplayOutlineSymbols, &DisplayNameIndent, &DisplaySummaryTasks, &DisplayOLEIndicator, &DisplayExternalSuccessors, &DisplayExternalPredecessors, &CrossProjectLinksInfo, &AcceptNewExternalData, &DisplayWindowsInTaskbar);
		return result;
	}
	BOOL OptionsWorkgroup(VARIANT& WorkgroupMessages, VARIANT& ServerURL, VARIANT& ServerPath, VARIANT& ReceiveNotifications, VARIANT& SendHyperlinkNote, VARIANT& HyperlinkColor, VARIANT& FollowedHyperlinkColor, VARIANT& UnderlineHyperlinks, VARIANT& SetDefaults, VARIANT& ServerIdentification, VARIANT& AllowTaskDelegation, VARIANT& UpdateProjectToWeb, VARIANT& PublishInformationOnSave, VARIANT& SetDefaultsMessaging, VARIANT& SetDefaultsWebServer, VARIANT& ManagerEmail, VARIANT& ConfirmationDialog, VARIANT& ChangesMarkAssnDirty)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &WorkgroupMessages, &ServerURL, &ServerPath, &ReceiveNotifications, &SendHyperlinkNote, &HyperlinkColor, &FollowedHyperlinkColor, &UnderlineHyperlinks, &SetDefaults, &ServerIdentification, &AllowTaskDelegation, &UpdateProjectToWeb, &PublishInformationOnSave, &SetDefaultsMessaging, &SetDefaultsWebServer, &ManagerEmail, &ConfirmationDialog, &ChangesMarkAssnDirty);
		return result;
	}
	BOOL OptionsCalculation(VARIANT& Automatic, VARIANT& AutoTrack, VARIANT& SpreadPercentToStatusDate, VARIANT& SpreadCostsToStatusDate, VARIANT& AutoCalcCosts, VARIANT& FixedCostAccrual, VARIANT& CalcMultipleCriticalPaths, VARIANT& CriticalSlack, VARIANT& SetDefaults, VARIANT& CalcInsProjLikeSummTask, VARIANT& MoveCompleted, VARIANT& AndMoveRemaining, VARIANT& MoveRemaining, VARIANT& AndMoveCompleted, VARIANT& EVMethod, VARIANT& EVBaseline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Automatic, &AutoTrack, &SpreadPercentToStatusDate, &SpreadCostsToStatusDate, &AutoCalcCosts, &FixedCostAccrual, &CalcMultipleCriticalPaths, &CriticalSlack, &SetDefaults, &CalcInsProjLikeSummTask, &MoveCompleted, &AndMoveRemaining, &MoveRemaining, &AndMoveCompleted, &EVMethod, &EVBaseline);
		return result;
	}
	BOOL CalculateAll()
	{
		BOOL result;
		InvokeHelper(0x25f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsPreferences()
	{
		BOOL result;
		InvokeHelper(0x25b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ChangeWorkingTime(VARIANT& CalendarName, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x271, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CalendarName, &Locked);
		return result;
	}
	BOOL BaseCalendars(VARIANT& Index, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Index, &Locked);
		return result;
	}
	BOOL BaseCalendarCreate(LPCTSTR Name, VARIANT& FromName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x26a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &FromName);
		return result;
	}
	BOOL BaseCalendarRename(LPCTSTR FromName, LPCTSTR ToName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x270, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FromName, ToName);
		return result;
	}
	BOOL BaseCalendarDelete(LPCTSTR Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x26b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name);
		return result;
	}
	BOOL BaseCalendarEditDays(LPCTSTR Name, VARIANT& StartDate, VARIANT& EndDate, VARIANT& WeekDay, VARIANT& Working, VARIANT& From1, VARIANT& To1, VARIANT& From2, VARIANT& To2, VARIANT& From3, VARIANT& To3, VARIANT& Default, VARIANT& From4, VARIANT& To4, VARIANT& From5, VARIANT& To5)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x267, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &StartDate, &EndDate, &WeekDay, &Working, &From1, &To1, &From2, &To2, &From3, &To3, &Default, &From4, &To4, &From5, &To5);
		return result;
	}
	BOOL ResourceCalendarEditDays(LPCTSTR ProjectName, LPCTSTR ResourceName, VARIANT& StartDate, VARIANT& EndDate, VARIANT& WeekDay, VARIANT& Working, VARIANT& Default, VARIANT& From1, VARIANT& To1, VARIANT& From2, VARIANT& To2, VARIANT& From3, VARIANT& To3, VARIANT& From4, VARIANT& To4, VARIANT& From5, VARIANT& To5)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x26c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ProjectName, ResourceName, &StartDate, &EndDate, &WeekDay, &Working, &Default, &From1, &To1, &From2, &To2, &From3, &To3, &From4, &To4, &From5, &To5);
		return result;
	}
	BOOL BaseCalendarReset(LPCTSTR Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x269, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name);
		return result;
	}
	BOOL ResourceCalendarReset(LPCTSTR ProjectName, LPCTSTR ResourceName, VARIANT& BaseCalendar)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ProjectName, ResourceName, &BaseCalendar);
		return result;
	}
	BOOL ResourceCalendars(VARIANT& Index, VARIANT& Locked)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Index, &Locked);
		return result;
	}
	BOOL LevelingOptions(VARIANT& Automatic, VARIANT& DelayInSlack, VARIANT& AutoClearLeveling, VARIANT& Order, VARIANT& LevelEntireProject, VARIANT& FromDate, VARIANT& ToDate, VARIANT& PeriodBasis, VARIANT& LevelIndividualAssignments, VARIANT& LevelingCanSplit, VARIANT& LevelProposedBookings)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x260, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Automatic, &DelayInSlack, &AutoClearLeveling, &Order, &LevelEntireProject, &FromDate, &ToDate, &PeriodBasis, &LevelIndividualAssignments, &LevelingCanSplit, &LevelProposedBookings);
		return result;
	}
	BOOL LevelNow(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x261, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL BaselineSave(VARIANT& All, VARIANT& Copy, VARIANT& Into, VARIANT& RollupToSummaryTasks, VARIANT& RollupFromSubtasks, VARIANT& SetDefaults)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x262, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &Copy, &Into, &RollupToSummaryTasks, &RollupFromSubtasks, &SetDefaults);
		return result;
	}
	BOOL UpdateProject(VARIANT& All, VARIANT& UpdateDate, VARIANT& Action)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x263, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &UpdateDate, &Action);
		return result;
	}
	BOOL UpdateTasks(VARIANT& PercentComplete, VARIANT& ActualDuration, VARIANT& RemainingDuration, VARIANT& ActualStart, VARIANT& ActualFinish, VARIANT& Notes)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PercentComplete, &ActualDuration, &RemainingDuration, &ActualStart, &ActualFinish, &Notes);
		return result;
	}
	BOOL WindowNewWindow(VARIANT& Projects, VARIANT& View, VARIANT& AllProjects, VARIANT& ShowDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2bd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Projects, &View, &AllProjects, &ShowDialog);
		return result;
	}
	BOOL WindowArrangeAll()
	{
		BOOL result;
		InvokeHelper(0x2be, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowHide(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2bf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL WindowUnhide(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2c0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL WindowActivate(VARIANT& WindowName, VARIANT& DialogID, VARIANT& TopPane)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2c1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &WindowName, &DialogID, &TopPane);
		return result;
	}
	BOOL PageBreakSet()
	{
		BOOL result;
		InvokeHelper(0x3a6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PageBreakRemove()
	{
		BOOL result;
		InvokeHelper(0x3a7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PageBreaksRemoveAll()
	{
		BOOL result;
		InvokeHelper(0x3a8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowResourcesPredecessors()
	{
		BOOL result;
		InvokeHelper(0x393, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowResourcesSuccessors()
	{
		BOOL result;
		InvokeHelper(0x394, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPredecessorsSuccessors()
	{
		BOOL result;
		InvokeHelper(0x395, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowNotes()
	{
		BOOL result;
		InvokeHelper(0x397, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowObjects()
	{
		BOOL result;
		InvokeHelper(0x398, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowOverallocation()
	{
		BOOL result;
		InvokeHelper(0x39d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPercentAllocation()
	{
		BOOL result;
		InvokeHelper(0x39e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowWork()
	{
		BOOL result;
		InvokeHelper(0x39a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCost()
	{
		BOOL result;
		InvokeHelper(0x399, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowSchedule()
	{
		BOOL result;
		InvokeHelper(0x396, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowPeakUnits()
	{
		BOOL result;
		InvokeHelper(0x39b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowAvailability()
	{
		BOOL result;
		InvokeHelper(0x39f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowRemainingAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCumulativeWork()
	{
		BOOL result;
		InvokeHelper(0x39c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowCumulativeCost()
	{
		BOOL result;
		InvokeHelper(0x3a0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneNext()
	{
		BOOL result;
		InvokeHelper(0x7d2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneCreate()
	{
		BOOL result;
		InvokeHelper(0x7d3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormViewShow()
	{
		BOOL result;
		InvokeHelper(0x81a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PaneClose()
	{
		BOOL result;
		InvokeHelper(0x7d4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowSplit()
	{
		BOOL result;
		InvokeHelper(0x819, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WindowNext(VARIANT& NoWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7d5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NoWrap);
		return result;
	}
	BOOL WindowPrev(VARIANT& NoWrap)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7d6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NoWrap);
		return result;
	}
	BOOL DocClose()
	{
		BOOL result;
		InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMaximize()
	{
		BOOL result;
		InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMinimize()
	{
		BOOL result;
		InvokeHelper(0x7d9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppMove(VARIANT& XPosition, VARIANT& YPosition, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &XPosition, &YPosition, &Points);
		return result;
	}
	BOOL AppRestore()
	{
		BOOL result;
		InvokeHelper(0x7db, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AppSize(VARIANT& Width, VARIANT& Height, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7dc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Width, &Height, &Points);
		return result;
	}
	BOOL DocMaximize()
	{
		BOOL result;
		InvokeHelper(0x7dd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocMove(VARIANT& XPosition, VARIANT& YPosition, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7df, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &XPosition, &YPosition, &Points);
		return result;
	}
	BOOL DocRestore()
	{
		BOOL result;
		InvokeHelper(0x7e0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocSize(VARIANT& Width, VARIANT& Height, VARIANT& Points)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7e1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Width, &Height, &Points);
		return result;
	}
	BOOL OutlineOutdent(VARIANT& Levels)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Levels);
		return result;
	}
	BOOL OutlineShowTasks(long OutlineNumber, VARIANT& ExpandInsertedProjects)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, OutlineNumber, &ExpandInsertedProjects);
		return result;
	}
	BOOL OutlineIndent(VARIANT& Levels)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7e3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Levels);
		return result;
	}
	BOOL OutlineHideSubTasks()
	{
		BOOL result;
		InvokeHelper(0x7e4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OutlineShowSubTasks()
	{
		BOOL result;
		InvokeHelper(0x7e5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OutlineShowAllTasks()
	{
		BOOL result;
		InvokeHelper(0x7e6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SelectBeginning(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectEnd(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectRowStart(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectRowEnd(VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7fc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend);
		return result;
	}
	BOOL SelectCellLeft(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellRight(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x800, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellUp(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x801, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectCellDown(VARIANT& NumCells, VARIANT& Extend)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x802, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumCells, &Extend);
		return result;
	}
	BOOL SelectionExtend(VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x803, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Extend, &Add);
		return result;
	}
	BOOL ColumnBestFit(VARIANT& Column)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column);
		return result;
	}
	BOOL ColumnEdit(VARIANT& Column)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x7f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column);
		return result;
	}
	BOOL SelectRange(long Row, short Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectTimescaleRange(long Row, LPCTSTR StartTime, short Width, long Height)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_I2 VTS_I4 ;
		InvokeHelper(0x3ba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, StartTime, Width, Height);
		return result;
	}
	BOOL SelectTaskField(long Row, LPCTSTR Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectResourceField(long Row, LPCTSTR Column, VARIANT& RowRelative, VARIANT& Width, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x810, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Row, Column, &RowRelative, &Width, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectRow(VARIANT& Row, VARIANT& RowRelative, VARIANT& Height, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7fd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &RowRelative, &Height, &Extend, &Add);
		return result;
	}
	BOOL SelectColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7fe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectTaskColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x811, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectResourceColumn(VARIANT& Column, VARIANT& Additional, VARIANT& Extend, VARIANT& Add)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x812, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Column, &Additional, &Extend, &Add);
		return result;
	}
	BOOL SelectTaskCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x814, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectResourceCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x815, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectCell(VARIANT& Row, VARIANT& Column, VARIANT& RowRelative)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x816, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Row, &Column, &RowRelative);
		return result;
	}
	BOOL SelectSheet()
	{
		BOOL result;
		InvokeHelper(0x813, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DDEInitiate(LPCTSTR App, LPCTSTR Topic)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x4b1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, App, Topic);
		return result;
	}
	BOOL DDEExecute(LPCTSTR Command, VARIANT& TimeOut)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x4b2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Command, &TimeOut);
		return result;
	}
	BOOL DDETerminate()
	{
		BOOL result;
		InvokeHelper(0x4b3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InformationDialog(VARIANT& Tab)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xd9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Tab);
		return result;
	}
	BOOL Form(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3ec, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL CustomForms()
	{
		BOOL result;
		InvokeHelper(0x3eb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Tables()
	{
		BOOL result;
		InvokeHelper(0x191, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Filters()
	{
		BOOL result;
		InvokeHelper(0x1f5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Macro(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3e9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL FillDown(VARIANT& Down)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xda, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Down);
		return result;
	}
	BOOL Views()
	{
		BOOL result;
		InvokeHelper(0x12d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalculateProject()
	{
		BOOL result;
		InvokeHelper(0x7f2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LevelingClear(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x264, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL SpellingCheck()
	{
		BOOL result;
		InvokeHelper(0x265, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsSpelling(VARIANT& TaskName, VARIANT& TaskNotes, VARIANT& TaskText1, VARIANT& TaskText2, VARIANT& TaskText3, VARIANT& TaskText4, VARIANT& TaskText5, VARIANT& TaskText6, VARIANT& TaskText7, VARIANT& TaskText8, VARIANT& TaskText9, VARIANT& TaskText10, VARIANT& ResourceCode, VARIANT& ResourceName, VARIANT& ResourceNotes, VARIANT& ResourceGroup, VARIANT& ResourceText1, VARIANT& ResourceText2, VARIANT& ResourceText3, VARIANT& ResourceText4, VARIANT& ResourceText5, VARIANT& AssignNotes, VARIANT& IgnoreUppercase, VARIANT& IgnoreNumberWords, VARIANT& AlwaysSuggest, VARIANT& UseCustomDictionary)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x266, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskName, &TaskNotes, &TaskText1, &TaskText2, &TaskText3, &TaskText4, &TaskText5, &TaskText6, &TaskText7, &TaskText8, &TaskText9, &TaskText10, &ResourceCode, &ResourceName, &ResourceNotes, &ResourceGroup, &ResourceText1, &ResourceText2, &ResourceText3, &ResourceText4, &ResourceText5, &AssignNotes, &IgnoreUppercase, &IgnoreNumberWords, &AlwaysSuggest, &UseCustomDictionary);
		return result;
	}
	BOOL WindowMoreWindows()
	{
		BOOL result;
		InvokeHelper(0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpContents()
	{
		BOOL result;
		InvokeHelper(0x324, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpSearch()
	{
		BOOL result;
		InvokeHelper(0x328, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpOnlineIndex()
	{
		BOOL result;
		InvokeHelper(0x329, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpAbout()
	{
		BOOL result;
		InvokeHelper(0x326, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpLaunch(VARIANT& FileName, VARIANT& ContextNumber, VARIANT& Search, VARIANT& SearchKey)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x32a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName, &ContextNumber, &Search, &SearchKey);
		return result;
	}
	BOOL HelpCueCards(VARIANT& FileName, VARIANT& ContextNumber)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x32d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName, &ContextNumber);
		return result;
	}
	BOOL HelpTopics()
	{
		BOOL result;
		InvokeHelper(0x32f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpAnswerWizard()
	{
		BOOL result;
		InvokeHelper(0x330, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpMSProjectFundamentals()
	{
		BOOL result;
		InvokeHelper(0x331, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AutoCorrect()
	{
		BOOL result;
		InvokeHelper(0x273, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpQuickPreview()
	{
		BOOL result;
		InvokeHelper(0x32b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpTechnicalSupport()
	{
		BOOL result;
		InvokeHelper(0x32c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpCreateYourProject()
	{
		BOOL result;
		InvokeHelper(0x946, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpContextHelp()
	{
		BOOL result;
		InvokeHelper(0x32e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TextStyles(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x385, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color);
		return result;
	}
	BOOL DetailStylesFormat(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& CellColor, VARIANT& Pattern, VARIANT& ShowInMenu)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color, &CellColor, &Pattern, &ShowInMenu);
		return result;
	}
	BOOL DetailStylesAdd(long Item, VARIANT& Position)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x3c3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Position);
		return result;
	}
	BOOL DetailStylesRemove(long Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL DetailStylesRemoveAll()
	{
		BOOL result;
		InvokeHelper(0x3c5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Font(VARIANT& Name, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3a9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Size, &Bold, &Italic, &Underline, &Color, &Reset);
		return result;
	}
	BOOL Timescale()
	{
		BOOL result;
		InvokeHelper(0x3ae, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TimescaleEdit(VARIANT& MajorUnits, VARIANT& MinorUnits, VARIANT& MajorLabel, VARIANT& MinorLabel, VARIANT& MajorAlign, VARIANT& MinorAlign, VARIANT& MajorCount, VARIANT& MinorCount, VARIANT& MajorTicks, VARIANT& MinorTicks, VARIANT& Enlarge, VARIANT& Separator, VARIANT& MajorUseFY, VARIANT& MinorUseFY, VARIANT& TopUnits, VARIANT& TopLabel, VARIANT& TopAlign, VARIANT& TopCount, VARIANT& TopTicks, VARIANT& TopUseFY, VARIANT& TierCount)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x386, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MajorUnits, &MinorUnits, &MajorLabel, &MinorLabel, &MajorAlign, &MinorAlign, &MajorCount, &MinorCount, &MajorTicks, &MinorTicks, &Enlarge, &Separator, &MajorUseFY, &MinorUseFY, &TopUnits, &TopLabel, &TopAlign, &TopCount, &TopTicks, &TopUseFY, &TierCount);
		return result;
	}
	BOOL Sort(VARIANT& Key1, VARIANT& Ascending1, VARIANT& Key2, VARIANT& Ascending2, VARIANT& Key3, VARIANT& Ascending3, VARIANT& Renumber, VARIANT& Outline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x387, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Key1, &Ascending1, &Key2, &Ascending2, &Key3, &Ascending3, &Renumber, &Outline);
		return result;
	}
	BOOL BarBoxStyles()
	{
		BOOL result;
		InvokeHelper(0x388, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttBarFormat(VARIANT& TaskID, VARIANT& GanttStyle, VARIANT& StartShape, VARIANT& StartType, VARIANT& StartColor, VARIANT& MiddleShape, VARIANT& MiddlePattern, VARIANT& MiddleColor, VARIANT& EndShape, VARIANT& EndType, VARIANT& EndColor, VARIANT& LeftText, VARIANT& RightText, VARIANT& TopText, VARIANT& BottomText, VARIANT& InsideText, VARIANT& Reset, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3aa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskID, &GanttStyle, &StartShape, &StartType, &StartColor, &MiddleShape, &MiddlePattern, &MiddleColor, &EndShape, &EndType, &EndColor, &LeftText, &RightText, &TopText, &BottomText, &InsideText, &Reset, &ProjectName);
		return result;
	}
	BOOL TimescaleNonWorking(VARIANT& Draw, VARIANT& Calendar, VARIANT& Color, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x392, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Draw, &Calendar, &Color, &Pattern);
		return result;
	}
	BOOL BoxShowHideFields(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x389, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL Layout()
	{
		BOOL result;
		InvokeHelper(0x3ad, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PERTLayout(VARIANT& Straight, VARIANT& DisplayArrows, VARIANT& AdjustForPageBreaks, VARIANT& DisplayPageBreaks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x38a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Straight, &DisplayArrows, &AdjustForPageBreaks, &DisplayPageBreaks);
		return result;
	}
	BOOL LayoutNow()
	{
		BOOL result;
		InvokeHelper(0x38b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PERTBorders(VARIANT& CriticalStyle, VARIANT& CriticalColor, VARIANT& NoncriticalStyle, VARIANT& NoncriticalColor, VARIANT& CriticalMilestoneStyle, VARIANT& CriticalMilestoneColor, VARIANT& NoncriticalMilestoneStyle, VARIANT& NoncriticalMilestoneColor, VARIANT& CriticalSummaryStyle, VARIANT& CriticalSummaryColor, VARIANT& NoncriticalSummaryStyle, VARIANT& NoncriticalSummaryColor, VARIANT& CriticalSubprojectStyle, VARIANT& CriticalSubprojectColor, VARIANT& NoncriticalSubprojectStyle, VARIANT& NoncriticalSubprojectColor, VARIANT& CriticalMarkedStyle, VARIANT& CriticalMarkedColor, VARIANT& NoncriticalMarkedStyle, VARIANT& NoncriticalMarkedColor, VARIANT& CriticalExternalTaskStyle, VARIANT& CriticalExternalTaskColor, VARIANT& NoncriticalExternalTaskStyle, VARIANT& NoncriticalExternalTaskColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x38c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CriticalStyle, &CriticalColor, &NoncriticalStyle, &NoncriticalColor, &CriticalMilestoneStyle, &CriticalMilestoneColor, &NoncriticalMilestoneStyle, &NoncriticalMilestoneColor, &CriticalSummaryStyle, &CriticalSummaryColor, &NoncriticalSummaryStyle, &NoncriticalSummaryColor, &CriticalSubprojectStyle, &CriticalSubprojectColor, &NoncriticalSubprojectStyle, &NoncriticalSubprojectColor, &CriticalMarkedStyle, &CriticalMarkedColor, &NoncriticalMarkedStyle, &NoncriticalMarkedColor, &CriticalExternalTaskStyle, &CriticalExternalTaskColor, &NoncriticalExternalTaskStyle, &NoncriticalExternalTaskColor);
		return result;
	}
	BOOL Gridlines()
	{
		BOOL result;
		InvokeHelper(0x390, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GridlinesEdit(long Item, VARIANT& NormalType, VARIANT& NormalColor, VARIANT& Interval, VARIANT& IntervalType, VARIANT& IntervalColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &NormalType, &NormalColor, &Interval, &IntervalType, &IntervalColor);
		return result;
	}
	BOOL ViewShowSelectedTasks(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL PageBreaksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL FindNext()
	{
		BOOL result;
		InvokeHelper(0x7f0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FindPrevious()
	{
		BOOL result;
		InvokeHelper(0x7f1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomOut()
	{
		BOOL result;
		InvokeHelper(0x7f3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ZoomIn()
	{
		BOOL result;
		InvokeHelper(0x7f4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetField(LPCTSTR Field, LPCTSTR Value, VARIANT& Create)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &Create);
		return result;
	}
	BOOL SetTaskField(LPCTSTR Field, LPCTSTR Value, VARIANT& AllSelectedTasks, VARIANT& Create, VARIANT& TaskID, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &AllSelectedTasks, &Create, &TaskID, &ProjectName);
		return result;
	}
	BOOL SetResourceField(LPCTSTR Field, LPCTSTR Value, VARIANT& AllSelectedResources, VARIANT& Create, VARIANT& ResourceID, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, &AllSelectedResources, &Create, &ResourceID, &ProjectName);
		return result;
	}
	BOOL SetActiveCell(LPCTSTR Value, VARIANT& Create)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Value, &Create);
		return result;
	}
	VARIANT CheckField(LPCTSTR Field, LPCTSTR Value, VARIANT& Test, VARIANT& Op, VARIANT& Field2, VARIANT& Value2, VARIANT& Test2)
	{
		VARIANT result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Field, Value, &Test, &Op, &Field2, &Value2, &Test2);
		return result;
	}
	BOOL SetMatchingField(LPCTSTR Field, LPCTSTR Value, LPCTSTR CheckField, LPCTSTR CheckValue, VARIANT& CheckTest, VARIANT& CheckOperation, VARIANT& CheckField2, VARIANT& CheckValue2, VARIANT& CheckTest2)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field, Value, CheckField, CheckValue, &CheckTest, &CheckOperation, &CheckField2, &CheckValue2, &CheckTest2);
		return result;
	}
	BOOL AppExecute(VARIANT& Window, VARIANT& Command, VARIANT& Minimize, VARIANT& Activate)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Window, &Command, &Minimize, &Activate);
		return result;
	}
	BOOL AppLaunch(LPCTSTR Application, VARIANT& Document, VARIANT& Activate)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Application, &Document, &Activate);
		return result;
	}
	BOOL DDELinksUpdate()
	{
		BOOL result;
		InvokeHelper(0x805, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GotoTaskDates()
	{
		BOOL result;
		InvokeHelper(0x806, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttBarLinks(long Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x817, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Display);
		return result;
	}
	BOOL GanttShowDrawings(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x81f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL BarRounding(VARIANT& On)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x820, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &On);
		return result;
	}
	BOOL GanttRollup(VARIANT& AlwaysRollup, VARIANT& HideWhenSummaryExpanded)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x847, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AlwaysRollup, &HideWhenSummaryExpanded);
		return result;
	}
	BOOL GanttBarTextDateFormat(long DateFormat)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x821, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DateFormat);
		return result;
	}
	BOOL GanttBarSize(long Size)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x80a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Size);
		return result;
	}
	BOOL GanttBarStyleDelete(LPCTSTR Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x80b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL GanttBarStyleEdit(LPCTSTR Item, VARIANT& Create, VARIANT& Name, VARIANT& StartShape, VARIANT& StartType, VARIANT& StartColor, VARIANT& MiddleShape, VARIANT& MiddleColor, VARIANT& MiddlePattern, VARIANT& EndShape, VARIANT& EndType, VARIANT& EndColor, VARIANT& ShowFor, VARIANT& Row, VARIANT& From, VARIANT& To, VARIANT& BottomText, VARIANT& TopText, VARIANT& LeftText, VARIANT& RightText, VARIANT& InsideText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Create, &Name, &StartShape, &StartType, &StartColor, &MiddleShape, &MiddleColor, &MiddlePattern, &EndShape, &EndType, &EndColor, &ShowFor, &Row, &From, &To, &BottomText, &TopText, &LeftText, &RightText, &InsideText);
		return result;
	}
	BOOL PERTBoxStyles(VARIANT& Size, VARIANT& DateFormat, VARIANT& Gridlines, VARIANT& CrossMarks, VARIANT& Field1, VARIANT& Field2, VARIANT& Field3, VARIANT& Field4, VARIANT& Field5)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x808, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Size, &DateFormat, &Gridlines, &CrossMarks, &Field1, &Field2, &Field3, &Field4, &Field5);
		return result;
	}
	BOOL PERTSetTask(VARIANT& Create, VARIANT& Move, VARIANT& TaskID, VARIANT& XPosition, VARIANT& YPosition)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x807, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Create, &Move, &TaskID, &XPosition, &YPosition);
		return result;
	}
	BOOL ResourceGraphBarStyles(VARIANT& TopLeftShowAs, VARIANT& TopLeftColor, VARIANT& TopLeftPattern, VARIANT& BottomLeftShowAs, VARIANT& BottomLeftColor, VARIANT& BottomLeftPattern, VARIANT& TopRightShowAs, VARIANT& TopRightColor, VARIANT& TopRightPattern, VARIANT& BottomRightShowAs, VARIANT& BottomRightColor, VARIANT& BottomRightPattern, VARIANT& ShowValues, VARIANT& ShowAvailabilityLine, VARIANT& PercentBarOverlap, VARIANT& ProposedLeftShowAs, VARIANT& ProposedLeftColor, VARIANT& ProposedLeftPattern, VARIANT& ProposedRightShowAs, VARIANT& ProposedRightColor, VARIANT& ProposedRightPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x809, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TopLeftShowAs, &TopLeftColor, &TopLeftPattern, &BottomLeftShowAs, &BottomLeftColor, &BottomLeftPattern, &TopRightShowAs, &TopRightColor, &TopRightPattern, &BottomRightShowAs, &BottomRightColor, &BottomRightPattern, &ShowValues, &ShowAvailabilityLine, &PercentBarOverlap, &ProposedLeftShowAs, &ProposedLeftColor, &ProposedLeftPattern, &ProposedRightShowAs, &ProposedRightColor, &ProposedRightPattern);
		return result;
	}
	BOOL ConsolidateProjects(VARIANT& Filenames, VARIANT& NewWindow, VARIANT& AttachToSources, VARIANT& PoolResources, VARIANT& HideSubtasks, long openPool, VARIANT& UserID, VARIANT& Password)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Filenames, &NewWindow, &AttachToSources, &PoolResources, &HideSubtasks, openPool, &UserID, &Password);
		return result;
	}
	BOOL Organizer(long Type, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Type, &Task);
		return result;
	}
	BOOL OrganizerMoveItem(VARIANT& Type, VARIANT& FileName, VARIANT& ToFileName, VARIANT& Name, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &ToFileName, &Name, &Task);
		return result;
	}
	BOOL OrganizerDeleteItem(VARIANT& Type, VARIANT& FileName, VARIANT& Name, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x80, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &Name, &Task);
		return result;
	}
	BOOL OrganizerRenameItem(VARIANT& Type, VARIANT& FileName, VARIANT& Name, VARIANT& NewName, VARIANT& Task)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x82, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type, &FileName, &Name, &NewName, &Task);
		return result;
	}
	BOOL RecurringTaskInsert()
	{
		BOOL result;
		InvokeHelper(0x8ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalendarTimescale()
	{
		BOOL result;
		InvokeHelper(0x929, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CalendarDateBoxes(VARIANT& TopLeft, VARIANT& TopRight, VARIANT& BottomLeft, VARIANT& BottomRight, VARIANT& TopColor, VARIANT& BottomColor, VARIANT& TopPattern, VARIANT& BottomPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x924, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TopLeft, &TopRight, &BottomLeft, &BottomRight, &TopColor, &BottomColor, &TopPattern, &BottomPattern);
		return result;
	}
	BOOL CalendarWeekHeadings(VARIANT& MonthTitle, VARIANT& WeekTitle, VARIANT& DayTitle, VARIANT& ShowPreview, VARIANT& DaysPerWeek)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x925, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MonthTitle, &WeekTitle, &DayTitle, &ShowPreview, &DaysPerWeek);
		return result;
	}
	BOOL CalendarDateShadingEdit(long Item, VARIANT& Pattern, VARIANT& Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x927, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Pattern, &Color);
		return result;
	}
	BOOL CalendarDateShading(VARIANT& BaseCalendarName, VARIANT& ResourceUniqueID, VARIANT& ProjectIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x928, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BaseCalendarName, &ResourceUniqueID, &ProjectIndex);
		return result;
	}
	BOOL ZoomCalendar(VARIANT& NumWeeks, VARIANT& StartDate, VARIANT& EndDate)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &NumWeeks, &StartDate, &EndDate);
		return result;
	}
	BOOL CalendarLayout(VARIANT& SortOrder, VARIANT& AutoLayout)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SortOrder, &AutoLayout);
		return result;
	}
	BOOL CalendarBarStyles(VARIANT& BarRounding)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x916, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BarRounding);
		return result;
	}
	BOOL CalendarBarStylesEdit(long Item, VARIANT& Bar, VARIANT& Pattern, VARIANT& Color, VARIANT& Align, VARIANT& Wrap, VARIANT& Shadow, VARIANT& Field1, VARIANT& Field2, VARIANT& Field3, VARIANT& Field4, VARIANT& Field5, VARIANT& SplitPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x923, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item, &Bar, &Pattern, &Color, &Align, &Wrap, &Shadow, &Field1, &Field2, &Field3, &Field4, &Field5, &SplitPattern);
		return result;
	}
	BOOL CalendarBestFitWeekHeight()
	{
		BOOL result;
		InvokeHelper(0x917, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingCreate(long Type, VARIANT& Behind)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x902, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Type, &Behind);
		return result;
	}
	BOOL DrawingMove(VARIANT& Forward, VARIANT& Full)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x907, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Forward, &Full);
		return result;
	}
	BOOL DrawingReshape()
	{
		BOOL result;
		InvokeHelper(0x90a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingProperties(VARIANT& SizePositionTab)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x903, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &SizePositionTab);
		return result;
	}
	BOOL DrawingCycleColor()
	{
		BOOL result;
		InvokeHelper(0x90b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatCopy()
	{
		BOOL result;
		InvokeHelper(0x908, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatPaste()
	{
		BOOL result;
		InvokeHelper(0x909, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FormatPainter()
	{
		BOOL result;
		InvokeHelper(0x91d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Toolbars(VARIANT& Action, VARIANT& ToolbarName, VARIANT& NewToolbarName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x904, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Action, &ToolbarName, &NewToolbarName);
		return result;
	}
	BOOL ToolbarInsertTool(LPCTSTR ToolbarName, short ButtonIndex, VARIANT& Command, VARIANT& FaceIndex, VARIANT& Description, VARIANT& ToolTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex, &Command, &FaceIndex, &Description, &ToolTip);
		return result;
	}
	BOOL ToolbarDeleteTool(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x92d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL ToolbarsCustomize()
	{
		BOOL result;
		InvokeHelper(0x905, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ToolbarCustomizeTool(VARIANT& ToolbarName, VARIANT& ButtonIndex, VARIANT& Command, VARIANT& FaceIndex, VARIANT& Description, VARIANT& ToolTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x90c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ToolbarName, &ButtonIndex, &Command, &FaceIndex, &Description, &ToolTip);
		return result;
	}
	BOOL ToolbarCopyToolFace(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x90e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL ToolbarPasteToolFace(LPCTSTR ToolbarName, short ButtonIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x90f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolbarName, ButtonIndex);
		return result;
	}
	BOOL FontBold(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x910, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL FontItalic(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x911, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL FontUnderLine(VARIANT& Set)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x914, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Set);
		return result;
	}
	BOOL ColumnAlignment(long Align)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x915, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Align);
		return result;
	}
	BOOL Reports()
	{
		BOOL result;
		InvokeHelper(0x91e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TipOfTheDay()
	{
		BOOL result;
		InvokeHelper(0x91f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FindFile()
	{
		BOOL result;
		InvokeHelper(0x922, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MailUpdateProject(LPCTSTR DataFile)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x944, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DataFile);
		return result;
	}
	BOOL MailSendProjectMail(VARIANT& MessageType, VARIANT& Subject, VARIANT& Body, VARIANT& Fields, VARIANT& UpdateAsOf, VARIANT& ShowDialog, VARIANT& InstallationMessage, VARIANT& UpdateFrom, VARIANT& PublishScope)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x92f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MessageType, &Subject, &Body, &Fields, &UpdateAsOf, &ShowDialog, &InstallationMessage, &UpdateFrom, &PublishScope);
		return result;
	}
	BOOL WebInbox()
	{
		BOOL result;
		InvokeHelper(0x949, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttChartWizard()
	{
		BOOL result;
		InvokeHelper(0x9c4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DrawingToolbarShow()
	{
		BOOL result;
		InvokeHelper(0x930, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ReminderSet(VARIANT& Start, VARIANT& LeadTime)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Start, &LeadTime);
		return result;
	}
	BOOL SchedulePlusReminderSet(VARIANT& Start, VARIANT& LeadTime)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x931, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Start, &LeadTime);
		return result;
	}
	BOOL CalendarTaskList(VARIANT& Date)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x932, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Date);
		return result;
	}
	BOOL OutlineSymbolsToggle(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x822, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL ResourceSharingPoolAction(long Action, VARIANT& FileName, VARIANT& ReadOnly)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x823, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Action, &FileName, &ReadOnly);
		return result;
	}
	BOOL ResourceActiveDirectory()
	{
		BOOL result;
		InvokeHelper(0x898, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAddressBook()
	{
		BOOL result;
		InvokeHelper(0x843, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceDetails(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x844, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL MailProjectMailCustomize(VARIANT& Action, VARIANT& Position, VARIANT& FieldID, VARIANT& Title, VARIANT& IncludeInTeamStatus, VARIANT& Editable, VARIANT& UseAssignmentField)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x945, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Action, &Position, &FieldID, &Title, &IncludeInTeamStatus, &Editable, &UseAssignmentField);
		return result;
	}
	BOOL FileQuit(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x947, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL About()
	{
		BOOL result;
		InvokeHelper(0x948, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DetailStylesProperties(VARIANT& AlignCellData, VARIANT& RepeatRowLabel, VARIANT& ShortLabels, VARIANT& DisplayDetailsColumn)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3b8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AlignCellData, &RepeatRowLabel, &ShortLabels, &DisplayDetailsColumn);
		return result;
	}
	BOOL DetailStylesToggleItem(long Item)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Item);
		return result;
	}
	BOOL AutoFilter()
	{
		BOOL result;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewBar()
	{
		BOOL result;
		InvokeHelper(0x3c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroShowVba()
	{
		BOOL result;
		InvokeHelper(0x8c5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroShowCode()
	{
		BOOL result;
		InvokeHelper(0x8c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebGoBack()
	{
		BOOL result;
		InvokeHelper(0x514, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebGoForward()
	{
		BOOL result;
		InvokeHelper(0x515, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebStopLoading()
	{
		BOOL result;
		InvokeHelper(0x516, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebRefresh()
	{
		BOOL result;
		InvokeHelper(0x517, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebOpenStartPage()
	{
		BOOL result;
		InvokeHelper(0x518, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebOpenSearchPage()
	{
		BOOL result;
		InvokeHelper(0x519, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebHideToolbars(VARIANT& Hide)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x51a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Hide);
		return result;
	}
	BOOL FollowHyperlink(VARIANT& Address, VARIANT& SubAddress, VARIANT& AddHistory, VARIANT& NewWindow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address, &SubAddress, &AddHistory, &NewWindow);
		return result;
	}
	BOOL EditPasteAsHyperlink()
	{
		BOOL result;
		InvokeHelper(0x51c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL InsertHyperlink(VARIANT& Name, VARIANT& Address, VARIANT& SubAddress, VARIANT& ScreenTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Address, &SubAddress, &ScreenTip);
		return result;
	}
	BOOL EditHyperlink(VARIANT& Name, VARIANT& Address, VARIANT& SubAddress, VARIANT& ScreenTip)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Address, &SubAddress, &ScreenTip);
		return result;
	}
	BOOL WebOpenHyperlink(VARIANT& Address, VARIANT& SubAddress, VARIANT& AddHistory, VARIANT& NewWindow)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x51f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address, &SubAddress, &AddHistory, &NewWindow);
		return result;
	}
	BOOL WebCopyHyperlink()
	{
		BOOL result;
		InvokeHelper(0x521, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebAddToFavorites(VARIANT& CurrentLink)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x522, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CurrentLink);
		return result;
	}
	BOOL EditClearHyperlink()
	{
		BOOL result;
		InvokeHelper(0x524, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebSetStartPage(VARIANT& Address)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x525, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address);
		return result;
	}
	BOOL WebSetSearchPage(VARIANT& Address)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x526, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Address);
		return result;
	}
	BOOL WebOpenFavorites()
	{
		BOOL result;
		InvokeHelper(0x528, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebToolbar(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x529, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL SplitTask(VARIANT& Lock)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3f3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Lock);
		return result;
	}
	BOOL CustomFieldRename(long FieldID, VARIANT& NewName, VARIANT& Phonetic)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x94a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &NewName, &Phonetic);
		return result;
	}
	BOOL CustomizeField()
	{
		BOOL result;
		InvokeHelper(0x94b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GanttShowBarSplits(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x94d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL CalendarShowBarSplits(VARIANT& Display)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x94e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Display);
		return result;
	}
	BOOL MapEdit(VARIANT& Name, VARIANT& Create, VARIANT& OverwriteExisting, VARIANT& NewName, VARIANT& DataCategory, VARIANT& CategoryEnabled, VARIANT& TableName, VARIANT& FieldName, VARIANT& ExternalFieldName, VARIANT& ExportFilter, VARIANT& ImportMethod, VARIANT& MergeKey, VARIANT& HeaderRow, VARIANT& AssignmentData, VARIANT& TextDelimiter, VARIANT& TextFileOrigin, VARIANT& UseHtmlTemplate, VARIANT& TemplateFile, VARIANT& IncludeImage, VARIANT& ImageFile)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xf3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Create, &OverwriteExisting, &NewName, &DataCategory, &CategoryEnabled, &TableName, &FieldName, &ExternalFieldName, &ExportFilter, &ImportMethod, &MergeKey, &HeaderRow, &AssignmentData, &TextDelimiter, &TextFileOrigin, &UseHtmlTemplate, &TemplateFile, &IncludeImage, &ImageFile);
		return result;
	}
	BOOL FillAcross(VARIANT& Right)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Right);
		return result;
	}
	BOOL LinksBetweenProjects(VARIANT& AcceptAll)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &AcceptAll);
		return result;
	}
	BOOL ToggleAssignments()
	{
		BOOL result;
		InvokeHelper(0xf6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ProgressLines()
	{
		BOOL result;
		InvokeHelper(0xf7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceSharingPoolUpdate(VARIANT& allSharers)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &allSharers);
		return result;
	}
	BOOL ResourceSharingPoolRefresh()
	{
		BOOL result;
		InvokeHelper(0xf9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WebHelp(VARIANT& Type)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xfb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Type);
		return result;
	}
	BOOL AddProgressLine()
	{
		BOOL result;
		InvokeHelper(0xfc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CustomizeIMEMode(long FieldID, long IMEMode)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xfe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, IMEMode);
		return result;
	}
	BOOL DeleteFromDatabase(VARIANT& Name, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x87, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &UserID, &DatabasePassWord, &FormatID);
		return result;
	}
	BOOL WBSCodeRenumber(VARIANT& All)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x275, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All);
		return result;
	}
	BOOL WBSCodeMaskEdit(VARIANT& CodePrefix, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& CodeGenerate, VARIANT& VerifyUniqueness)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x276, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CodePrefix, &Level, Sequence, &Length, &Separator, &CodeGenerate, &VerifyUniqueness);
		return result;
	}
	BOOL CustomOutlineCodeEdit(long FieldID, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& OnlyLookUpTableCodes, VARIANT& OnlyCompleteCodes, VARIANT& LookupTableLink, VARIANT& OnlyLeaves, VARIANT& MatchGeneric, VARIANT& RequiredCode)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x277, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, Sequence, &Length, &Separator, &OnlyLookUpTableCodes, &OnlyCompleteCodes, &LookupTableLink, &OnlyLeaves, &MatchGeneric, &RequiredCode);
		return result;
	}
	BOOL OptionsSave(VARIANT& DefaultSaveFormat, VARIANT& DefaultProjectsPath, VARIANT& DefaultUserTemplatesPath, VARIANT& DefaultWorkgroupTemplatesPath, VARIANT& ExpandDatabaseTimephasedData, VARIANT& AutomaticSave, VARIANT& AutomaticSaveInterval, VARIANT& AutomaticSaveOptions, VARIANT& AutomaticSavePrompt, VARIANT& SetDefaultsDatabase)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x28a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultSaveFormat, &DefaultProjectsPath, &DefaultUserTemplatesPath, &DefaultWorkgroupTemplatesPath, &ExpandDatabaseTimephasedData, &AutomaticSave, &AutomaticSaveInterval, &AutomaticSaveOptions, &AutomaticSavePrompt, &SetDefaultsDatabase);
		return result;
	}
	BOOL OfficeOnTheWeb()
	{
		BOOL result;
		InvokeHelper(0x52a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL FixMe()
	{
		BOOL result;
		InvokeHelper(0x52b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowWorkAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ViewShowUnitAvailability()
	{
		BOOL result;
		InvokeHelper(0x3a3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BaselineClear(VARIANT& All, VARIANT& From)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x950, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &All, &From);
		return result;
	}
	BOOL Groups()
	{
		BOOL result;
		InvokeHelper(0x1ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GroupApply(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x200, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL GroupBy()
	{
		BOOL result;
		InvokeHelper(0x201, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LookUpTableAdd(long FieldID, VARIANT& Level, VARIANT& Code, VARIANT& Description)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x27b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, &Code, &Description);
		return result;
	}
	BOOL BoxStylesEdit(long Style, VARIANT& DataTemplate, VARIANT& HorizontalGridlines, VARIANT& VerticalGridlines, long BorderShape, long BorderColor, VARIANT& BorderWidth, long BackgroundColor, long BackgroundPattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 ;
		InvokeHelper(0x953, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Style, &DataTemplate, &HorizontalGridlines, &VerticalGridlines, BorderShape, BorderColor, &BorderWidth, BackgroundColor, BackgroundPattern);
		return result;
	}
	BOOL BoxFormat(VARIANT& ProjectName, VARIANT& TaskID, VARIANT& DataTemplate, VARIANT& HorizontalGridlines, VARIANT& VerticalGridlines, long BorderShape, long BorderColor, VARIANT& BorderWidth, long BackgroundColor, long BackgroundPattern, VARIANT& Reset)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x954, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectName, &TaskID, &DataTemplate, &HorizontalGridlines, &VerticalGridlines, BorderShape, BorderColor, &BorderWidth, BackgroundColor, BackgroundPattern, &Reset);
		return result;
	}
	BOOL BarBoxFormat()
	{
		BOOL result;
		InvokeHelper(0x955, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CreateWebAccount(VARIANT& ServerURL, VARIANT& Name, long AuthenticationType, long AccountType, VARIANT& ShowDialog, VARIANT& Email, VARIANT& WindowsAccount)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x956, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL, &Name, AuthenticationType, AccountType, &ShowDialog, &Email, &WindowsAccount);
		return result;
	}
	BOOL BoxDataTemplate(LPCTSTR Name, long Action, VARIANT& NewName, VARIANT& Overwrite)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x957, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, Action, &NewName, &Overwrite);
		return result;
	}
	BOOL BoxCellLayout(LPCTSTR Name, VARIANT& CellRows, VARIANT& CellColumns, VARIANT& CellWidth, VARIANT& MergeCells)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x958, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, &CellRows, &CellColumns, &CellWidth, &MergeCells);
		return result;
	}
	BOOL BoxCellEdit(LPCTSTR Name, long Cell, long FieldName, VARIANT& Font, VARIANT& FontSize, long FontColor, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, long HorizontalAlignment, long VerticalAlignment, VARIANT& TextLineLimit, VARIANT& ShowLabel, VARIANT& Label, long DateFormat)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x959, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Name, Cell, FieldName, &Font, &FontSize, FontColor, &Bold, &Italic, &Underline, HorizontalAlignment, VerticalAlignment, &TextLineLimit, &ShowLabel, &Label, DateFormat);
		return result;
	}
	BOOL ResourceWindowsAccount(VARIANT& Name, VARIANT& ShowDialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x95a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ShowDialog);
		return result;
	}
	BOOL SetRowHeight(VARIANT& Unit, VARIANT& Rows, VARIANT& UseUniqueID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x846, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Unit, &Rows, &UseUniqueID);
		return result;
	}
	BOOL ComAddInsDialog()
	{
		BOOL result;
		InvokeHelper(0x95b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MacroSecurity()
	{
		BOOL result;
		InvokeHelper(0x95c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LayoutSelectionNow()
	{
		BOOL result;
		InvokeHelper(0x95f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BoxAlign(long Alignment)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Alignment);
		return result;
	}
	BOOL ConvertHangulToHanja()
	{
		BOOL result;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL UpdateProjectToWeb(VARIANT& ServerURL, VARIANT& EmbedProjectFile, VARIANT& OnlyRegisterProject, VARIANT& WaitForCompletion)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8c7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL, &EmbedProjectFile, &OnlyRegisterProject, &WaitForCompletion);
		return result;
	}
	BOOL CustomFieldProperties(long FieldID, long Attribute, long SummaryCalc, VARIANT& GraphicalIndicators, VARIANT& Required)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Attribute, SummaryCalc, &GraphicalIndicators, &Required);
		return result;
	}
	BOOL CustomFieldSetFormula(long FieldID, VARIANT& Formula)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Formula);
		return result;
	}
	BOOL CustomFieldIndicatorAdd(long FieldID, long Test, LPCTSTR Value, long IndicatorID, long CriteriaList, VARIANT& Index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Test, Value, IndicatorID, CriteriaList, &Index);
		return result;
	}
	BOOL CustomFieldIndicators(long FieldID, VARIANT& SummaryInheritsNonsummary, VARIANT& ProjectInheritsSummary, VARIANT& ShowToolTips)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &SummaryInheritsNonsummary, &ProjectInheritsSummary, &ShowToolTips);
		return result;
	}
	BOOL CustomFieldIndicatorDelete(long FieldID, short Index, long CriteriaList)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_I4 ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Index, CriteriaList);
		return result;
	}
	BOOL CustomFieldValueList(long FieldID, VARIANT& ListDefault, VARIANT& DefaultValue, VARIANT& RestrictToList, VARIANT& AppendNew, VARIANT& PromptOnNew, long DisplayOrder)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &ListDefault, &DefaultValue, &RestrictToList, &AppendNew, &PromptOnNew, DisplayOrder);
		return result;
	}
	BOOL CustomFieldValueListAdd(long FieldID, VARIANT& Value, VARIANT& Description, VARIANT& Phonetic, VARIANT& Index, VARIANT& FieldDefault)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Value, &Description, &Phonetic, &Index, &FieldDefault);
		return result;
	}
	BOOL CustomFieldValueListDelete(long FieldID, short Index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Index);
		return result;
	}
	BOOL BoxLayout(long LayoutMode, long LayoutScheme, VARIANT& SummaryPrecedence, long RowAlignment, long ColumnAlignment, VARIANT& RowSpacing, VARIANT& ColumnSpacing, long RowHeight, long ColumnWidth, VARIANT& AdjustForPageBreaks, VARIANT& ShowSummaryTasks, long ViewBackgroundColor, long ViewBackgroundPattern, VARIANT& ShowProgressMarks, VARIANT& ShowPageBreaks, VARIANT& ShowIDOnly)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LayoutMode, LayoutScheme, &SummaryPrecedence, RowAlignment, ColumnAlignment, &RowSpacing, &ColumnSpacing, RowHeight, ColumnWidth, &AdjustForPageBreaks, &ShowSummaryTasks, ViewBackgroundColor, ViewBackgroundPattern, &ShowProgressMarks, &ShowPageBreaks, &ShowIDOnly);
		return result;
	}
	BOOL BoxLinks(long Style, VARIANT& ShowArrows, VARIANT& ShowLabels, long ColorMode, long CriticalColor, long NoncriticalColor)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Style, &ShowArrows, &ShowLabels, ColorMode, CriticalColor, NoncriticalColor);
		return result;
	}
	BOOL SummaryTasksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxProgressMarksShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxLinkLabelsShow(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL BoxLinkStyleToggle(VARIANT& StraightLinks)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &StraightLinks);
		return result;
	}
	BOOL LayoutRelatedNow()
	{
		BOOL result;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BoxSet(long Action, VARIANT& TaskID, VARIANT& XPosition, VARIANT& YPosition, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Action, &TaskID, &XPosition, &YPosition, &ProjectName);
		return result;
	}
	BOOL SetSplitBar(VARIANT& ShowColumns)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowColumns);
		return result;
	}
	BOOL SetTitleRowHeight(VARIANT& TitleHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x848, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TitleHeight);
		return result;
	}
	BOOL GoalAreaChange(short goalArea)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, goalArea);
		return result;
	}
	BOOL SidepaneToggle(VARIANT& Show)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Show);
		return result;
	}
	BOOL SearchFiles()
	{
		BOOL result;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ImportOutlookTasks()
	{
		BOOL result;
		InvokeHelper(0x849, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OptionsInterface(VARIANT& ShowResourceAssignmentIndicators, VARIANT& ShowEditToStartFinishDates, VARIANT& ShowEditsToWorkUnitsDurationIndicators, VARIANT& ShowDeletionInNameColumn, VARIANT& DisplayProjectGuide, VARIANT& ProjectGuideUseDefaultFunctionalLayoutPage, VARIANT& ProjectGuideFunctionalLayoutPage, VARIANT& ProjectGuideUseDefaultContent, VARIANT& ProjectGuideContent, VARIANT& SetAsDefaults)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x28b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceAssignmentIndicators, &ShowEditToStartFinishDates, &ShowEditsToWorkUnitsDurationIndicators, &ShowDeletionInNameColumn, &DisplayProjectGuide, &ProjectGuideUseDefaultFunctionalLayoutPage, &ProjectGuideFunctionalLayoutPage, &ProjectGuideUseDefaultContent, &ProjectGuideContent, &SetAsDefaults);
		return result;
	}
	BOOL SidepaneTaskChange(short ID, VARIANT& IsGoalArea)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_VARIANT ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ID, &IsGoalArea);
		return result;
	}
	BOOL ImportResourceList(VARIANT& ServerURL)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x84a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ServerURL);
		return result;
	}
	BOOL EnterpriseResSubstitutionWizard(VARIANT& ProjectList, long PoolOption, VARIANT& RBSorResourceList, VARIANT& FreezeHorizonDate, VARIANT& UpdateProjects, VARIANT& SaveReport, VARIANT& Path, VARIANT& AssignProposedResources, VARIANT& LevelProposedBookings)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x84b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectList, PoolOption, &RBSorResourceList, &FreezeHorizonDate, &UpdateProjects, &SaveReport, &Path, &AssignProposedResources, &LevelProposedBookings);
		return result;
	}
	BOOL EnterpriseResourcesOpen(VARIANT& EUID, long OpenType)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x828, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &EUID, OpenType);
		return result;
	}
	BOOL EnterpriseResourcesImport(VARIANT& LocalRUIDs)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x82a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUIDs);
		return result;
	}
	BOOL EnterpriseResourceGet(VARIANT& EUID, VARIANT& RUID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x82e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &EUID, &RUID);
		return result;
	}
	BOOL EnterpriseProjectImportWizard(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8c8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL EnterpriseTeamBuilder()
	{
		BOOL result;
		InvokeHelper(0x84c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseCustomOutlineCodeShare(long LinkFrom, VARIANT& LinkTo)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x920, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LinkFrom, &LinkTo);
		return result;
	}
	BOOL EnterpriseCustomizeFields()
	{
		BOOL result;
		InvokeHelper(0x84d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseGlobalCheckOut()
	{
		BOOL result;
		InvokeHelper(0x921, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseProjectProfiles()
	{
		BOOL result;
		InvokeHelper(0x90d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceAssignmentDialog(VARIANT& ShowResourceListOptions, long ResourceListFields, VARIANT& UseNamedFilter, VARIANT& FilterName, VARIANT& UseAvailableToWorkFilter, VARIANT& AvailableToWork)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x3af, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceListOptions, ResourceListFields, &UseNamedFilter, &FilterName, &UseAvailableToWorkFilter, &AvailableToWork);
		return result;
	}
	BOOL LoadWebBrowserControl(LPCTSTR TargetPage, VARIANT& WrapperPage)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage);
		return result;
	}
	BOOL FileSaveOffline(long Save)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x88, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save);
		return result;
	}
	BOOL HelpReference()
	{
		BOOL result;
		InvokeHelper(0x84f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HelpWhatsNew()
	{
		BOOL result;
		InvokeHelper(0x851, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StopWebBrowserControlNavigation()
	{
		BOOL result;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseGlobalBackup(VARIANT& BackupFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &BackupFileName);
		return result;
	}
	BOOL EnterpriseGlobalRestore(VARIANT& ProfileName, VARIANT& RestoreFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProfileName, &RestoreFileName);
		return result;
	}
	BOOL SpellCheckField(long FieldName, VARIANT& EnableSpellCheck)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x8cc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldName, &EnableSpellCheck);
		return result;
	}
	BOOL AddResourcesFromProjectServer()
	{
		BOOL result;
		InvokeHelper(0x852, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResetTrackingMethod()
	{
		BOOL result;
		InvokeHelper(0x8cd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ServiceOptionsDialog()
	{
		BOOL result;
		InvokeHelper(0x942, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseProjectDelete(VARIANT& Name)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x850, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name);
		return result;
	}
	BOOL CheckIn(VARIANT& fSaveChanges, VARIANT& Comments, VARIANT& fMakePublic)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x913, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &fSaveChanges, &Comments, &fMakePublic);
		return result;
	}
	BOOL CheckOut()
	{
		BOOL result;
		InvokeHelper(0x91c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DocumentLibraryVersionsDialog()
	{
		BOOL result;
		InvokeHelper(0x926, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DisplaySharedWorkspace()
	{
		BOOL result;
		InvokeHelper(0x93b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EnterpriseSynchActuals(VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8ce, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ProjectName);
		return result;
	}
	BOOL OptionsSecurity(VARIANT& RemoveFileProperties)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x28c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &RemoveFileProperties);
		return result;
	}
	BOOL SaveSheetSelection()
	{
		BOOL result;
		InvokeHelper(0x82f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL RestoreSheetSelection()
	{
		BOOL result;
		InvokeHelper(0x830, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CustomFieldDelete(long Field)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x854, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Field);
		return result;
	}
	BOOL ImportCommitment(VARIANT& CommitmentDate, VARIANT& CommitmentGuid)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x832, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CommitmentDate, &CommitmentGuid);
		return result;
	}
	BOOL SummaryResourceAssignmentsRefresh()
	{
		BOOL result;
		InvokeHelper(0x833, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL EditEnterpriseCalendar(VARIANT& UniqueID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x856, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &UniqueID);
		return result;
	}
	BOOL CreateEnterpriseCalendar()
	{
		BOOL result;
		InvokeHelper(0x857, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL LoadWebPaneControl(LPCTSTR TargetPage, VARIANT& WrapperPage)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage);
		return result;
	}
	BOOL ResourceMappingDialog()
	{
		BOOL result;
		InvokeHelper(0x8cf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MakeLocalCalendarEnterprise(VARIANT& OldName, VARIANT& NewName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x941, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &OldName, &NewName);
		return result;
	}
	BOOL CustomFieldMappingDialog(VARIANT& TaskCustomFields)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8d0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskCustomFields);
		return result;
	}
	BOOL CheckTaskErrors(VARIANT& TaskID)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8d1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &TaskID);
		return result;
	}
	BOOL CheckResourceErrors(VARIANT& LocalRUID, VARIANT& ResetImport, VARIANT& CheckEnterprise)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUID, &ResetImport, &CheckEnterprise);
		return result;
	}
	BOOL EditRedo()
	{
		BOOL result;
		InvokeHelper(0xc8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Publish(VARIANT& Republish, VARIANT& WssUrl)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Republish, &WssUrl);
		return result;
	}
	BOOL MakeFieldEnterprise(VARIANT& FieldID, VARIANT& FieldName, VARIANT& LookupTableName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FieldID, &FieldName, &LookupTableName);
		return result;
	}
	BOOL SaveForSharing(VARIANT& FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x855, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName);
		return result;
	}
	BOOL CacheSettings()
	{
		BOOL result;
		InvokeHelper(0x8e4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CleanupCache()
	{
		BOOL result;
		InvokeHelper(0x8e5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CacheStatus()
	{
		BOOL result;
		InvokeHelper(0x8ea, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL WorkOffline(VARIANT& fOffline)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x8eb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &fOffline);
		return result;
	}
	BOOL TaskDrivers()
	{
		BOOL result;
		InvokeHelper(0x8e7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ToggleChangeHighlighting()
	{
		BOOL result;
		InvokeHelper(0x858, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL VisualReports(long PjVisualReportsTab)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x859, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PjVisualReportsTab);
		return result;
	}
	BOOL VisualReportsSaveDatabase(VARIANT& strNamePath, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strNamePath, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsSaveCube(VARIANT& strNamePath, long PjVisualReportsCubeType, VARIANT& ReportAllFields, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strNamePath, PjVisualReportsCubeType, &ReportAllFields, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsNewTemplate(long PjVisualReportsTemplateType, long PjVisualReportsCubeType, VARIANT& ReportAllFields, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PjVisualReportsTemplateType, PjVisualReportsCubeType, &ReportAllFields, PjVisualReportsDataLevel);
		return result;
	}
	BOOL VisualReportsView(VARIANT& strVisualReportTemplateFile, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strVisualReportTemplateFile, PjVisualReportsDataLevel);
		return result;
	}
	BOOL CommitmentsPane()
	{
		BOOL result;
		InvokeHelper(0x8e8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DependenciesPane()
	{
		BOOL result;
		InvokeHelper(0x8e9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL VisualReportsEdit(VARIANT& strVisualReportTemplateFile, long PjVisualReportsDataLevel)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x85f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &strVisualReportTemplateFile, PjVisualReportsDataLevel);
		return result;
	}
	BOOL FileOpenEx(VARIANT& Name, VARIANT& ReadOnly, VARIANT& Merge, VARIANT& TaskInformation, VARIANT& Table, VARIANT& Sheet, VARIANT& NoAuto, VARIANT& UserID, VARIANT& DatabasePassWord, VARIANT& FormatID, VARIANT& Map, long openPool, VARIANT& Password, VARIANT& WriteResPassword, VARIANT& IgnoreReadOnlyRecommended, VARIANT& XMLName, VARIANT& DoNotLoadFromEnterprise)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &ReadOnly, &Merge, &TaskInformation, &Table, &Sheet, &NoAuto, &UserID, &DatabasePassWord, &FormatID, &Map, openPool, &Password, &WriteResPassword, &IgnoreReadOnlyRecommended, &XMLName, &DoNotLoadFromEnterprise);
		return result;
	}
	BOOL FileCloseEx(long Save, VARIANT& NoAuto, VARIANT& CheckIn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &NoAuto, &CheckIn);
		return result;
	}
	BOOL FileCloseAllEx(long Save, VARIANT& CheckIn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x8d4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Save, &CheckIn);
		return result;
	}
	BOOL OptionsGeneralEx(VARIANT& PlanningWizard, VARIANT& WizardUsage, VARIANT& WizardErrors, VARIANT& WizardScheduling, VARIANT& ShowTipOfDay, VARIANT& AutoAddResources, VARIANT& StandardRate, VARIANT& OvertimeRate, VARIANT& LastFile, VARIANT& SummaryInfo, VARIANT& UserName, VARIANT& SetDefaults, VARIANT& ShowWelcome, VARIANT& AutoFilter, VARIANT& MacroVirusProtection, VARIANT& DisplayRecentFiles, VARIANT& RecentFilesMaximum, VARIANT& FontConversion, VARIANT& ShowStartupWorkpane, VARIANT& MaxUndoRecords)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &PlanningWizard, &WizardUsage, &WizardErrors, &WizardScheduling, &ShowTipOfDay, &AutoAddResources, &StandardRate, &OvertimeRate, &LastFile, &SummaryInfo, &UserName, &SetDefaults, &ShowWelcome, &AutoFilter, &MacroVirusProtection, &DisplayRecentFiles, &RecentFilesMaximum, &FontConversion, &ShowStartupWorkpane, &MaxUndoRecords);
		return result;
	}
	BOOL OptionsViewEx(VARIANT& DefaultView, VARIANT& DateFormat, VARIANT& ProjectSummary, VARIANT& DisplayStatusBar, VARIANT& DisplayEntryBar, VARIANT& DisplayScrollBars, VARIANT& CurrencySymbol, VARIANT& SymbolPlacement, VARIANT& CurrencyDigits, VARIANT& ProjectCurrency, VARIANT& DisplayOutlineNumber, VARIANT& DisplayOutlineSymbols, VARIANT& DisplayNameIndent, VARIANT& DisplaySummaryTasks, VARIANT& DisplayOLEIndicator, VARIANT& DisplayExternalSuccessors, VARIANT& DisplayExternalPredecessors, VARIANT& CrossProjectLinksInfo, VARIANT& AcceptNewExternalData, VARIANT& DisplayWindowsInTaskbar, VARIANT& DisplayScreentips, VARIANT& CalendarType, VARIANT& Use3DLook)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &DefaultView, &DateFormat, &ProjectSummary, &DisplayStatusBar, &DisplayEntryBar, &DisplayScrollBars, &CurrencySymbol, &SymbolPlacement, &CurrencyDigits, &ProjectCurrency, &DisplayOutlineNumber, &DisplayOutlineSymbols, &DisplayNameIndent, &DisplaySummaryTasks, &DisplayOLEIndicator, &DisplayExternalSuccessors, &DisplayExternalPredecessors, &CrossProjectLinksInfo, &AcceptNewExternalData, &DisplayWindowsInTaskbar, &DisplayScreentips, &CalendarType, &Use3DLook);
		return result;
	}
	BOOL ChangeWorkingTimeEx(VARIANT& CalendarName, VARIANT& Locked, VARIANT& SelectedDate, VARIANT& ProjectName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8de, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &CalendarName, &Locked, &SelectedDate, &ProjectName);
		return result;
	}
	BOOL TextStylesEx(VARIANT& Item, VARIANT& Font, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& CellColor, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Item, &Font, &Size, &Bold, &Italic, &Underline, &Color, &CellColor, &Pattern);
		return result;
	}
	BOOL FontEx(VARIANT& Name, VARIANT& Size, VARIANT& Bold, VARIANT& Italic, VARIANT& Underline, VARIANT& Color, VARIANT& Reset, VARIANT& CellColor, VARIANT& Pattern)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &Name, &Size, &Bold, &Italic, &Underline, &Color, &Reset, &CellColor, &Pattern);
		return result;
	}
	BOOL CalendarWeekHeadingsEx(VARIANT& MonthTitle, VARIANT& WeekTitle, VARIANT& DayTitle, VARIANT& ShowPreview, VARIANT& DaysPerWeek, VARIANT& ShowTitleBeginningEndDates)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8dd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &MonthTitle, &WeekTitle, &DayTitle, &ShowPreview, &DaysPerWeek, &ShowTitleBeginningEndDates);
		return result;
	}
	BOOL CustomOutlineCodeEditEx(long FieldID, VARIANT& Level, long Sequence, VARIANT& Length, VARIANT& Separator, VARIANT& OnlyLookUpTableCodes, VARIANT& OnlyCompleteCodes, VARIANT& LookupTableLink, VARIANT& OnlyLeaves, VARIANT& MatchGeneric, VARIANT& RequiredCode, VARIANT& LookupDefault, VARIANT& DefaultValue, VARIANT& SortOrder)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8d9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, Sequence, &Length, &Separator, &OnlyLookUpTableCodes, &OnlyCompleteCodes, &LookupTableLink, &OnlyLeaves, &MatchGeneric, &RequiredCode, &LookupDefault, &DefaultValue, &SortOrder);
		return result;
	}
	BOOL LookUpTableAddEx(long FieldID, VARIANT& Level, VARIANT& Code, VARIANT& Description, VARIANT& Phonetic)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, &Level, &Code, &Description, &Phonetic);
		return result;
	}
	BOOL CustomFieldPropertiesEx(long FieldID, long Attribute, long SummaryCalc, VARIANT& GraphicalIndicators, VARIANT& Required, VARIANT& AutomaticallyRolldownToAssn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8db, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FieldID, Attribute, SummaryCalc, &GraphicalIndicators, &Required, &AutomaticallyRolldownToAssn);
		return result;
	}
	BOOL OptionsInterfaceEx(VARIANT& ShowResourceAssignmentIndicators, VARIANT& ShowEditToStartFinishDates, VARIANT& ShowEditsToWorkUnitsDurationIndicators, VARIANT& ShowDeletionInNameColumn, VARIANT& DisplayProjectGuide, VARIANT& ProjectGuideUseDefaultFunctionalLayoutPage, VARIANT& ProjectGuideFunctionalLayoutPage, VARIANT& ProjectGuideUseDefaultContent, VARIANT& ProjectGuideContent, VARIANT& SetAsDefaults, VARIANT& UseOMIDs)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8dc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &ShowResourceAssignmentIndicators, &ShowEditToStartFinishDates, &ShowEditsToWorkUnitsDurationIndicators, &ShowDeletionInNameColumn, &DisplayProjectGuide, &ProjectGuideUseDefaultFunctionalLayoutPage, &ProjectGuideFunctionalLayoutPage, &ProjectGuideUseDefaultContent, &ProjectGuideContent, &SetAsDefaults, &UseOMIDs);
		return result;
	}
	BOOL EnterpriseResourcesImportEx(VARIANT& LocalRUIDs, VARIANT& UseImportColumn)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &LocalRUIDs, &UseImportColumn);
		return result;
	}
	BOOL LoadWebBrowserControlEx(LPCTSTR TargetPage, VARIANT& WrapperPage, VARIANT& FunctionalityName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8df, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, TargetPage, &WrapperPage, &FunctionalityName);
		return result;
	}
	BOOL OptionsSecurityEx(VARIANT& RemoveFileProperties, VARIANT& TrustWSS, VARIANT& LegacyFileFormats)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x8e0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &RemoveFileProperties, &TrustWSS, &LegacyFileFormats);
		return result;
	}
	BOOL IsUndoingOrRedoing()
	{
		BOOL result;
		InvokeHelper(0x1460, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString ValidateEnterpriseFormula(long propertyID, LPCTSTR strFormula, BOOL Localized)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x1461, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, propertyID, strFormula, Localized);
		return result;
	}
	void UndoClear()
	{
		InvokeHelper(0x145f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL Undo(long HowManyUndos)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x145d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, HowManyUndos);
		return result;
	}
	BOOL Redo(long HowManyRedos)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x145e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, HowManyRedos);
		return result;
	}
	void OpenUndoTransaction(LPCTSTR Label, VARIANT& Guid)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x1463, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Label, &Guid);
	}
	void CloseUndoTransaction()
	{
		InvokeHelper(0x1464, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString ValidateGraphicalIndicators(long propertyID, LPCTSTR strGraphicalIndicators, BOOL Localized)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x1465, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, propertyID, strGraphicalIndicators, Localized);
		return result;
	}
	long GetUndoListCount()
	{
		long result;
		InvokeHelper(0x146a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetRedoListCount()
	{
		long result;
		InvokeHelper(0x146b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetUndoListItem(long ItemIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x146c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ItemIndex);
		return result;
	}
	CString GetRedoListItem(long ItemIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x146d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ItemIndex);
		return result;
	}
	LPDISPATCH GetCellInfo(long x, long y)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x146e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, x, y);
		return result;
	}
	CString GetProjectServerSettingsEx()
	{
		CString result;
		InvokeHelper(0x13d6, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void AfterUnloadWebBrowserControl()
	{
		InvokeHelper(0x1470, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL IsOffline()
	{
		BOOL result;
		InvokeHelper(0x1471, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsReducedFunctionalityMode()
	{
		BOOL result;
		InvokeHelper(0x1472, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Assistance()
	{
		LPDISPATCH result;
		InvokeHelper(0x1473, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString GetThemedColor(long elementType)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1474, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, elementType);
		return result;
	}
	long IsCommandEnabled(LPCTSTR CommandName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1475, DISPATCH_METHOD, VT_I4, (void*)&result, parms, CommandName);
		return result;
	}

	// _MSProject properties
public:
	Application * GetApplication()
	{
		Application * result;
		GetProperty(0xfff4, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetApplication(Application * propVal)
	{
		SetProperty(0xfff4, VT_DISPATCH, propVal);
	}
	Application * GetParent()
	{
		Application * result;
		GetProperty(0xfff3, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetParent(Application * propVal)
	{
		SetProperty(0xfff3, VT_DISPATCH, propVal);
	}
	Projects * GetProjects()
	{
		Projects * result;
		GetProperty(0x1388, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetProjects(Projects * propVal)
	{
		SetProperty(0x1388, VT_DISPATCH, propVal);
	}
	Selection * GetActiveSelection()
	{
		Selection * result;
		GetProperty(0x13a8, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveSelection(Selection * propVal)
	{
		SetProperty(0x13a8, VT_DISPATCH, propVal);
	}
	Cell * GetActiveCell()
	{
		Cell * result;
		GetProperty(0x13a9, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveCell(Cell * propVal)
	{
		SetProperty(0x13a9, VT_DISPATCH, propVal);
	}
	Project * GetActiveProject()
	{
		Project * result;
		GetProperty(0x138a, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveProject(Project * propVal)
	{
		SetProperty(0x138a, VT_DISPATCH, propVal);
	}
	Window * GetActiveWindow()
	{
		Window * result;
		GetProperty(0x138b, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetActiveWindow(Window * propVal)
	{
		SetProperty(0x138b, VT_DISPATCH, propVal);
	}
	BOOL GetSupportsMultipleDocuments()
	{
		BOOL result;
		GetProperty(0x138c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSupportsMultipleDocuments(BOOL propVal)
	{
		SetProperty(0x138c, VT_BOOL, propVal);
	}
	BOOL GetSupportsMultipleWindows()
	{
		BOOL result;
		GetProperty(0x138d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetSupportsMultipleWindows(BOOL propVal)
	{
		SetProperty(0x138d, VT_BOOL, propVal);
	}
	BOOL GetVisible()
	{
		BOOL result;
		GetProperty(0x138e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetVisible(BOOL propVal)
	{
		SetProperty(0x138e, VT_BOOL, propVal);
	}
	CString GetPathSeparator()
	{
		CString result;
		GetProperty(0x138f, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPathSeparator(CString propVal)
	{
		SetProperty(0x138f, VT_BSTR, propVal);
	}
	CString GetCaption()
	{
		CString result;
		GetProperty(0x1392, VT_BSTR, (void*)&result);
		return result;
	}
	void SetCaption(CString propVal)
	{
		SetProperty(0x1392, VT_BSTR, propVal);
	}
	CString GetName()
	{
		CString result;
		GetProperty(0x0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetName(CString propVal)
	{
		SetProperty(0x0, VT_BSTR, propVal);
	}
	CString GetPath()
	{
		CString result;
		GetProperty(0x1397, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPath(CString propVal)
	{
		SetProperty(0x1397, VT_BSTR, propVal);
	}
	CString GetVersion()
	{
		CString result;
		GetProperty(0x139c, VT_BSTR, (void*)&result);
		return result;
	}
	void SetVersion(CString propVal)
	{
		SetProperty(0x139c, VT_BSTR, propVal);
	}
	long GetWindowState()
	{
		long result;
		GetProperty(0x139e, VT_I4, (void*)&result);
		return result;
	}
	void SetWindowState(long propVal)
	{
		SetProperty(0x139e, VT_I4, propVal);
	}
	long GetLeft()
	{
		long result;
		GetProperty(0x1394, VT_I4, (void*)&result);
		return result;
	}
	void SetLeft(long propVal)
	{
		SetProperty(0x1394, VT_I4, propVal);
	}
	long GetTop()
	{
		long result;
		GetProperty(0x1398, VT_I4, (void*)&result);
		return result;
	}
	void SetTop(long propVal)
	{
		SetProperty(0x1398, VT_I4, propVal);
	}
	long GetWidth()
	{
		long result;
		GetProperty(0x139d, VT_I4, (void*)&result);
		return result;
	}
	void SetWidth(long propVal)
	{
		SetProperty(0x139d, VT_I4, propVal);
	}
	long GetHeight()
	{
		long result;
		GetProperty(0x1393, VT_I4, (void*)&result);
		return result;
	}
	void SetHeight(long propVal)
	{
		SetProperty(0x1393, VT_I4, propVal);
	}
	ReportTemplates * GetVisualReportTemplateList()
	{
		ReportTemplates * result;
		GetProperty(0x1467, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetVisualReportTemplateList(ReportTemplates * propVal)
	{
		SetProperty(0x1467, VT_DISPATCH, propVal);
	}
	long GetDateOrder()
	{
		long result;
		GetProperty(0x13ef, VT_I4, (void*)&result);
		return result;
	}
	void SetDateOrder(long propVal)
	{
		SetProperty(0x13ef, VT_I4, propVal);
	}
	CString GetDateSeparator()
	{
		CString result;
		GetProperty(0x13f0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDateSeparator(CString propVal)
	{
		SetProperty(0x13f0, VT_BSTR, propVal);
	}
	CString GetThousandSeparator()
	{
		CString result;
		GetProperty(0x13f1, VT_BSTR, (void*)&result);
		return result;
	}
	void SetThousandSeparator(CString propVal)
	{
		SetProperty(0x13f1, VT_BSTR, propVal);
	}
	CString GetDecimalSeparator()
	{
		CString result;
		GetProperty(0x13f2, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDecimalSeparator(CString propVal)
	{
		SetProperty(0x13f2, VT_BSTR, propVal);
	}
	CString GetListSeparator()
	{
		CString result;
		GetProperty(0x13f3, VT_BSTR, (void*)&result);
		return result;
	}
	void SetListSeparator(CString propVal)
	{
		SetProperty(0x13f3, VT_BSTR, propVal);
	}
	CString GetTimeSeparator()
	{
		CString result;
		GetProperty(0x13f4, VT_BSTR, (void*)&result);
		return result;
	}
	void SetTimeSeparator(CString propVal)
	{
		SetProperty(0x13f4, VT_BSTR, propVal);
	}
	BOOL GetTwelveHourTimeFormat()
	{
		BOOL result;
		GetProperty(0x13f5, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTwelveHourTimeFormat(BOOL propVal)
	{
		SetProperty(0x13f5, VT_BOOL, propVal);
	}
	CString GetAMText()
	{
		CString result;
		GetProperty(0x13f6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetAMText(CString propVal)
	{
		SetProperty(0x13f6, VT_BSTR, propVal);
	}
	CString GetPMText()
	{
		CString result;
		GetProperty(0x13f7, VT_BSTR, (void*)&result);
		return result;
	}
	void SetPMText(CString propVal)
	{
		SetProperty(0x13f7, VT_BSTR, propVal);
	}
	CString GetDefaultView()
	{
		CString result;
		GetProperty(0x13f8, VT_BSTR, (void*)&result);
		return result;
	}
	void SetDefaultView(CString propVal)
	{
		SetProperty(0x13f8, VT_BSTR, propVal);
	}
	BOOL GetDisplayStatusBar()
	{
		BOOL result;
		GetProperty(0x13f9, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayStatusBar(BOOL propVal)
	{
		SetProperty(0x13f9, VT_BOOL, propVal);
	}
	BOOL GetDisplayAlerts()
	{
		BOOL result;
		GetProperty(0x1425, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayAlerts(BOOL propVal)
	{
		SetProperty(0x1425, VT_BOOL, propVal);
	}
	BOOL GetDisplayEntryBar()
	{
		BOOL result;
		GetProperty(0x13fa, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayEntryBar(BOOL propVal)
	{
		SetProperty(0x13fa, VT_BOOL, propVal);
	}
	BOOL GetDisplayScrollBars()
	{
		BOOL result;
		GetProperty(0x13fb, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayScrollBars(BOOL propVal)
	{
		SetProperty(0x13fb, VT_BOOL, propVal);
	}
	BOOL GetDisplayWindowsInTaskbar()
	{
		BOOL result;
		GetProperty(0x1434, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWindowsInTaskbar(BOOL propVal)
	{
		SetProperty(0x1434, VT_BOOL, propVal);
	}
	long GetCalculation()
	{
		long result;
		GetProperty(0x1401, VT_I4, (void*)&result);
		return result;
	}
	void SetCalculation(long propVal)
	{
		SetProperty(0x1401, VT_I4, propVal);
	}
	BOOL GetAutoLevel()
	{
		BOOL result;
		GetProperty(0x1407, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoLevel(BOOL propVal)
	{
		SetProperty(0x1407, VT_BOOL, propVal);
	}
	BOOL GetAutoClearLeveling()
	{
		BOOL result;
		GetProperty(0x1408, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutoClearLeveling(BOOL propVal)
	{
		SetProperty(0x1408, VT_BOOL, propVal);
	}
	BOOL GetLevelWithinSlack()
	{
		BOOL result;
		GetProperty(0x1409, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelWithinSlack(BOOL propVal)
	{
		SetProperty(0x1409, VT_BOOL, propVal);
	}
	long GetLevelOrder()
	{
		long result;
		GetProperty(0x140a, VT_I4, (void*)&result);
		return result;
	}
	void SetLevelOrder(long propVal)
	{
		SetProperty(0x140a, VT_I4, propVal);
	}
	long GetLevelPeriodBasis()
	{
		long result;
		GetProperty(0x142f, VT_I4, (void*)&result);
		return result;
	}
	void SetLevelPeriodBasis(long propVal)
	{
		SetProperty(0x142f, VT_I4, propVal);
	}
	BOOL GetLevelIndividualAssignments()
	{
		BOOL result;
		GetProperty(0x1430, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelIndividualAssignments(BOOL propVal)
	{
		SetProperty(0x1430, VT_BOOL, propVal);
	}
	BOOL GetLevelProposedBookings()
	{
		BOOL result;
		GetProperty(0x1436, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelProposedBookings(BOOL propVal)
	{
		SetProperty(0x1436, VT_BOOL, propVal);
	}
	BOOL GetLevelingCanSplit()
	{
		BOOL result;
		GetProperty(0x1431, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLevelingCanSplit(BOOL propVal)
	{
		SetProperty(0x1431, VT_BOOL, propVal);
	}
	BOOL GetMoveAfterReturn()
	{
		BOOL result;
		GetProperty(0x140b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMoveAfterReturn(BOOL propVal)
	{
		SetProperty(0x140b, VT_BOOL, propVal);
	}
	BOOL GetDisplayScheduleMessages()
	{
		BOOL result;
		GetProperty(0x140d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayScheduleMessages(BOOL propVal)
	{
		SetProperty(0x140d, VT_BOOL, propVal);
	}
	long GetStartWeekOn()
	{
		long result;
		GetProperty(0x140f, VT_I4, (void*)&result);
		return result;
	}
	void SetStartWeekOn(long propVal)
	{
		SetProperty(0x140f, VT_I4, propVal);
	}
	long GetStartYearIn()
	{
		long result;
		GetProperty(0x1411, VT_I4, (void*)&result);
		return result;
	}
	void SetStartYearIn(long propVal)
	{
		SetProperty(0x1411, VT_I4, propVal);
	}
	BOOL GetCellDragAndDrop()
	{
		BOOL result;
		GetProperty(0x1413, VT_BOOL, (void*)&result);
		return result;
	}
	void SetCellDragAndDrop(BOOL propVal)
	{
		SetProperty(0x1413, VT_BOOL, propVal);
	}
	CString GetUserName()
	{
		CString result;
		GetProperty(0x141e, VT_BSTR, (void*)&result);
		return result;
	}
	void SetUserName(CString propVal)
	{
		SetProperty(0x141e, VT_BSTR, propVal);
	}
	BOOL GetDisplayNotesIndicator()
	{
		BOOL result;
		GetProperty(0x1421, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayNotesIndicator(BOOL propVal)
	{
		SetProperty(0x1421, VT_BOOL, propVal);
	}
	BOOL GetAskToUpdateLinks()
	{
		BOOL result;
		GetProperty(0x1423, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAskToUpdateLinks(BOOL propVal)
	{
		SetProperty(0x1423, VT_BOOL, propVal);
	}
	BOOL GetDisplayPlanningWizard()
	{
		BOOL result;
		GetProperty(0x1416, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayPlanningWizard(BOOL propVal)
	{
		SetProperty(0x1416, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardUsage()
	{
		BOOL result;
		GetProperty(0x1418, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardUsage(BOOL propVal)
	{
		SetProperty(0x1418, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardErrors()
	{
		BOOL result;
		GetProperty(0x1419, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardErrors(BOOL propVal)
	{
		SetProperty(0x1419, VT_BOOL, propVal);
	}
	BOOL GetDisplayWizardScheduling()
	{
		BOOL result;
		GetProperty(0x1417, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayWizardScheduling(BOOL propVal)
	{
		SetProperty(0x1417, VT_BOOL, propVal);
	}
	BOOL GetShowTipOfDay()
	{
		BOOL result;
		GetProperty(0x141b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowTipOfDay(BOOL propVal)
	{
		SetProperty(0x141b, VT_BOOL, propVal);
	}
	BOOL GetShowToolTips()
	{
		BOOL result;
		GetProperty(0x141c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowToolTips(BOOL propVal)
	{
		SetProperty(0x141c, VT_BOOL, propVal);
	}
	BOOL GetShowWelcome()
	{
		BOOL result;
		GetProperty(0x1424, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowWelcome(BOOL propVal)
	{
		SetProperty(0x1424, VT_BOOL, propVal);
	}
	BOOL GetLoadLastFile()
	{
		BOOL result;
		GetProperty(0x1410, VT_BOOL, (void*)&result);
		return result;
	}
	void SetLoadLastFile(BOOL propVal)
	{
		SetProperty(0x1410, VT_BOOL, propVal);
	}
	BOOL GetPromptForSummaryInfo()
	{
		BOOL result;
		GetProperty(0x141d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetPromptForSummaryInfo(BOOL propVal)
	{
		SetProperty(0x141d, VT_BOOL, propVal);
	}
	BOOL GetDisplayOLEIndicator()
	{
		BOOL result;
		GetProperty(0x1422, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayOLEIndicator(BOOL propVal)
	{
		SetProperty(0x1422, VT_BOOL, propVal);
	}
	long GetDefaultDateFormat()
	{
		long result;
		GetProperty(0x1405, VT_I4, (void*)&result);
		return result;
	}
	void SetDefaultDateFormat(long propVal)
	{
		SetProperty(0x1405, VT_I4, propVal);
	}
	BOOL GetDayLeadingZero()
	{
		BOOL result;
		GetProperty(0x1426, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDayLeadingZero(BOOL propVal)
	{
		SetProperty(0x1426, VT_BOOL, propVal);
	}
	BOOL GetMonthLeadingZero()
	{
		BOOL result;
		GetProperty(0x1427, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMonthLeadingZero(BOOL propVal)
	{
		SetProperty(0x1427, VT_BOOL, propVal);
	}
	BOOL GetTimeLeadingZero()
	{
		BOOL result;
		GetProperty(0x1428, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTimeLeadingZero(BOOL propVal)
	{
		SetProperty(0x1428, VT_BOOL, propVal);
	}
	BOOL GetCopyResourceUsageHeader()
	{
		BOOL result;
		GetProperty(0x1412, VT_BOOL, (void*)&result);
		return result;
	}
	void SetCopyResourceUsageHeader(BOOL propVal)
	{
		SetProperty(0x1412, VT_BOOL, propVal);
	}
	long GetRecentFilesMaximum()
	{
		long result;
		GetProperty(0x142a, VT_I4, (void*)&result);
		return result;
	}
	void SetRecentFilesMaximum(long propVal)
	{
		SetProperty(0x142a, VT_I4, propVal);
	}
	BOOL GetDisplayRecentFiles()
	{
		BOOL result;
		GetProperty(0x1429, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayRecentFiles(BOOL propVal)
	{
		SetProperty(0x1429, VT_BOOL, propVal);
	}
	BOOL GetMacroVirusProtection()
	{
		BOOL result;
		GetProperty(0x142b, VT_BOOL, (void*)&result);
		return result;
	}
	void SetMacroVirusProtection(BOOL propVal)
	{
		SetProperty(0x142b, VT_BOOL, propVal);
	}
	long GetShowAssignmentUnitsAs()
	{
		long result;
		GetProperty(0x142c, VT_I4, (void*)&result);
		return result;
	}
	void SetShowAssignmentUnitsAs(long propVal)
	{
		SetProperty(0x142c, VT_I4, propVal);
	}
	BOOL GetAutomaticallyFillPhoneticFields()
	{
		BOOL result;
		GetProperty(0x142d, VT_BOOL, (void*)&result);
		return result;
	}
	void SetAutomaticallyFillPhoneticFields(BOOL propVal)
	{
		SetProperty(0x142d, VT_BOOL, propVal);
	}
	BOOL GetDefaultAutoFilter()
	{
		BOOL result;
		GetProperty(0x142e, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDefaultAutoFilter(BOOL propVal)
	{
		SetProperty(0x142e, VT_BOOL, propVal);
	}
	BOOL GetShowEstimatedDuration()
	{
		BOOL result;
		GetProperty(0x1432, VT_BOOL, (void*)&result);
		return result;
	}
	void SetShowEstimatedDuration(BOOL propVal)
	{
		SetProperty(0x1432, VT_BOOL, propVal);
	}
	BOOL GetNewTasksEstimated()
	{
		BOOL result;
		GetProperty(0x1433, VT_BOOL, (void*)&result);
		return result;
	}
	void SetNewTasksEstimated(BOOL propVal)
	{
		SetProperty(0x1433, VT_BOOL, propVal);
	}
	Assistant * GetAssistant()
	{
		Assistant * result;
		GetProperty(0x13b2, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetAssistant(Assistant * propVal)
	{
		SetProperty(0x13b2, VT_DISPATCH, propVal);
	}
	BOOL GetDisplayViewBar()
	{
		BOOL result;
		GetProperty(0x13b7, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayViewBar(BOOL propVal)
	{
		SetProperty(0x13b7, VT_BOOL, propVal);
	}
	VBE * GetVBE()
	{
		VBE * result;
		GetProperty(0x13b3, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetVBE(VBE * propVal)
	{
		SetProperty(0x13b3, VT_DISPATCH, propVal);
	}
	long GetEnableCancelKey()
	{
		long result;
		GetProperty(0x13b4, VT_I4, (void*)&result);
		return result;
	}
	void SetEnableCancelKey(long propVal)
	{
		SetProperty(0x13b4, VT_I4, propVal);
	}
	BOOL GetUserControl()
	{
		BOOL result;
		GetProperty(0x13b6, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUserControl(BOOL propVal)
	{
		SetProperty(0x13b6, VT_BOOL, propVal);
	}
	double GetUsableWidth()
	{
		double result;
		GetProperty(0x139a, VT_R8, (void*)&result);
		return result;
	}
	void SetUsableWidth(double propVal)
	{
		SetProperty(0x139a, VT_R8, propVal);
	}
	double GetUsableHeight()
	{
		double result;
		GetProperty(0x1399, VT_R8, (void*)&result);
		return result;
	}
	void SetUsableHeight(double propVal)
	{
		SetProperty(0x1399, VT_R8, propVal);
	}
	VARIANT GetStatusBar()
	{
		VARIANT result;
		GetProperty(0x13ba, VT_VARIANT, (void*)&result);
		return result;
	}
	void SetStatusBar(VARIANT &propVal)
	{
		SetProperty(0x13ba, VT_VARIANT, &propVal);
	}
	FileSearch * GetFileSearch()
	{
		FileSearch * result;
		GetProperty(0x13bb, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetFileSearch(FileSearch * propVal)
	{
		SetProperty(0x13bb, VT_DISPATCH, propVal);
	}
	BOOL GetScreenUpdating()
	{
		BOOL result;
		GetProperty(0x13b5, VT_BOOL, (void*)&result);
		return result;
	}
	void SetScreenUpdating(BOOL propVal)
	{
		SetProperty(0x13b5, VT_BOOL, propVal);
	}
	BOOL GetDisplayProjectGuide()
	{
		BOOL result;
		GetProperty(0x1435, VT_BOOL, (void*)&result);
		return result;
	}
	void SetDisplayProjectGuide(BOOL propVal)
	{
		SetProperty(0x1435, VT_BOOL, propVal);
	}
	MsoAutomationSecurity GetAutomationSecurity()
	{
		MsoAutomationSecurity result;
		GetProperty(0x13d9, VT_I4, (void*)&result);
		return result;
	}
	void SetAutomationSecurity(MsoAutomationSecurity propVal)
	{
		SetProperty(0x13d9, VT_I4, propVal);
	}
	BOOL GetEnterpriseAllowLocalBaseCalendars()
	{
		BOOL result;
		GetProperty(0x13b8, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnterpriseAllowLocalBaseCalendars(BOOL propVal)
	{
		SetProperty(0x13b8, VT_BOOL, propVal);
	}
	long GetEdition()
	{
		long result;
		GetProperty(0x13d5, VT_I4, (void*)&result);
		return result;
	}
	void SetEdition(long propVal)
	{
		SetProperty(0x13d5, VT_I4, propVal);
	}
	Profiles * GetProfiles()
	{
		Profiles * result;
		GetProperty(0x13ae, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetProfiles(Profiles * propVal)
	{
		SetProperty(0x13ae, VT_DISPATCH, propVal);
	}
	Calendars * GetGlobalBaseCalendars()
	{
		Calendars * result;
		GetProperty(0x13db, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalBaseCalendars(Calendars * propVal)
	{
		SetProperty(0x13db, VT_DISPATCH, propVal);
	}
	Views * GetGlobalViews()
	{
		Views * result;
		GetProperty(0x13cc, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViews(Views * propVal)
	{
		SetProperty(0x13cc, VT_DISPATCH, propVal);
	}
	ViewsSingle * GetGlobalViewsSingle()
	{
		ViewsSingle * result;
		GetProperty(0x13cd, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViewsSingle(ViewsSingle * propVal)
	{
		SetProperty(0x13cd, VT_DISPATCH, propVal);
	}
	ViewsCombination * GetGlobalViewsCombination()
	{
		ViewsCombination * result;
		GetProperty(0x13ce, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalViewsCombination(ViewsCombination * propVal)
	{
		SetProperty(0x13ce, VT_DISPATCH, propVal);
	}
	Tables * GetGlobalTaskTables()
	{
		Tables * result;
		GetProperty(0x13cf, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalTaskTables(Tables * propVal)
	{
		SetProperty(0x13cf, VT_DISPATCH, propVal);
	}
	Tables * GetGlobalResourceTables()
	{
		Tables * result;
		GetProperty(0x13d0, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalResourceTables(Tables * propVal)
	{
		SetProperty(0x13d0, VT_DISPATCH, propVal);
	}
	Filters * GetGlobalTaskFilters()
	{
		Filters * result;
		GetProperty(0x13d1, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalTaskFilters(Filters * propVal)
	{
		SetProperty(0x13d1, VT_DISPATCH, propVal);
	}
	Filters * GetGlobalResourceFilters()
	{
		Filters * result;
		GetProperty(0x13d2, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalResourceFilters(Filters * propVal)
	{
		SetProperty(0x13d2, VT_DISPATCH, propVal);
	}
	OutlineCodes * GetGlobalOutlineCodes()
	{
		OutlineCodes * result;
		GetProperty(0x13b0, VT_DISPATCH, (void*)&result);
		return result;
	}
	void SetGlobalOutlineCodes(OutlineCodes * propVal)
	{
		SetProperty(0x13b0, VT_DISPATCH, propVal);
	}
	CString GetEnterpriseListSeparator()
	{
		CString result;
		GetProperty(0x13c6, VT_BSTR, (void*)&result);
		return result;
	}
	void SetEnterpriseListSeparator(CString propVal)
	{
		SetProperty(0x13c6, VT_BSTR, propVal);
	}
	BOOL GetEnterpriseProtectActuals()
	{
		BOOL result;
		GetProperty(0x1458, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnterpriseProtectActuals(BOOL propVal)
	{
		SetProperty(0x1458, VT_BOOL, propVal);
	}
	BOOL GetUse3DLook()
	{
		BOOL result;
		GetProperty(0x143a, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUse3DLook(BOOL propVal)
	{
		SetProperty(0x143a, VT_BOOL, propVal);
	}
	BOOL GetUseOMIDs()
	{
		BOOL result;
		GetProperty(0x1437, VT_BOOL, (void*)&result);
		return result;
	}
	void SetUseOMIDs(BOOL propVal)
	{
		SetProperty(0x1437, VT_BOOL, propVal);
	}
	long GetUndoLevels()
	{
		long result;
		GetProperty(0x143b, VT_I4, (void*)&result);
		return result;
	}
	void SetUndoLevels(long propVal)
	{
		SetProperty(0x143b, VT_I4, propVal);
	}
	BOOL GetEnableChangeHighlighting()
	{
		BOOL result;
		GetProperty(0x1466, VT_BOOL, (void*)&result);
		return result;
	}
	void SetEnableChangeHighlighting(BOOL propVal)
	{
		SetProperty(0x1466, VT_BOOL, propVal);
	}
	CString GetVisualReportsAdditionalTemplatePath()
	{
		CString result;
		GetProperty(0x146f, VT_BSTR, (void*)&result);
		return result;
	}
	void SetVisualReportsAdditionalTemplatePath(CString propVal)
	{
		SetProperty(0x146f, VT_BSTR, propVal);
	}
	BOOL GetTrustProjectServerAndWSSPages()
	{
		BOOL result;
		GetProperty(0x143c, VT_BOOL, (void*)&result);
		return result;
	}
	void SetTrustProjectServerAndWSSPages(BOOL propVal)
	{
		SetProperty(0x143c, VT_BOOL, propVal);
	}

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CActualStartDrivers wrapper class

class CActualStartDrivers : public COleDispatchDriver
{
public:
	CActualStartDrivers(){} // Calls COleDispatchDriver default constructor
	CActualStartDrivers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CActualStartDrivers(const CActualStartDrivers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ActualStartDrivers methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TotalDetectedCount()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// ActualStartDrivers properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CAssignment wrapper class

class CAssignment : public COleDispatchDriver
{
public:
	CAssignment(){} // Calls COleDispatchDriver default constructor
	CAssignment(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CAssignment(const CAssignment& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Assignment methods
public:
	long get_UniqueID()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TaskUniqueID()
	{
		long result;
		InvokeHelper(0xf400001, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_TaskUniqueID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400001, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ResourceUniqueID()
	{
		long result;
		InvokeHelper(0xf400002, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ResourceUniqueID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400002, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_TaskID()
	{
		long result;
		InvokeHelper(0xf400003, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_TaskID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400003, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ResourceID()
	{
		long result;
		InvokeHelper(0xf400004, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ResourceID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_TaskName()
	{
		CString result;
		InvokeHelper(0xf400005, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_TaskName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400005, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ResourceName()
	{
		CString result;
		InvokeHelper(0xf400006, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_ResourceName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Units()
	{
		VARIANT result;
		InvokeHelper(0xf400007, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Units(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400007, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Work()
	{
		VARIANT result;
		InvokeHelper(0xf400008, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_OvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xf400009, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_OvertimeWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400009, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualWork()
	{
		VARIANT result;
		InvokeHelper(0xf40000a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40000a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_RegularWork()
	{
		VARIANT result;
		InvokeHelper(0xf40000b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_RegularWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40000b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_RemainingWork()
	{
		VARIANT result;
		InvokeHelper(0xf40000c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_RemainingWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40000c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xf40000d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualOvertimeWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40000d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_RemainingOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xf40000e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_RemainingOvertimeWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40000e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineWork()
	{
		VARIANT result;
		InvokeHelper(0xf400010, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400010, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Peak()
	{
		VARIANT result;
		InvokeHelper(0xf400013, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0xf400014, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400014, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400015, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400015, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualStart()
	{
		VARIANT result;
		InvokeHelper(0xf400016, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400016, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualFinish()
	{
		VARIANT result;
		InvokeHelper(0xf400017, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400017, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Delay()
	{
		VARIANT result;
		InvokeHelper(0xf400019, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Delay(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400019, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost()
	{
		VARIANT result;
		InvokeHelper(0xf40001a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40001a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_OvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xf40001b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualCost()
	{
		VARIANT result;
		InvokeHelper(0xf40001c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40001c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_RemainingCost()
	{
		VARIANT result;
		InvokeHelper(0xf40001d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xf40001e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xf40001f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BaselineCost()
	{
		VARIANT result;
		InvokeHelper(0xf400020, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400020, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BCWS()
	{
		VARIANT result;
		InvokeHelper(0xf400022, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWP()
	{
		VARIANT result;
		InvokeHelper(0xf400023, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ACWP()
	{
		VARIANT result;
		InvokeHelper(0xf400024, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_SV()
	{
		VARIANT result;
		InvokeHelper(0xf400025, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CostVariance()
	{
		VARIANT result;
		InvokeHelper(0xf400026, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_WorkContour()
	{
		long result;
		InvokeHelper(0xf400027, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_WorkContour(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400027, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_PercentWorkComplete()
	{
		VARIANT result;
		InvokeHelper(0xf40002b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_PercentWorkComplete(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40002b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Project()
	{
		CString result;
		InvokeHelper(0xf40002c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_Notes()
	{
		CString result;
		InvokeHelper(0xf400047, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Notes(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400047, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Confirmed()
	{
		VARIANT result;
		InvokeHelper(0xf400048, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Confirmed(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400048, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ResponsePending()
	{
		VARIANT result;
		InvokeHelper(0xf400049, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ResponsePending(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400049, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_UpdateNeeded()
	{
		VARIANT result;
		InvokeHelper(0xf40004a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_TeamStatusPending()
	{
		VARIANT result;
		InvokeHelper(0xf40004b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_TeamStatusPending(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40004b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_CostRateTable()
	{
		VARIANT result;
		InvokeHelper(0xf400050, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_CostRateTable(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400050, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xf400055, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xf400056, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Text1()
	{
		CString result;
		InvokeHelper(0xf400058, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400058, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text2()
	{
		CString result;
		InvokeHelper(0xf400059, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400059, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text3()
	{
		CString result;
		InvokeHelper(0xf40005a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text4()
	{
		CString result;
		InvokeHelper(0xf40005b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text5()
	{
		CString result;
		InvokeHelper(0xf40005c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text6()
	{
		CString result;
		InvokeHelper(0xf40005d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text7()
	{
		CString result;
		InvokeHelper(0xf40005e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text8()
	{
		CString result;
		InvokeHelper(0xf40005f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40005f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text9()
	{
		CString result;
		InvokeHelper(0xf400060, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400060, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text10()
	{
		CString result;
		InvokeHelper(0xf400061, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400061, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start1()
	{
		VARIANT result;
		InvokeHelper(0xf400062, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400062, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start2()
	{
		VARIANT result;
		InvokeHelper(0xf400063, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400063, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start3()
	{
		VARIANT result;
		InvokeHelper(0xf400064, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400064, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start4()
	{
		VARIANT result;
		InvokeHelper(0xf400065, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400065, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start5()
	{
		VARIANT result;
		InvokeHelper(0xf400066, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400066, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish1()
	{
		VARIANT result;
		InvokeHelper(0xf400067, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish2()
	{
		VARIANT result;
		InvokeHelper(0xf400068, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400068, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish3()
	{
		VARIANT result;
		InvokeHelper(0xf400069, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400069, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish4()
	{
		VARIANT result;
		InvokeHelper(0xf40006a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40006a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish5()
	{
		VARIANT result;
		InvokeHelper(0xf40006b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40006b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_Number1()
	{
		double result;
		InvokeHelper(0xf40006c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf40006c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number2()
	{
		double result;
		InvokeHelper(0xf40006d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf40006d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number3()
	{
		double result;
		InvokeHelper(0xf40006e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf40006e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number4()
	{
		double result;
		InvokeHelper(0xf40006f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf40006f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number5()
	{
		double result;
		InvokeHelper(0xf400070, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf400070, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Duration1()
	{
		VARIANT result;
		InvokeHelper(0xf400071, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400071, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration2()
	{
		VARIANT result;
		InvokeHelper(0xf400072, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400072, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration3()
	{
		VARIANT result;
		InvokeHelper(0xf400073, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400073, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost1()
	{
		VARIANT result;
		InvokeHelper(0xf400077, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400077, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost2()
	{
		VARIANT result;
		InvokeHelper(0xf400078, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400078, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost3()
	{
		VARIANT result;
		InvokeHelper(0xf400079, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400079, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag10()
	{
		VARIANT result;
		InvokeHelper(0xf40007a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag1()
	{
		VARIANT result;
		InvokeHelper(0xf40007b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag2()
	{
		VARIANT result;
		InvokeHelper(0xf40007c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag3()
	{
		VARIANT result;
		InvokeHelper(0xf40007d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag4()
	{
		VARIANT result;
		InvokeHelper(0xf40007e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag5()
	{
		VARIANT result;
		InvokeHelper(0xf40007f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40007f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag6()
	{
		VARIANT result;
		InvokeHelper(0xf400080, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400080, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag7()
	{
		VARIANT result;
		InvokeHelper(0xf400081, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400081, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag8()
	{
		VARIANT result;
		InvokeHelper(0xf400082, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400082, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag9()
	{
		VARIANT result;
		InvokeHelper(0xf400083, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400083, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_LinkedFields()
	{
		VARIANT result;
		InvokeHelper(0xf400084, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Overallocated()
	{
		VARIANT result;
		InvokeHelper(0xf400087, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0xf400088, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AppendNotes(LPCTSTR Value)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400089, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Value);
	}
	LPDISPATCH TimeScaleData(VARIANT& StartDate, VARIANT& EndDate, long Type, long TimeScaleUnit, long Count)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xf40008c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &StartDate, &EndDate, Type, TimeScaleUnit, Count);
		return result;
	}
	CString get_TaskSummaryName()
	{
		CString result;
		InvokeHelper(0xf40008e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LevelingDelay()
	{
		VARIANT result;
		InvokeHelper(0xf400091, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_LevelingDelay(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400091, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineStart()
	{
		VARIANT result;
		InvokeHelper(0xf400092, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400092, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineFinish()
	{
		VARIANT result;
		InvokeHelper(0xf400093, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400093, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Hyperlink()
	{
		CString result;
		InvokeHelper(0xf400098, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Hyperlink(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400098, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkAddress()
	{
		CString result;
		InvokeHelper(0xf400099, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400099, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkSubAddress()
	{
		CString result;
		InvokeHelper(0xf40009a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkSubAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40009a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkHREF()
	{
		CString result;
		InvokeHelper(0xf40009b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkHREF(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40009b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Cost4()
	{
		VARIANT result;
		InvokeHelper(0xf40009f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40009f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost5()
	{
		VARIANT result;
		InvokeHelper(0xf4000a0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost6()
	{
		VARIANT result;
		InvokeHelper(0xf4000a1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost7()
	{
		VARIANT result;
		InvokeHelper(0xf4000a2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost8()
	{
		VARIANT result;
		InvokeHelper(0xf4000a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost9()
	{
		VARIANT result;
		InvokeHelper(0xf4000a4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost10()
	{
		VARIANT result;
		InvokeHelper(0xf4000a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date1()
	{
		VARIANT result;
		InvokeHelper(0xf4000a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date2()
	{
		VARIANT result;
		InvokeHelper(0xf4000a7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date3()
	{
		VARIANT result;
		InvokeHelper(0xf4000a8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date4()
	{
		VARIANT result;
		InvokeHelper(0xf4000a9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date5()
	{
		VARIANT result;
		InvokeHelper(0xf4000aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date6()
	{
		VARIANT result;
		InvokeHelper(0xf4000ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date7()
	{
		VARIANT result;
		InvokeHelper(0xf4000ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date8()
	{
		VARIANT result;
		InvokeHelper(0xf4000ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date9()
	{
		VARIANT result;
		InvokeHelper(0xf4000ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date10()
	{
		VARIANT result;
		InvokeHelper(0xf4000af, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000af, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration4()
	{
		VARIANT result;
		InvokeHelper(0xf4000b0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration5()
	{
		VARIANT result;
		InvokeHelper(0xf4000b1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration6()
	{
		VARIANT result;
		InvokeHelper(0xf4000b2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration7()
	{
		VARIANT result;
		InvokeHelper(0xf4000b3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration8()
	{
		VARIANT result;
		InvokeHelper(0xf4000b4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration9()
	{
		VARIANT result;
		InvokeHelper(0xf4000b5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration10()
	{
		VARIANT result;
		InvokeHelper(0xf4000b6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish6()
	{
		VARIANT result;
		InvokeHelper(0xf4000b7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish7()
	{
		VARIANT result;
		InvokeHelper(0xf4000b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish8()
	{
		VARIANT result;
		InvokeHelper(0xf4000b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish9()
	{
		VARIANT result;
		InvokeHelper(0xf4000ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish10()
	{
		VARIANT result;
		InvokeHelper(0xf4000bb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag11()
	{
		VARIANT result;
		InvokeHelper(0xf4000bc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag12()
	{
		VARIANT result;
		InvokeHelper(0xf4000bd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag13()
	{
		VARIANT result;
		InvokeHelper(0xf4000be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag14()
	{
		VARIANT result;
		InvokeHelper(0xf4000bf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag15()
	{
		VARIANT result;
		InvokeHelper(0xf4000c0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag16()
	{
		VARIANT result;
		InvokeHelper(0xf4000c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag17()
	{
		VARIANT result;
		InvokeHelper(0xf4000c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag18()
	{
		VARIANT result;
		InvokeHelper(0xf4000c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag19()
	{
		VARIANT result;
		InvokeHelper(0xf4000c4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag20()
	{
		VARIANT result;
		InvokeHelper(0xf4000c5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_Number6()
	{
		double result;
		InvokeHelper(0xf4000c6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number7()
	{
		double result;
		InvokeHelper(0xf4000c7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number8()
	{
		double result;
		InvokeHelper(0xf4000c8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number9()
	{
		double result;
		InvokeHelper(0xf4000c9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number10()
	{
		double result;
		InvokeHelper(0xf4000ca, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number11()
	{
		double result;
		InvokeHelper(0xf4000cb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number12()
	{
		double result;
		InvokeHelper(0xf4000cc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number13()
	{
		double result;
		InvokeHelper(0xf4000cd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number14()
	{
		double result;
		InvokeHelper(0xf4000ce, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number15()
	{
		double result;
		InvokeHelper(0xf4000cf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number16()
	{
		double result;
		InvokeHelper(0xf4000d0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number17()
	{
		double result;
		InvokeHelper(0xf4000d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number18()
	{
		double result;
		InvokeHelper(0xf4000d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number19()
	{
		double result;
		InvokeHelper(0xf4000d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number20()
	{
		double result;
		InvokeHelper(0xf4000d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4000d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start6()
	{
		VARIANT result;
		InvokeHelper(0xf4000d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start7()
	{
		VARIANT result;
		InvokeHelper(0xf4000d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start8()
	{
		VARIANT result;
		InvokeHelper(0xf4000d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start9()
	{
		VARIANT result;
		InvokeHelper(0xf4000d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start10()
	{
		VARIANT result;
		InvokeHelper(0xf4000d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4000d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text11()
	{
		CString result;
		InvokeHelper(0xf4000da, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text12()
	{
		CString result;
		InvokeHelper(0xf4000db, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text13()
	{
		CString result;
		InvokeHelper(0xf4000dc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text14()
	{
		CString result;
		InvokeHelper(0xf4000dd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text15()
	{
		CString result;
		InvokeHelper(0xf4000de, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text16()
	{
		CString result;
		InvokeHelper(0xf4000df, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text17()
	{
		CString result;
		InvokeHelper(0xf4000e0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text18()
	{
		CString result;
		InvokeHelper(0xf4000e1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text19()
	{
		CString result;
		InvokeHelper(0xf4000e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text20()
	{
		CString result;
		InvokeHelper(0xf4000e3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text21()
	{
		CString result;
		InvokeHelper(0xf4000e4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text22()
	{
		CString result;
		InvokeHelper(0xf4000e5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text23()
	{
		CString result;
		InvokeHelper(0xf4000e6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text24()
	{
		CString result;
		InvokeHelper(0xf4000e7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text25()
	{
		CString result;
		InvokeHelper(0xf4000e8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text26()
	{
		CString result;
		InvokeHelper(0xf4000e9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text27()
	{
		CString result;
		InvokeHelper(0xf4000ea, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text28()
	{
		CString result;
		InvokeHelper(0xf4000eb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text29()
	{
		CString result;
		InvokeHelper(0xf4000ec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text30()
	{
		CString result;
		InvokeHelper(0xf4000ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4000ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xf4000f6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CV()
	{
		VARIANT result;
		InvokeHelper(0xf4000f7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_WorkVariance()
	{
		VARIANT result;
		InvokeHelper(0xf4000f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_StartVariance()
	{
		VARIANT result;
		InvokeHelper(0xf400106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FinishVariance()
	{
		VARIANT result;
		InvokeHelper(0xf400107, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_VAC()
	{
		VARIANT result;
		InvokeHelper(0xf40010f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FixedMaterialAssignment()
	{
		VARIANT result;
		InvokeHelper(0xf400113, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_ResourceType()
	{
		long result;
		InvokeHelper(0xf400114, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_HyperlinkScreenTip()
	{
		CString result;
		InvokeHelper(0xf400117, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkScreenTip(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400117, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline1Work()
	{
		VARIANT result;
		InvokeHelper(0xf400121, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400121, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400122, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400122, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Start()
	{
		VARIANT result;
		InvokeHelper(0xf400127, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400127, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400128, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Work()
	{
		VARIANT result;
		InvokeHelper(0xf40012a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40012a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Cost()
	{
		VARIANT result;
		InvokeHelper(0xf40012b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40012b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Start()
	{
		VARIANT result;
		InvokeHelper(0xf400130, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400130, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400131, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400131, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Work()
	{
		VARIANT result;
		InvokeHelper(0xf400133, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400133, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400134, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400134, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Start()
	{
		VARIANT result;
		InvokeHelper(0xf400139, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400139, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Finish()
	{
		VARIANT result;
		InvokeHelper(0xf40013a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40013a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Work()
	{
		VARIANT result;
		InvokeHelper(0xf40013c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40013c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Cost()
	{
		VARIANT result;
		InvokeHelper(0xf40013d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40013d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Start()
	{
		VARIANT result;
		InvokeHelper(0xf400142, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400142, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400143, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400143, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Work()
	{
		VARIANT result;
		InvokeHelper(0xf400145, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400145, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400146, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400146, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Start()
	{
		VARIANT result;
		InvokeHelper(0xf40014b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40014b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Finish()
	{
		VARIANT result;
		InvokeHelper(0xf40014c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40014c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Work()
	{
		VARIANT result;
		InvokeHelper(0xf40014e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40014e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Cost()
	{
		VARIANT result;
		InvokeHelper(0xf40014f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40014f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Start()
	{
		VARIANT result;
		InvokeHelper(0xf400154, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400154, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400155, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400155, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Work()
	{
		VARIANT result;
		InvokeHelper(0xf400157, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400157, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400158, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400158, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Start()
	{
		VARIANT result;
		InvokeHelper(0xf40015d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40015d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Finish()
	{
		VARIANT result;
		InvokeHelper(0xf40015e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40015e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Work()
	{
		VARIANT result;
		InvokeHelper(0xf400160, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400160, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400161, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400161, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Start()
	{
		VARIANT result;
		InvokeHelper(0xf400166, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400166, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400167, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400167, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Work()
	{
		VARIANT result;
		InvokeHelper(0xf400169, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400169, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Cost()
	{
		VARIANT result;
		InvokeHelper(0xf40016a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40016a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Start()
	{
		VARIANT result;
		InvokeHelper(0xf40016f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40016f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400170, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400170, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Work()
	{
		VARIANT result;
		InvokeHelper(0xf400172, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400172, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Cost()
	{
		VARIANT result;
		InvokeHelper(0xf400173, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400173, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Start()
	{
		VARIANT result;
		InvokeHelper(0xf400178, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400178, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Finish()
	{
		VARIANT result;
		InvokeHelper(0xf400179, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400179, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_TaskOutlineNumber()
	{
		CString result;
		InvokeHelper(0xf40017b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseCost1()
	{
		VARIANT result;
		InvokeHelper(0xf40017d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40017d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost2()
	{
		VARIANT result;
		InvokeHelper(0xf40017e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40017e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost3()
	{
		VARIANT result;
		InvokeHelper(0xf40017f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40017f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost4()
	{
		VARIANT result;
		InvokeHelper(0xf400180, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400180, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost5()
	{
		VARIANT result;
		InvokeHelper(0xf400181, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400181, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost6()
	{
		VARIANT result;
		InvokeHelper(0xf400182, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost7()
	{
		VARIANT result;
		InvokeHelper(0xf400183, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400183, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost8()
	{
		VARIANT result;
		InvokeHelper(0xf400184, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400184, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost9()
	{
		VARIANT result;
		InvokeHelper(0xf400185, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400185, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost10()
	{
		VARIANT result;
		InvokeHelper(0xf400186, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400186, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate1()
	{
		VARIANT result;
		InvokeHelper(0xf400187, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400187, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate2()
	{
		VARIANT result;
		InvokeHelper(0xf400188, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400188, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate3()
	{
		VARIANT result;
		InvokeHelper(0xf400189, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400189, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate4()
	{
		VARIANT result;
		InvokeHelper(0xf40018a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate5()
	{
		VARIANT result;
		InvokeHelper(0xf40018b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate6()
	{
		VARIANT result;
		InvokeHelper(0xf40018c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate7()
	{
		VARIANT result;
		InvokeHelper(0xf40018d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate8()
	{
		VARIANT result;
		InvokeHelper(0xf40018e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate9()
	{
		VARIANT result;
		InvokeHelper(0xf40018f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40018f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate10()
	{
		VARIANT result;
		InvokeHelper(0xf400190, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400190, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate11()
	{
		VARIANT result;
		InvokeHelper(0xf400191, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400191, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate12()
	{
		VARIANT result;
		InvokeHelper(0xf400192, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400192, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate13()
	{
		VARIANT result;
		InvokeHelper(0xf400193, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400193, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate14()
	{
		VARIANT result;
		InvokeHelper(0xf400194, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400194, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate15()
	{
		VARIANT result;
		InvokeHelper(0xf400195, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400195, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate16()
	{
		VARIANT result;
		InvokeHelper(0xf400196, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400196, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate17()
	{
		VARIANT result;
		InvokeHelper(0xf400197, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400197, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate18()
	{
		VARIANT result;
		InvokeHelper(0xf400198, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400198, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate19()
	{
		VARIANT result;
		InvokeHelper(0xf400199, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400199, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate20()
	{
		VARIANT result;
		InvokeHelper(0xf40019a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate21()
	{
		VARIANT result;
		InvokeHelper(0xf40019b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate21(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate22()
	{
		VARIANT result;
		InvokeHelper(0xf40019c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate22(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate23()
	{
		VARIANT result;
		InvokeHelper(0xf40019d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate23(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate24()
	{
		VARIANT result;
		InvokeHelper(0xf40019e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate24(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate25()
	{
		VARIANT result;
		InvokeHelper(0xf40019f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate25(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40019f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate26()
	{
		VARIANT result;
		InvokeHelper(0xf4001a0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate26(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate27()
	{
		VARIANT result;
		InvokeHelper(0xf4001a1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate27(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate28()
	{
		VARIANT result;
		InvokeHelper(0xf4001a2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate28(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate29()
	{
		VARIANT result;
		InvokeHelper(0xf4001a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate29(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate30()
	{
		VARIANT result;
		InvokeHelper(0xf4001a4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate30(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration1()
	{
		VARIANT result;
		InvokeHelper(0xf4001a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration2()
	{
		VARIANT result;
		InvokeHelper(0xf4001a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration3()
	{
		VARIANT result;
		InvokeHelper(0xf4001a7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration4()
	{
		VARIANT result;
		InvokeHelper(0xf4001a8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration5()
	{
		VARIANT result;
		InvokeHelper(0xf4001a9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration6()
	{
		VARIANT result;
		InvokeHelper(0xf4001aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration7()
	{
		VARIANT result;
		InvokeHelper(0xf4001ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration8()
	{
		VARIANT result;
		InvokeHelper(0xf4001ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration9()
	{
		VARIANT result;
		InvokeHelper(0xf4001ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration10()
	{
		VARIANT result;
		InvokeHelper(0xf4001ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag1()
	{
		VARIANT result;
		InvokeHelper(0xf4001b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag2()
	{
		VARIANT result;
		InvokeHelper(0xf4001ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag3()
	{
		VARIANT result;
		InvokeHelper(0xf4001bb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag4()
	{
		VARIANT result;
		InvokeHelper(0xf4001bc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag5()
	{
		VARIANT result;
		InvokeHelper(0xf4001bd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag6()
	{
		VARIANT result;
		InvokeHelper(0xf4001be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag7()
	{
		VARIANT result;
		InvokeHelper(0xf4001bf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag8()
	{
		VARIANT result;
		InvokeHelper(0xf4001c0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag9()
	{
		VARIANT result;
		InvokeHelper(0xf4001c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag10()
	{
		VARIANT result;
		InvokeHelper(0xf4001c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag11()
	{
		VARIANT result;
		InvokeHelper(0xf4001c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag12()
	{
		VARIANT result;
		InvokeHelper(0xf4001c4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag13()
	{
		VARIANT result;
		InvokeHelper(0xf4001c5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag14()
	{
		VARIANT result;
		InvokeHelper(0xf4001c6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag15()
	{
		VARIANT result;
		InvokeHelper(0xf4001c7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag16()
	{
		VARIANT result;
		InvokeHelper(0xf4001c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag17()
	{
		VARIANT result;
		InvokeHelper(0xf4001c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag18()
	{
		VARIANT result;
		InvokeHelper(0xf4001ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag19()
	{
		VARIANT result;
		InvokeHelper(0xf4001cb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag20()
	{
		VARIANT result;
		InvokeHelper(0xf4001cc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4001cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_EnterpriseNumber1()
	{
		double result;
		InvokeHelper(0xf4001cd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber2()
	{
		double result;
		InvokeHelper(0xf4001ce, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber3()
	{
		double result;
		InvokeHelper(0xf4001cf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber4()
	{
		double result;
		InvokeHelper(0xf4001d0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber5()
	{
		double result;
		InvokeHelper(0xf4001d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber6()
	{
		double result;
		InvokeHelper(0xf4001d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber7()
	{
		double result;
		InvokeHelper(0xf4001d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber8()
	{
		double result;
		InvokeHelper(0xf4001d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber9()
	{
		double result;
		InvokeHelper(0xf4001d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber10()
	{
		double result;
		InvokeHelper(0xf4001d6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber11()
	{
		double result;
		InvokeHelper(0xf4001d7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber12()
	{
		double result;
		InvokeHelper(0xf4001d8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber13()
	{
		double result;
		InvokeHelper(0xf4001d9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber14()
	{
		double result;
		InvokeHelper(0xf4001da, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber15()
	{
		double result;
		InvokeHelper(0xf4001db, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber16()
	{
		double result;
		InvokeHelper(0xf4001dc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber17()
	{
		double result;
		InvokeHelper(0xf4001dd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber18()
	{
		double result;
		InvokeHelper(0xf4001de, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber19()
	{
		double result;
		InvokeHelper(0xf4001df, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber20()
	{
		double result;
		InvokeHelper(0xf4001e0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber21()
	{
		double result;
		InvokeHelper(0xf4001e1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber21(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber22()
	{
		double result;
		InvokeHelper(0xf4001e2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber22(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber23()
	{
		double result;
		InvokeHelper(0xf4001e3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber23(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber24()
	{
		double result;
		InvokeHelper(0xf4001e4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber24(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber25()
	{
		double result;
		InvokeHelper(0xf4001e5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber25(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber26()
	{
		double result;
		InvokeHelper(0xf4001e6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber26(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber27()
	{
		double result;
		InvokeHelper(0xf4001e7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber27(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber28()
	{
		double result;
		InvokeHelper(0xf4001e8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber28(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber29()
	{
		double result;
		InvokeHelper(0xf4001e9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber29(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber30()
	{
		double result;
		InvokeHelper(0xf4001ea, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber30(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber31()
	{
		double result;
		InvokeHelper(0xf4001eb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber31(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber32()
	{
		double result;
		InvokeHelper(0xf4001ec, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber32(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber33()
	{
		double result;
		InvokeHelper(0xf4001ed, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber33(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber34()
	{
		double result;
		InvokeHelper(0xf4001ee, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber34(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber35()
	{
		double result;
		InvokeHelper(0xf4001ef, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber35(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber36()
	{
		double result;
		InvokeHelper(0xf4001f0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber36(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber37()
	{
		double result;
		InvokeHelper(0xf4001f1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber37(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber38()
	{
		double result;
		InvokeHelper(0xf4001f2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber38(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber39()
	{
		double result;
		InvokeHelper(0xf4001f3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber39(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber40()
	{
		double result;
		InvokeHelper(0xf4001f4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber40(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xf4001f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText1()
	{
		CString result;
		InvokeHelper(0xf4001f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText2()
	{
		CString result;
		InvokeHelper(0xf4001f6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText3()
	{
		CString result;
		InvokeHelper(0xf4001f7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText4()
	{
		CString result;
		InvokeHelper(0xf4001f8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText5()
	{
		CString result;
		InvokeHelper(0xf4001f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText6()
	{
		CString result;
		InvokeHelper(0xf4001fa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText7()
	{
		CString result;
		InvokeHelper(0xf4001fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText8()
	{
		CString result;
		InvokeHelper(0xf4001fc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText9()
	{
		CString result;
		InvokeHelper(0xf4001fd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText10()
	{
		CString result;
		InvokeHelper(0xf4001fe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText11()
	{
		CString result;
		InvokeHelper(0xf4001ff, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf4001ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText12()
	{
		CString result;
		InvokeHelper(0xf400200, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400200, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText13()
	{
		CString result;
		InvokeHelper(0xf400201, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400201, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText14()
	{
		CString result;
		InvokeHelper(0xf400202, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400202, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText15()
	{
		CString result;
		InvokeHelper(0xf400203, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400203, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText16()
	{
		CString result;
		InvokeHelper(0xf400204, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400204, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText17()
	{
		CString result;
		InvokeHelper(0xf400205, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400205, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText18()
	{
		CString result;
		InvokeHelper(0xf400206, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400206, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText19()
	{
		CString result;
		InvokeHelper(0xf400207, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400207, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText20()
	{
		CString result;
		InvokeHelper(0xf400208, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400208, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText21()
	{
		CString result;
		InvokeHelper(0xf400209, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400209, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText22()
	{
		CString result;
		InvokeHelper(0xf40020a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText23()
	{
		CString result;
		InvokeHelper(0xf40020b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText24()
	{
		CString result;
		InvokeHelper(0xf40020c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText25()
	{
		CString result;
		InvokeHelper(0xf40020d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText26()
	{
		CString result;
		InvokeHelper(0xf40020e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText27()
	{
		CString result;
		InvokeHelper(0xf40020f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40020f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText28()
	{
		CString result;
		InvokeHelper(0xf400210, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400210, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText29()
	{
		CString result;
		InvokeHelper(0xf400211, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400211, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText30()
	{
		CString result;
		InvokeHelper(0xf400212, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400212, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText31()
	{
		CString result;
		InvokeHelper(0xf400213, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText31(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400213, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText32()
	{
		CString result;
		InvokeHelper(0xf400214, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText32(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400214, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText33()
	{
		CString result;
		InvokeHelper(0xf400215, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText33(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400215, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText34()
	{
		CString result;
		InvokeHelper(0xf400216, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText34(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400216, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText35()
	{
		CString result;
		InvokeHelper(0xf400217, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText35(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400217, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText36()
	{
		CString result;
		InvokeHelper(0xf400218, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText36(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400218, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText37()
	{
		CString result;
		InvokeHelper(0xf400219, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText37(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400219, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText38()
	{
		CString result;
		InvokeHelper(0xf40021a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText38(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40021a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText39()
	{
		CString result;
		InvokeHelper(0xf40021b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText39(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40021b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText40()
	{
		CString result;
		InvokeHelper(0xf40021c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText40(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40021c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode1()
	{
		CString result;
		InvokeHelper(0xf400221, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400221, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode2()
	{
		CString result;
		InvokeHelper(0xf400222, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400222, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode3()
	{
		CString result;
		InvokeHelper(0xf400223, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400223, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode4()
	{
		CString result;
		InvokeHelper(0xf400224, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400224, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode5()
	{
		CString result;
		InvokeHelper(0xf400225, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400225, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode6()
	{
		CString result;
		InvokeHelper(0xf400226, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400226, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode7()
	{
		CString result;
		InvokeHelper(0xf400227, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400227, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode8()
	{
		CString result;
		InvokeHelper(0xf400228, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400228, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode9()
	{
		CString result;
		InvokeHelper(0xf400229, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400229, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode10()
	{
		CString result;
		InvokeHelper(0xf40022a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode11()
	{
		CString result;
		InvokeHelper(0xf40022b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode12()
	{
		CString result;
		InvokeHelper(0xf40022c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode13()
	{
		CString result;
		InvokeHelper(0xf40022d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode14()
	{
		CString result;
		InvokeHelper(0xf40022e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode15()
	{
		CString result;
		InvokeHelper(0xf40022f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40022f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode16()
	{
		CString result;
		InvokeHelper(0xf400230, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode17()
	{
		CString result;
		InvokeHelper(0xf400231, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400231, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode18()
	{
		CString result;
		InvokeHelper(0xf400232, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400232, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode19()
	{
		CString result;
		InvokeHelper(0xf400233, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400233, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode20()
	{
		CString result;
		InvokeHelper(0xf400234, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400234, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode21()
	{
		CString result;
		InvokeHelper(0xf400235, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400235, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode22()
	{
		CString result;
		InvokeHelper(0xf400236, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400236, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode23()
	{
		CString result;
		InvokeHelper(0xf400237, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400237, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode24()
	{
		CString result;
		InvokeHelper(0xf400238, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400238, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode25()
	{
		CString result;
		InvokeHelper(0xf400239, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400239, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode26()
	{
		CString result;
		InvokeHelper(0xf40023a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40023a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode27()
	{
		CString result;
		InvokeHelper(0xf40023b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40023b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode28()
	{
		CString result;
		InvokeHelper(0xf40023c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40023c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceOutlineCode29()
	{
		CString result;
		InvokeHelper(0xf40023d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceOutlineCode29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40023d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceRBS()
	{
		CString result;
		InvokeHelper(0xf40023e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceRBS(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40023e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ResourceRequestType()
	{
		long result;
		InvokeHelper(0xf40025d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ResourceRequestType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf40025d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL EnterpriseTeamMember(LPDISPATCH Project)
	{
		BOOL result;
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xf400260, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Project);
		return result;
	}
	CString get_EnterpriseResourceMultiValue20()
	{
		CString result;
		InvokeHelper(0xf400262, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400262, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue21()
	{
		CString result;
		InvokeHelper(0xf400264, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue22()
	{
		CString result;
		InvokeHelper(0xf400266, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue23()
	{
		CString result;
		InvokeHelper(0xf400268, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue24()
	{
		CString result;
		InvokeHelper(0xf40026a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue25()
	{
		CString result;
		InvokeHelper(0xf40026c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40026c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue26()
	{
		CString result;
		InvokeHelper(0xf40026e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40026e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue27()
	{
		CString result;
		InvokeHelper(0xf400270, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400270, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue28()
	{
		CString result;
		InvokeHelper(0xf400272, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400272, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseResourceMultiValue29()
	{
		CString result;
		InvokeHelper(0xf400274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseResourceMultiValue29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf400274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_ActualWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xf400276, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400276, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualOvtWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xf400277, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualOvtWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf400277, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Created()
	{
		VARIANT result;
		InvokeHelper(0xf40027a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Created(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40027a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_WBS()
	{
		CString result;
		InvokeHelper(0xf40011e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_BookingType()
	{
		long result;
		InvokeHelper(0xf400261, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_BookingType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf400261, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Guid()
	{
		CString result;
		InvokeHelper(0xf40027c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_TaskGuid()
	{
		CString result;
		InvokeHelper(0xf40027d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_ResourceGuid()
	{
		CString result;
		InvokeHelper(0xf40027e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_Summary()
	{
		CString result;
		InvokeHelper(0xf400286, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_Owner()
	{
		CString result;
		InvokeHelper(0xf40029c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Owner(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf40029c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf40029d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40029d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf40029e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf40029e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002a1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002a2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002a9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002b1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002b2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002b5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002b6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002bd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002c5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002c6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xf4002c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xf4002ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xf4002ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}

	// Assignment properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CAssignments wrapper class

class CAssignments : public COleDispatchDriver
{
public:
	CAssignments(){} // Calls COleDispatchDriver default constructor
	CAssignments(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CAssignments(const CAssignments& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Assignments methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_UniqueID(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfff1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	LPDISPATCH Add(VARIANT& TaskID, VARIANT& ResourceID, VARIANT& Units)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &TaskID, &ResourceID, &Units);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// Assignments properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CAvailabilities wrapper class

class CAvailabilities : public COleDispatchDriver
{
public:
	CAvailabilities(){} // Calls COleDispatchDriver default constructor
	CAvailabilities(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CAvailabilities(const CAvailabilities& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Availabilities methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(VARIANT& AvailableFrom, VARIANT& AvailableTo, double AvailableUnit)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_R8 ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &AvailableFrom, &AvailableTo, AvailableUnit);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Availabilities properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CAvailability wrapper class

class CAvailability : public COleDispatchDriver
{
public:
	CAvailability(){} // Calls COleDispatchDriver default constructor
	CAvailability(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CAvailability(const CAvailability& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Availability methods
public:
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_AvailableFrom()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_AvailableFrom(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_AvailableTo()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_AvailableTo(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_AvailableUnit()
	{
		double result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_AvailableUnit(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Delete()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Availability properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCalendar wrapper class

class CCalendar : public COleDispatchDriver
{
public:
	CCalendar(){} // Calls COleDispatchDriver default constructor
	CCalendar(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCalendar(const CCalendar& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Calendar methods
public:
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xd40000c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xd40000d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Period(VARIANT& Start, VARIANT& Finish)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xd40000e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Start, &Finish);
		return result;
	}
	LPDISPATCH get_Years()
	{
		LPDISPATCH result;
		InvokeHelper(0xd40000f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_WeekDays()
	{
		LPDISPATCH result;
		InvokeHelper(0xd400010, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Reset()
	{
		InvokeHelper(0xd400011, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_BaseCalendar()
	{
		LPDISPATCH result;
		InvokeHelper(0xd400012, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0xd400014, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xd400016, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Enterprise()
	{
		VARIANT result;
		InvokeHelper(0xd400019, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Guid()
	{
		CString result;
		InvokeHelper(0xd40001b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_ResourceGuid()
	{
		CString result;
		InvokeHelper(0xd40001c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Exceptions()
	{
		LPDISPATCH result;
		InvokeHelper(0xd400020, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_WorkWeeks()
	{
		LPDISPATCH result;
		InvokeHelper(0xd400021, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Calendar properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCalendarDrivers wrapper class

class CCalendarDrivers : public COleDispatchDriver
{
public:
	CCalendarDrivers(){} // Calls COleDispatchDriver default constructor
	CCalendarDrivers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCalendarDrivers(const CCalendarDrivers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// CalendarDrivers methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TotalDetectedCount()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// CalendarDrivers properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCalendars wrapper class

class CCalendars : public COleDispatchDriver
{
public:
	CCalendars(){} // Calls COleDispatchDriver default constructor
	CCalendars(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCalendars(const CCalendars& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Calendars methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// Calendars properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCell wrapper class

class CCell : public COleDispatchDriver
{
public:
	CCell(){} // Calls COleDispatchDriver default constructor
	CCell(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCell(const CCell& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Cell methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Task()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Resource()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_FieldName()
	{
		CString result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_FieldID()
	{
		long result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_Text()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}

	// Cell properties
public:
	long GetCellColor()
	{
		long result;
		GetProperty(0x5, VT_I4, (void*)&result);
		return result;
	}
	void SetCellColor(long propVal)
	{
		SetProperty(0x5, VT_I4, propVal);
	}
	long GetFontColor()
	{
		long result;
		GetProperty(0x6, VT_I4, (void*)&result);
		return result;
	}
	void SetFontColor(long propVal)
	{
		SetProperty(0x6, VT_I4, propVal);
	}
	long GetPattern()
	{
		long result;
		GetProperty(0x7, VT_I4, (void*)&result);
		return result;
	}
	void SetPattern(long propVal)
	{
		SetProperty(0x7, VT_I4, propVal);
	}

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CChildDrivers wrapper class

class CChildDrivers : public COleDispatchDriver
{
public:
	CChildDrivers(){} // Calls COleDispatchDriver default constructor
	CChildDrivers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CChildDrivers(const CChildDrivers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ChildDrivers methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TotalDetectedCount()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// ChildDrivers properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCodeMask wrapper class

class CCodeMask : public COleDispatchDriver
{
public:
	CCodeMask(){} // Calls COleDispatchDriver default constructor
	CCodeMask(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCodeMask(const CCodeMask& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// CodeMask methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(long Sequence, VARIANT& Length, VARIANT& Separator)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Sequence, &Length, &Separator);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// CodeMask properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCodeMaskLevel wrapper class

class CCodeMaskLevel : public COleDispatchDriver
{
public:
	CCodeMaskLevel(){} // Calls COleDispatchDriver default constructor
	CCodeMaskLevel(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCodeMaskLevel(const CCodeMaskLevel& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// CodeMaskLevel methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Level()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Sequence()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Sequence(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Length()
	{
		VARIANT result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Length(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Separator()
	{
		CString result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Separator(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// CodeMaskLevel properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCostRateTable wrapper class

class CCostRateTable : public COleDispatchDriver
{
public:
	CCostRateTable(){} // Calls COleDispatchDriver default constructor
	CCostRateTable(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCostRateTable(const CCostRateTable& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// CostRateTable methods
public:
	long get_Index()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_PayRates()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// CostRateTable properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CCostRateTables wrapper class

class CCostRateTables : public COleDispatchDriver
{
public:
	CCostRateTables(){} // Calls COleDispatchDriver default constructor
	CCostRateTables(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CCostRateTables(const CCostRateTables& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// CostRateTables methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// CostRateTables properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CDay wrapper class

class CDay : public COleDispatchDriver
{
public:
	CDay(){} // Calls COleDispatchDriver default constructor
	CDay(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CDay(const CDay& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Day methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Day properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CDays wrapper class

class CDays : public COleDispatchDriver
{
public:
	CDays(){} // Calls COleDispatchDriver default constructor
	CDays(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CDays(const CDays& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Days methods
public:
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// Days properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CEventInfo wrapper class

class CEventInfo : public COleDispatchDriver
{
public:
	CEventInfo(){} // Calls COleDispatchDriver default constructor
	CEventInfo(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CEventInfo(const CEventInfo& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// EventInfo methods
public:
	BOOL get_Cancel()
	{
		BOOL result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Cancel(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// EventInfo properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CException0 wrapper class

class CException0 : public COleDispatchDriver
{
public:
	CException0(){} // Calls COleDispatchDriver default constructor
	CException0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CException0(const CException0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Exception methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Occurrences()
	{
		long result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Occurrences(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Type(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Period()
	{
		long result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Period(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_DaysOfWeek()
	{
		long result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DaysOfWeek(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MonthPosition()
	{
		long result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MonthPosition(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MonthItem()
	{
		long result;
		InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MonthItem(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Month()
	{
		long result;
		InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Month(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MonthDay()
	{
		long result;
		InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MonthDay(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

	// Exception properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CExceptions wrapper class

class CExceptions : public COleDispatchDriver
{
public:
	CExceptions(){} // Calls COleDispatchDriver default constructor
	CExceptions(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CExceptions(const CExceptions& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Exceptions methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH Add(long Type, VARIANT& Start, VARIANT& Finish, VARIANT& Occurrences, VARIANT& Name, VARIANT& Period, VARIANT& DaysOfWeek, VARIANT& MonthPosition, VARIANT& MonthItem, VARIANT& Month, VARIANT& MonthDay)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Type, &Start, &Finish, &Occurrences, &Name, &Period, &DaysOfWeek, &MonthPosition, &MonthItem, &Month, &MonthDay);
		return result;
	}

	// Exceptions properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CFilter wrapper class

class CFilter : public COleDispatchDriver
{
public:
	CFilter(){} // Calls COleDispatchDriver default constructor
	CFilter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CFilter(const CFilter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Filter methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_FilterType()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_ShowInMenu()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowInMenu(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Apply(BOOL Highlight)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Highlight);
	}
	BOOL get_ShowRelatedSummaryRows()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowRelatedSummaryRows(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// Filter properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CFilters wrapper class

class CFilters : public COleDispatchDriver
{
public:
	CFilters(){} // Calls COleDispatchDriver default constructor
	CFilters(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CFilters(const CFilters& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Filters methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Copy(VARIANT& Source, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Filters properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CGroup wrapper class

class CGroup : public COleDispatchDriver
{
public:
	CGroup(){} // Calls COleDispatchDriver default constructor
	CGroup(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CGroup(const CGroup& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Group methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_GroupCriteria()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_GroupCriteria(LPDISPATCH newValue)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ShowSummary()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowSummary(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Delete()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_GroupAssignments()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_GroupAssignments(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// Group properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CGroupCriteria wrapper class

class CGroupCriteria : public COleDispatchDriver
{
public:
	CGroupCriteria(){} // Calls COleDispatchDriver default constructor
	CGroupCriteria(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CGroupCriteria(const CGroupCriteria& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// GroupCriteria methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR FieldName, BOOL Ascending, LPCTSTR FontName, long FontSize, BOOL FontBold, BOOL FontItalic, BOOL FontUnderLine, long FontColor, long CellColor, long Pattern, long GroupOn, VARIANT& StartAt, VARIANT& GroupInterval)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_BSTR VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, FieldName, Ascending, FontName, FontSize, FontBold, FontItalic, FontUnderLine, FontColor, CellColor, Pattern, GroupOn, &StartAt, &GroupInterval);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// GroupCriteria properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CGroupCriterion wrapper class

class CGroupCriterion : public COleDispatchDriver
{
public:
	CGroupCriterion(){} // Calls COleDispatchDriver default constructor
	CGroupCriterion(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CGroupCriterion(const CGroupCriterion& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// GroupCriterion methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_FieldName()
	{
		CString result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_FieldName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Ascending()
	{
		BOOL result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Ascending(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_FontName()
	{
		CString result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_FontName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_FontSize()
	{
		long result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_FontSize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_FontBold()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_FontBold(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_FontItalic()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_FontItalic(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_FontUnderLine()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_FontUnderLine(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_FontColor()
	{
		long result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_FontColor(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_CellColor()
	{
		long result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_CellColor(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Pattern()
	{
		long result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Pattern(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_GroupOn()
	{
		long result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_GroupOn(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_StartAt()
	{
		VARIANT result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_StartAt(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_GroupInterval()
	{
		VARIANT result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_GroupInterval(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Delete()
	{
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_Assignment()
	{
		BOOL result;
		InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Assignment(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// GroupCriterion properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CGroups wrapper class

class CGroups : public COleDispatchDriver
{
public:
	CGroups(){} // Calls COleDispatchDriver default constructor
	CGroups(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CGroups(const CGroups& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Groups methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, LPCTSTR FieldName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, FieldName);
		return result;
	}
	LPDISPATCH Copy(LPCTSTR Name, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Groups properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CList0 wrapper class

class CList0 : public COleDispatchDriver
{
public:
	CList0(){} // Calls COleDispatchDriver default constructor
	CList0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CList0(const CList0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// List methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_Item(VARIANT& Index)
	{
		CString result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// List properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CLookupTable wrapper class

class CLookupTable : public COleDispatchDriver
{
public:
	CLookupTable(){} // Calls COleDispatchDriver default constructor
	CLookupTable(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CLookupTable(const CLookupTable& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// LookupTable methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH AddChild(LPCTSTR Name, VARIANT& ParentUniqueID)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &ParentUniqueID);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// LookupTable properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CLookupTableEntry wrapper class

class CLookupTableEntry : public COleDispatchDriver
{
public:
	CLookupTableEntry(){} // Calls COleDispatchDriver default constructor
	CLookupTableEntry(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CLookupTableEntry(const CLookupTableEntry& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// LookupTableEntry methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ParentEntry()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Level()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Level(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_UniqueID()
	{
		long result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_Description()
	{
		CString result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Description(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IsValid()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString get_FullName()
	{
		CString result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_Cookie()
	{
		CString result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_LocalizedCookie()
	{
		CString result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}

	// LookupTableEntry properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CMonth wrapper class

class CMonth : public COleDispatchDriver
{
public:
	CMonth(){} // Calls COleDispatchDriver default constructor
	CMonth(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CMonth(const CMonth& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Month methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Days()
	{
		LPDISPATCH result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Month properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CMonths wrapper class

class CMonths : public COleDispatchDriver
{
public:
	CMonths(){} // Calls COleDispatchDriver default constructor
	CMonths(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CMonths(const CMonths& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Months methods
public:
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// Months properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// COutlineCode wrapper class

class COutlineCode : public COleDispatchDriver
{
public:
	COutlineCode(){} // Calls COleDispatchDriver default constructor
	COutlineCode(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	COutlineCode(const COutlineCode& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// OutlineCode methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_FieldID()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_LinkedFieldID()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_LinkedFieldID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_LookupTable()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CodeMask()
	{
		LPDISPATCH result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_OnlyLookUpTableCodes()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_OnlyLookUpTableCodes(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_OnlyCompleteCodes()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_OnlyCompleteCodes(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_OnlyLeaves()
	{
		BOOL result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_OnlyLeaves(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_MatchGeneric()
	{
		BOOL result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_MatchGeneric(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_RequiredCode()
	{
		BOOL result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_RequiredCode(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_SortOrder()
	{
		long result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_SortOrder(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_DefaultValue()
	{
		CString result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DefaultValue(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// OutlineCode properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// COutlineCodes wrapper class

class COutlineCodes : public COleDispatchDriver
{
public:
	COutlineCodes(){} // Calls COleDispatchDriver default constructor
	COutlineCodes(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	COutlineCodes(const COutlineCodes& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// OutlineCodes methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(long FieldID, LPCTSTR Name)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, FieldID, Name);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// OutlineCodes properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CPane wrapper class

class CPane : public COleDispatchDriver
{
public:
	CPane(){} // Calls COleDispatchDriver default constructor
	CPane(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPane(const CPane& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Pane methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Index()
	{
		VARIANT result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void Activate()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Close()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH View()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Pane properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CPayRate wrapper class

class CPayRate : public COleDispatchDriver
{
public:
	CPayRate(){} // Calls COleDispatchDriver default constructor
	CPayRate(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPayRate(const CPayRate& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// PayRate methods
public:
	long get_Index()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EffectiveDate()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_StandardRate()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_StandardRate(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_OvertimeRate()
	{
		VARIANT result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_OvertimeRate(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_CostPerUse()
	{
		VARIANT result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_CostPerUse(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Delete()
	{
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// PayRate properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CPayRates wrapper class

class CPayRates : public COleDispatchDriver
{
public:
	CPayRates(){} // Calls COleDispatchDriver default constructor
	CPayRates(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPayRates(const CPayRates& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// PayRates methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(VARIANT& EffectiveDate, VARIANT& StdRate, VARIANT& OvtRate, VARIANT& CostPerUse)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &EffectiveDate, &StdRate, &OvtRate, &CostPerUse);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// PayRates properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CPeriod wrapper class

class CPeriod : public COleDispatchDriver
{
public:
	CPeriod(){} // Calls COleDispatchDriver default constructor
	CPeriod(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPeriod(const CPeriod& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Period methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Period properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CPredecessorDrivers wrapper class

class CPredecessorDrivers : public COleDispatchDriver
{
public:
	CPredecessorDrivers(){} // Calls COleDispatchDriver default constructor
	CPredecessorDrivers(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPredecessorDrivers(const CPredecessorDrivers& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// PredecessorDrivers methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TotalDetectedCount()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// PredecessorDrivers properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CProfile wrapper class

class CProfile : public COleDispatchDriver
{
public:
	CProfile(){} // Calls COleDispatchDriver default constructor
	CProfile(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CProfile(const CProfile& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Profile methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Server()
	{
		CString result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Server(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_LoginType()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_LoginType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_UserName()
	{
		CString result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_UserName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_ConnectionState()
	{
		long result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// Profile properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CProfiles wrapper class

class CProfiles : public COleDispatchDriver
{
public:
	CProfiles(){} // Calls COleDispatchDriver default constructor
	CProfiles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CProfiles(const CProfiles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Profiles methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, LPCTSTR Server, long LoginType, LPCTSTR UserName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Server, LoginType, UserName);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_DefaultProfile()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_DefaultProfile(LPDISPATCH newValue)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_ActiveProfile()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Profiles properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CProjects wrapper class

class CProjects : public COleDispatchDriver
{
public:
	CProjects(){} // Calls COleDispatchDriver default constructor
	CProjects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CProjects(const CProjects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Projects methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(VARIANT& DisplayProjectInfo, VARIANT& Template, VARIANT& FileNewDialog)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &DisplayProjectInfo, &Template, &FileNewDialog);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	BOOL CanCheckOut(VARIANT& FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName);
		return result;
	}
	BOOL CheckOut(VARIANT& FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &FileName);
		return result;
	}

	// Projects properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CReportTemplate wrapper class

class CReportTemplate : public COleDispatchDriver
{
public:
	CReportTemplate(){} // Calls COleDispatchDriver default constructor
	CReportTemplate(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CReportTemplate(const CReportTemplate& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ReportTemplate methods
public:
	CString get_TemplatePath()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_CubeType()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_TemplateType()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// ReportTemplate properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CReportTemplates wrapper class

class CReportTemplates : public COleDispatchDriver
{
public:
	CReportTemplates(){} // Calls COleDispatchDriver default constructor
	CReportTemplates(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CReportTemplates(const CReportTemplates& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ReportTemplates methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// ReportTemplates properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CResource wrapper class

class CResource : public COleDispatchDriver
{
public:
	CResource(){} // Calls COleDispatchDriver default constructor
	CResource(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CResource(const CResource& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Resource methods
public:
	long get_ID()
	{
		long result;
		InvokeHelper(0xc400000, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0xc400001, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400001, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Initials()
	{
		CString result;
		InvokeHelper(0xc400002, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Initials(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400002, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Group()
	{
		CString result;
		InvokeHelper(0xc400003, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Group(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400003, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_MaxUnits()
	{
		VARIANT result;
		InvokeHelper(0xc400004, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_MaxUnits(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_BaseCalendar()
	{
		CString result;
		InvokeHelper(0xc400005, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_BaseCalendar(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400005, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_StandardRate()
	{
		VARIANT result;
		InvokeHelper(0xc400006, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_StandardRate(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_OvertimeRate()
	{
		VARIANT result;
		InvokeHelper(0xc400007, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_OvertimeRate(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400007, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text1()
	{
		CString result;
		InvokeHelper(0xc400008, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text2()
	{
		CString result;
		InvokeHelper(0xc400009, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400009, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Code()
	{
		CString result;
		InvokeHelper(0xc40000a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Code(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40000a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_ActualCost()
	{
		VARIANT result;
		InvokeHelper(0xc40000b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Cost()
	{
		VARIANT result;
		InvokeHelper(0xc40000c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Work()
	{
		VARIANT result;
		InvokeHelper(0xc40000d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualWork()
	{
		VARIANT result;
		InvokeHelper(0xc40000e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BaselineWork()
	{
		VARIANT result;
		InvokeHelper(0xc40000f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40000f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_OvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xc400010, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BaselineCost()
	{
		VARIANT result;
		InvokeHelper(0xc400011, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400011, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_CostPerUse()
	{
		VARIANT result;
		InvokeHelper(0xc400012, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_CostPerUse(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400012, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_AccrueAt()
	{
		VARIANT result;
		InvokeHelper(0xc400013, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_AccrueAt(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400013, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Notes()
	{
		CString result;
		InvokeHelper(0xc400014, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Notes(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400014, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_RemainingCost()
	{
		VARIANT result;
		InvokeHelper(0xc400015, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingWork()
	{
		VARIANT result;
		InvokeHelper(0xc400016, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_WorkVariance()
	{
		VARIANT result;
		InvokeHelper(0xc400017, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CostVariance()
	{
		VARIANT result;
		InvokeHelper(0xc400018, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Overallocated()
	{
		VARIANT result;
		InvokeHelper(0xc400019, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_PeakUnits()
	{
		VARIANT result;
		InvokeHelper(0xc40001a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_UniqueID()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_PercentWorkComplete()
	{
		VARIANT result;
		InvokeHelper(0xc40001d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Text3()
	{
		CString result;
		InvokeHelper(0xc40001e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40001e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text4()
	{
		CString result;
		InvokeHelper(0xc40001f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40001f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text5()
	{
		CString result;
		InvokeHelper(0xc400020, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400020, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Objects()
	{
		long result;
		InvokeHelper(0xc400021, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LinkedFields()
	{
		VARIANT result;
		InvokeHelper(0xc400022, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_EMailAddress()
	{
		CString result;
		InvokeHelper(0xc400023, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EMailAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400023, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_RegularWork()
	{
		VARIANT result;
		InvokeHelper(0xc400026, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xc400027, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xc400028, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_OvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xc40002f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xc400030, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xc400031, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWS()
	{
		VARIANT result;
		InvokeHelper(0xc400033, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWP()
	{
		VARIANT result;
		InvokeHelper(0xc400034, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ACWP()
	{
		VARIANT result;
		InvokeHelper(0xc400035, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_SV()
	{
		VARIANT result;
		InvokeHelper(0xc400036, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Assignments()
	{
		LPDISPATCH result;
		InvokeHelper(0xc400037, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_AvailableFrom()
	{
		VARIANT result;
		InvokeHelper(0xc400039, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_AvailableFrom(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400039, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_AvailableTo()
	{
		VARIANT result;
		InvokeHelper(0xc40003a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_AvailableTo(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40003a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xc40005f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xc400060, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Text6()
	{
		CString result;
		InvokeHelper(0xc400061, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400061, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text7()
	{
		CString result;
		InvokeHelper(0xc400062, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400062, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text8()
	{
		CString result;
		InvokeHelper(0xc400063, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400063, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text9()
	{
		CString result;
		InvokeHelper(0xc400064, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400064, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text10()
	{
		CString result;
		InvokeHelper(0xc400065, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400065, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start1()
	{
		VARIANT result;
		InvokeHelper(0xc400066, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400066, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start2()
	{
		VARIANT result;
		InvokeHelper(0xc400067, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start3()
	{
		VARIANT result;
		InvokeHelper(0xc400068, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400068, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start4()
	{
		VARIANT result;
		InvokeHelper(0xc400069, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400069, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start5()
	{
		VARIANT result;
		InvokeHelper(0xc40006a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish1()
	{
		VARIANT result;
		InvokeHelper(0xc40006b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish2()
	{
		VARIANT result;
		InvokeHelper(0xc40006c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish3()
	{
		VARIANT result;
		InvokeHelper(0xc40006d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish4()
	{
		VARIANT result;
		InvokeHelper(0xc40006e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish5()
	{
		VARIANT result;
		InvokeHelper(0xc40006f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40006f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_Number1()
	{
		double result;
		InvokeHelper(0xc400070, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400070, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number2()
	{
		double result;
		InvokeHelper(0xc400071, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400071, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number3()
	{
		double result;
		InvokeHelper(0xc400072, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400072, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number4()
	{
		double result;
		InvokeHelper(0xc400073, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400073, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number5()
	{
		double result;
		InvokeHelper(0xc400074, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400074, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Duration1()
	{
		VARIANT result;
		InvokeHelper(0xc400075, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400075, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration2()
	{
		VARIANT result;
		InvokeHelper(0xc400076, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400076, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration3()
	{
		VARIANT result;
		InvokeHelper(0xc400077, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400077, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost1()
	{
		VARIANT result;
		InvokeHelper(0xc40007b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40007b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost2()
	{
		VARIANT result;
		InvokeHelper(0xc40007c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40007c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost3()
	{
		VARIANT result;
		InvokeHelper(0xc40007d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40007d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag10()
	{
		VARIANT result;
		InvokeHelper(0xc40007e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40007e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag1()
	{
		VARIANT result;
		InvokeHelper(0xc40007f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40007f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag2()
	{
		VARIANT result;
		InvokeHelper(0xc400080, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400080, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag3()
	{
		VARIANT result;
		InvokeHelper(0xc400081, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400081, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag4()
	{
		VARIANT result;
		InvokeHelper(0xc400082, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400082, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag5()
	{
		VARIANT result;
		InvokeHelper(0xc400083, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400083, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag6()
	{
		VARIANT result;
		InvokeHelper(0xc400084, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400084, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag7()
	{
		VARIANT result;
		InvokeHelper(0xc400085, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400085, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag8()
	{
		VARIANT result;
		InvokeHelper(0xc400086, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400086, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag9()
	{
		VARIANT result;
		InvokeHelper(0xc400087, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400087, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Hyperlink()
	{
		CString result;
		InvokeHelper(0xc40008a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Hyperlink(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40008a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkAddress()
	{
		CString result;
		InvokeHelper(0xc40008b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40008b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkSubAddress()
	{
		CString result;
		InvokeHelper(0xc40008c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkSubAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40008c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkHREF()
	{
		CString result;
		InvokeHelper(0xc40008d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkHREF(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40008d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString GetField(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc400093, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	void SetField(long FieldID, LPCTSTR Value)
	{
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0xc400094, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FieldID, Value);
	}
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0xc400096, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0xc400099, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AppendNotes(LPCTSTR Value)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40009a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Value);
	}
	LPDISPATCH TimeScaleData(VARIANT& StartDate, VARIANT& EndDate, long Type, long TimeScaleUnit, long Count)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xc40009d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &StartDate, &EndDate, Type, TimeScaleUnit, Count);
		return result;
	}
	LPDISPATCH get_CostRateTables()
	{
		LPDISPATCH result;
		InvokeHelper(0xc4000a0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_PayRates()
	{
		LPDISPATCH result;
		InvokeHelper(0xc4000a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CanLevel()
	{
		VARIANT result;
		InvokeHelper(0xc4000a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_CanLevel(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost4()
	{
		VARIANT result;
		InvokeHelper(0xc4000a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost5()
	{
		VARIANT result;
		InvokeHelper(0xc4000a7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost6()
	{
		VARIANT result;
		InvokeHelper(0xc4000a8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost7()
	{
		VARIANT result;
		InvokeHelper(0xc4000a9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost8()
	{
		VARIANT result;
		InvokeHelper(0xc4000aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost9()
	{
		VARIANT result;
		InvokeHelper(0xc4000ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost10()
	{
		VARIANT result;
		InvokeHelper(0xc4000ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date1()
	{
		VARIANT result;
		InvokeHelper(0xc4000ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date2()
	{
		VARIANT result;
		InvokeHelper(0xc4000ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date3()
	{
		VARIANT result;
		InvokeHelper(0xc4000af, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000af, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date4()
	{
		VARIANT result;
		InvokeHelper(0xc4000b0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date5()
	{
		VARIANT result;
		InvokeHelper(0xc4000b1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date6()
	{
		VARIANT result;
		InvokeHelper(0xc4000b2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date7()
	{
		VARIANT result;
		InvokeHelper(0xc4000b3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date8()
	{
		VARIANT result;
		InvokeHelper(0xc4000b4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date9()
	{
		VARIANT result;
		InvokeHelper(0xc4000b5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date10()
	{
		VARIANT result;
		InvokeHelper(0xc4000b6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration4()
	{
		VARIANT result;
		InvokeHelper(0xc4000b7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration5()
	{
		VARIANT result;
		InvokeHelper(0xc4000b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration6()
	{
		VARIANT result;
		InvokeHelper(0xc4000b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration7()
	{
		VARIANT result;
		InvokeHelper(0xc4000ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration8()
	{
		VARIANT result;
		InvokeHelper(0xc4000bb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration9()
	{
		VARIANT result;
		InvokeHelper(0xc4000bc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration10()
	{
		VARIANT result;
		InvokeHelper(0xc4000bd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish6()
	{
		VARIANT result;
		InvokeHelper(0xc4000be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish7()
	{
		VARIANT result;
		InvokeHelper(0xc4000bf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish8()
	{
		VARIANT result;
		InvokeHelper(0xc4000c0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish9()
	{
		VARIANT result;
		InvokeHelper(0xc4000c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish10()
	{
		VARIANT result;
		InvokeHelper(0xc4000c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag11()
	{
		VARIANT result;
		InvokeHelper(0xc4000c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag12()
	{
		VARIANT result;
		InvokeHelper(0xc4000c4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag13()
	{
		VARIANT result;
		InvokeHelper(0xc4000c5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag14()
	{
		VARIANT result;
		InvokeHelper(0xc4000c6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag15()
	{
		VARIANT result;
		InvokeHelper(0xc4000c7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag16()
	{
		VARIANT result;
		InvokeHelper(0xc4000c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag17()
	{
		VARIANT result;
		InvokeHelper(0xc4000c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag18()
	{
		VARIANT result;
		InvokeHelper(0xc4000ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag19()
	{
		VARIANT result;
		InvokeHelper(0xc4000cb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag20()
	{
		VARIANT result;
		InvokeHelper(0xc4000cc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_Number6()
	{
		double result;
		InvokeHelper(0xc4000cd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number7()
	{
		double result;
		InvokeHelper(0xc4000ce, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number8()
	{
		double result;
		InvokeHelper(0xc4000cf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number9()
	{
		double result;
		InvokeHelper(0xc4000d0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number10()
	{
		double result;
		InvokeHelper(0xc4000d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number11()
	{
		double result;
		InvokeHelper(0xc4000d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number12()
	{
		double result;
		InvokeHelper(0xc4000d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number13()
	{
		double result;
		InvokeHelper(0xc4000d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number14()
	{
		double result;
		InvokeHelper(0xc4000d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number15()
	{
		double result;
		InvokeHelper(0xc4000d6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number16()
	{
		double result;
		InvokeHelper(0xc4000d7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number17()
	{
		double result;
		InvokeHelper(0xc4000d8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number18()
	{
		double result;
		InvokeHelper(0xc4000d9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number19()
	{
		double result;
		InvokeHelper(0xc4000da, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number20()
	{
		double result;
		InvokeHelper(0xc4000db, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc4000db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start6()
	{
		VARIANT result;
		InvokeHelper(0xc4000dc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start7()
	{
		VARIANT result;
		InvokeHelper(0xc4000dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start8()
	{
		VARIANT result;
		InvokeHelper(0xc4000de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start9()
	{
		VARIANT result;
		InvokeHelper(0xc4000df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start10()
	{
		VARIANT result;
		InvokeHelper(0xc4000e0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4000e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text11()
	{
		CString result;
		InvokeHelper(0xc4000e1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text12()
	{
		CString result;
		InvokeHelper(0xc4000e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text13()
	{
		CString result;
		InvokeHelper(0xc4000e3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text14()
	{
		CString result;
		InvokeHelper(0xc4000e4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text15()
	{
		CString result;
		InvokeHelper(0xc4000e5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text16()
	{
		CString result;
		InvokeHelper(0xc4000e6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text17()
	{
		CString result;
		InvokeHelper(0xc4000e7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text18()
	{
		CString result;
		InvokeHelper(0xc4000e8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text19()
	{
		CString result;
		InvokeHelper(0xc4000e9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text20()
	{
		CString result;
		InvokeHelper(0xc4000ea, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text21()
	{
		CString result;
		InvokeHelper(0xc4000eb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text22()
	{
		CString result;
		InvokeHelper(0xc4000ec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text23()
	{
		CString result;
		InvokeHelper(0xc4000ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text24()
	{
		CString result;
		InvokeHelper(0xc4000ee, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text25()
	{
		CString result;
		InvokeHelper(0xc4000ef, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text26()
	{
		CString result;
		InvokeHelper(0xc4000f0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text27()
	{
		CString result;
		InvokeHelper(0xc4000f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text28()
	{
		CString result;
		InvokeHelper(0xc4000f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text29()
	{
		CString result;
		InvokeHelper(0xc4000f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text30()
	{
		CString result;
		InvokeHelper(0xc4000f4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Phonetics()
	{
		CString result;
		InvokeHelper(0xc4000fc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Phonetics(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4000fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xc4000fd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void Level()
	{
		InvokeHelper(0xc4000fe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	VARIANT get_Confirmed()
	{
		VARIANT result;
		InvokeHelper(0xc400105, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ResponsePending()
	{
		VARIANT result;
		InvokeHelper(0xc400108, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_TeamStatusPending()
	{
		VARIANT result;
		InvokeHelper(0xc40010a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_UpdateNeeded()
	{
		VARIANT result;
		InvokeHelper(0xc40010b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CV()
	{
		VARIANT result;
		InvokeHelper(0xc40010c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_Workgroup()
	{
		long result;
		InvokeHelper(0xc400110, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Workgroup(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc400110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Project()
	{
		CString result;
		InvokeHelper(0xc400111, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Availabilities()
	{
		LPDISPATCH result;
		InvokeHelper(0xc400115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_OutlineCode1()
	{
		CString result;
		InvokeHelper(0xc400116, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400116, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode2()
	{
		CString result;
		InvokeHelper(0xc400118, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400118, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode3()
	{
		CString result;
		InvokeHelper(0xc40011a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40011a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode4()
	{
		CString result;
		InvokeHelper(0xc40011c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40011c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode5()
	{
		CString result;
		InvokeHelper(0xc40011e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40011e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode6()
	{
		CString result;
		InvokeHelper(0xc400120, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400120, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode7()
	{
		CString result;
		InvokeHelper(0xc400122, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400122, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode8()
	{
		CString result;
		InvokeHelper(0xc400124, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400124, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode9()
	{
		CString result;
		InvokeHelper(0xc400126, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode10()
	{
		CString result;
		InvokeHelper(0xc400128, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_MaterialLabel()
	{
		CString result;
		InvokeHelper(0xc40012b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_MaterialLabel(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40012b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0xc40012c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Type(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc40012c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_VAC()
	{
		VARIANT result;
		InvokeHelper(0xc40012d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_GroupBySummary()
	{
		VARIANT result;
		InvokeHelper(0xc400132, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_WindowsUserAccount()
	{
		CString result;
		InvokeHelper(0xc400137, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_WindowsUserAccount(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400137, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkScreenTip()
	{
		CString result;
		InvokeHelper(0xc400138, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkScreenTip(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400138, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline1Work()
	{
		VARIANT result;
		InvokeHelper(0xc400156, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400156, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Cost()
	{
		VARIANT result;
		InvokeHelper(0xc400157, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400157, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Work()
	{
		VARIANT result;
		InvokeHelper(0xc400160, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400160, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Cost()
	{
		VARIANT result;
		InvokeHelper(0xc400161, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400161, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Work()
	{
		VARIANT result;
		InvokeHelper(0xc40016a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40016a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Cost()
	{
		VARIANT result;
		InvokeHelper(0xc40016b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40016b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Work()
	{
		VARIANT result;
		InvokeHelper(0xc400174, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400174, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Cost()
	{
		VARIANT result;
		InvokeHelper(0xc400175, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400175, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Work()
	{
		VARIANT result;
		InvokeHelper(0xc40017e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40017e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Cost()
	{
		VARIANT result;
		InvokeHelper(0xc40017f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40017f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Work()
	{
		VARIANT result;
		InvokeHelper(0xc400188, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400188, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Cost()
	{
		VARIANT result;
		InvokeHelper(0xc400189, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400189, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Work()
	{
		VARIANT result;
		InvokeHelper(0xc400192, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400192, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Cost()
	{
		VARIANT result;
		InvokeHelper(0xc400193, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400193, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Work()
	{
		VARIANT result;
		InvokeHelper(0xc40019c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40019c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Cost()
	{
		VARIANT result;
		InvokeHelper(0xc40019d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40019d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Work()
	{
		VARIANT result;
		InvokeHelper(0xc4001a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Cost()
	{
		VARIANT result;
		InvokeHelper(0xc4001a7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Work()
	{
		VARIANT result;
		InvokeHelper(0xc4001b0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Cost()
	{
		VARIANT result;
		InvokeHelper(0xc4001b1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_EnterpriseUniqueID()
	{
		long result;
		InvokeHelper(0xc4001bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseCost1()
	{
		VARIANT result;
		InvokeHelper(0xc4001be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost2()
	{
		VARIANT result;
		InvokeHelper(0xc4001bf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost3()
	{
		VARIANT result;
		InvokeHelper(0xc4001c0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost4()
	{
		VARIANT result;
		InvokeHelper(0xc4001c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost5()
	{
		VARIANT result;
		InvokeHelper(0xc4001c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost6()
	{
		VARIANT result;
		InvokeHelper(0xc4001c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost7()
	{
		VARIANT result;
		InvokeHelper(0xc4001c4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost8()
	{
		VARIANT result;
		InvokeHelper(0xc4001c5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost9()
	{
		VARIANT result;
		InvokeHelper(0xc4001c6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost10()
	{
		VARIANT result;
		InvokeHelper(0xc4001c7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate1()
	{
		VARIANT result;
		InvokeHelper(0xc4001c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate2()
	{
		VARIANT result;
		InvokeHelper(0xc4001c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate3()
	{
		VARIANT result;
		InvokeHelper(0xc4001ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate4()
	{
		VARIANT result;
		InvokeHelper(0xc4001cb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate5()
	{
		VARIANT result;
		InvokeHelper(0xc4001cc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate6()
	{
		VARIANT result;
		InvokeHelper(0xc4001cd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate7()
	{
		VARIANT result;
		InvokeHelper(0xc4001ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate8()
	{
		VARIANT result;
		InvokeHelper(0xc4001cf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate9()
	{
		VARIANT result;
		InvokeHelper(0xc4001d0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate10()
	{
		VARIANT result;
		InvokeHelper(0xc4001d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate11()
	{
		VARIANT result;
		InvokeHelper(0xc4001d2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate12()
	{
		VARIANT result;
		InvokeHelper(0xc4001d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate13()
	{
		VARIANT result;
		InvokeHelper(0xc4001d4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate14()
	{
		VARIANT result;
		InvokeHelper(0xc4001d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate15()
	{
		VARIANT result;
		InvokeHelper(0xc4001d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate16()
	{
		VARIANT result;
		InvokeHelper(0xc4001d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate17()
	{
		VARIANT result;
		InvokeHelper(0xc4001d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate18()
	{
		VARIANT result;
		InvokeHelper(0xc4001d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate19()
	{
		VARIANT result;
		InvokeHelper(0xc4001da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate20()
	{
		VARIANT result;
		InvokeHelper(0xc4001db, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate21()
	{
		VARIANT result;
		InvokeHelper(0xc4001dc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate21(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate22()
	{
		VARIANT result;
		InvokeHelper(0xc4001dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate22(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate23()
	{
		VARIANT result;
		InvokeHelper(0xc4001de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate23(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate24()
	{
		VARIANT result;
		InvokeHelper(0xc4001df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate24(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate25()
	{
		VARIANT result;
		InvokeHelper(0xc4001e0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate25(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate26()
	{
		VARIANT result;
		InvokeHelper(0xc4001e1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate26(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate27()
	{
		VARIANT result;
		InvokeHelper(0xc4001e2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate27(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate28()
	{
		VARIANT result;
		InvokeHelper(0xc4001e3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate28(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate29()
	{
		VARIANT result;
		InvokeHelper(0xc4001e4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate29(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate30()
	{
		VARIANT result;
		InvokeHelper(0xc4001e5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate30(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration1()
	{
		VARIANT result;
		InvokeHelper(0xc4001e6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration2()
	{
		VARIANT result;
		InvokeHelper(0xc4001e7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration3()
	{
		VARIANT result;
		InvokeHelper(0xc4001e8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration4()
	{
		VARIANT result;
		InvokeHelper(0xc4001e9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration5()
	{
		VARIANT result;
		InvokeHelper(0xc4001ea, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration6()
	{
		VARIANT result;
		InvokeHelper(0xc4001eb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration7()
	{
		VARIANT result;
		InvokeHelper(0xc4001ec, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration8()
	{
		VARIANT result;
		InvokeHelper(0xc4001ed, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration9()
	{
		VARIANT result;
		InvokeHelper(0xc4001ee, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration10()
	{
		VARIANT result;
		InvokeHelper(0xc4001ef, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag1()
	{
		VARIANT result;
		InvokeHelper(0xc4001fa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag2()
	{
		VARIANT result;
		InvokeHelper(0xc4001fb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag3()
	{
		VARIANT result;
		InvokeHelper(0xc4001fc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag4()
	{
		VARIANT result;
		InvokeHelper(0xc4001fd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag5()
	{
		VARIANT result;
		InvokeHelper(0xc4001fe, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag6()
	{
		VARIANT result;
		InvokeHelper(0xc4001ff, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4001ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag7()
	{
		VARIANT result;
		InvokeHelper(0xc400200, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400200, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag8()
	{
		VARIANT result;
		InvokeHelper(0xc400201, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400201, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag9()
	{
		VARIANT result;
		InvokeHelper(0xc400202, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400202, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag10()
	{
		VARIANT result;
		InvokeHelper(0xc400203, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400203, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag11()
	{
		VARIANT result;
		InvokeHelper(0xc400204, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400204, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag12()
	{
		VARIANT result;
		InvokeHelper(0xc400205, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400205, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag13()
	{
		VARIANT result;
		InvokeHelper(0xc400206, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400206, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag14()
	{
		VARIANT result;
		InvokeHelper(0xc400207, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400207, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag15()
	{
		VARIANT result;
		InvokeHelper(0xc400208, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400208, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag16()
	{
		VARIANT result;
		InvokeHelper(0xc400209, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400209, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag17()
	{
		VARIANT result;
		InvokeHelper(0xc40020a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40020a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag18()
	{
		VARIANT result;
		InvokeHelper(0xc40020b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40020b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag19()
	{
		VARIANT result;
		InvokeHelper(0xc40020c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40020c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag20()
	{
		VARIANT result;
		InvokeHelper(0xc40020d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40020d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_EnterpriseNumber1()
	{
		double result;
		InvokeHelper(0xc400222, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400222, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber2()
	{
		double result;
		InvokeHelper(0xc400223, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400223, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber3()
	{
		double result;
		InvokeHelper(0xc400224, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400224, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber4()
	{
		double result;
		InvokeHelper(0xc400225, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400225, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber5()
	{
		double result;
		InvokeHelper(0xc400226, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400226, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber6()
	{
		double result;
		InvokeHelper(0xc400227, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400227, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber7()
	{
		double result;
		InvokeHelper(0xc400228, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400228, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber8()
	{
		double result;
		InvokeHelper(0xc400229, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400229, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber9()
	{
		double result;
		InvokeHelper(0xc40022a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber10()
	{
		double result;
		InvokeHelper(0xc40022b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber11()
	{
		double result;
		InvokeHelper(0xc40022c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber12()
	{
		double result;
		InvokeHelper(0xc40022d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber13()
	{
		double result;
		InvokeHelper(0xc40022e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber14()
	{
		double result;
		InvokeHelper(0xc40022f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40022f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber15()
	{
		double result;
		InvokeHelper(0xc400230, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber16()
	{
		double result;
		InvokeHelper(0xc400231, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400231, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber17()
	{
		double result;
		InvokeHelper(0xc400232, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400232, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber18()
	{
		double result;
		InvokeHelper(0xc400233, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400233, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber19()
	{
		double result;
		InvokeHelper(0xc400234, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400234, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber20()
	{
		double result;
		InvokeHelper(0xc400235, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400235, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber21()
	{
		double result;
		InvokeHelper(0xc400236, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber21(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400236, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber22()
	{
		double result;
		InvokeHelper(0xc400237, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber22(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400237, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber23()
	{
		double result;
		InvokeHelper(0xc400238, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber23(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400238, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber24()
	{
		double result;
		InvokeHelper(0xc400239, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber24(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400239, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber25()
	{
		double result;
		InvokeHelper(0xc40023a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber25(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber26()
	{
		double result;
		InvokeHelper(0xc40023b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber26(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber27()
	{
		double result;
		InvokeHelper(0xc40023c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber27(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber28()
	{
		double result;
		InvokeHelper(0xc40023d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber28(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber29()
	{
		double result;
		InvokeHelper(0xc40023e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber29(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber30()
	{
		double result;
		InvokeHelper(0xc40023f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber30(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc40023f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber31()
	{
		double result;
		InvokeHelper(0xc400240, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber31(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400240, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber32()
	{
		double result;
		InvokeHelper(0xc400241, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber32(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400241, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber33()
	{
		double result;
		InvokeHelper(0xc400242, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber33(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400242, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber34()
	{
		double result;
		InvokeHelper(0xc400243, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber34(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400243, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber35()
	{
		double result;
		InvokeHelper(0xc400244, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber35(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400244, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber36()
	{
		double result;
		InvokeHelper(0xc400245, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber36(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400245, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber37()
	{
		double result;
		InvokeHelper(0xc400246, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber37(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400246, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber38()
	{
		double result;
		InvokeHelper(0xc400247, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber38(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400247, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber39()
	{
		double result;
		InvokeHelper(0xc400248, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber39(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400248, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber40()
	{
		double result;
		InvokeHelper(0xc400249, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber40(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xc400249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode1()
	{
		CString result;
		InvokeHelper(0xc40024a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40024a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode2()
	{
		CString result;
		InvokeHelper(0xc40024c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40024c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode3()
	{
		CString result;
		InvokeHelper(0xc40024e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40024e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode4()
	{
		CString result;
		InvokeHelper(0xc400250, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400250, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode5()
	{
		CString result;
		InvokeHelper(0xc400252, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400252, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode6()
	{
		CString result;
		InvokeHelper(0xc400254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode7()
	{
		CString result;
		InvokeHelper(0xc400256, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400256, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode8()
	{
		CString result;
		InvokeHelper(0xc400258, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode9()
	{
		CString result;
		InvokeHelper(0xc40025a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40025a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode10()
	{
		CString result;
		InvokeHelper(0xc40025c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40025c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode11()
	{
		CString result;
		InvokeHelper(0xc40025e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40025e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode12()
	{
		CString result;
		InvokeHelper(0xc400260, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400260, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode13()
	{
		CString result;
		InvokeHelper(0xc400262, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400262, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode14()
	{
		CString result;
		InvokeHelper(0xc400264, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode15()
	{
		CString result;
		InvokeHelper(0xc400266, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode16()
	{
		CString result;
		InvokeHelper(0xc400268, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode17()
	{
		CString result;
		InvokeHelper(0xc40026a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode18()
	{
		CString result;
		InvokeHelper(0xc40026c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40026c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode19()
	{
		CString result;
		InvokeHelper(0xc40026e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40026e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode20()
	{
		CString result;
		InvokeHelper(0xc400270, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400270, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode21()
	{
		CString result;
		InvokeHelper(0xc400272, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400272, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode22()
	{
		CString result;
		InvokeHelper(0xc400274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode23()
	{
		CString result;
		InvokeHelper(0xc400276, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400276, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode24()
	{
		CString result;
		InvokeHelper(0xc400278, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400278, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode25()
	{
		CString result;
		InvokeHelper(0xc40027a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40027a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode26()
	{
		CString result;
		InvokeHelper(0xc40027c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40027c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode27()
	{
		CString result;
		InvokeHelper(0xc40027e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40027e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode28()
	{
		CString result;
		InvokeHelper(0xc400280, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400280, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode29()
	{
		CString result;
		InvokeHelper(0xc400282, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400282, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseRBS()
	{
		CString result;
		InvokeHelper(0xc400284, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseRBS(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText1()
	{
		CString result;
		InvokeHelper(0xc400286, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText2()
	{
		CString result;
		InvokeHelper(0xc400287, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText3()
	{
		CString result;
		InvokeHelper(0xc400288, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText4()
	{
		CString result;
		InvokeHelper(0xc400289, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400289, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText5()
	{
		CString result;
		InvokeHelper(0xc40028a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText6()
	{
		CString result;
		InvokeHelper(0xc40028b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText7()
	{
		CString result;
		InvokeHelper(0xc40028c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText8()
	{
		CString result;
		InvokeHelper(0xc40028d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText9()
	{
		CString result;
		InvokeHelper(0xc40028e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText10()
	{
		CString result;
		InvokeHelper(0xc40028f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40028f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText11()
	{
		CString result;
		InvokeHelper(0xc400290, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400290, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText12()
	{
		CString result;
		InvokeHelper(0xc400291, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400291, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText13()
	{
		CString result;
		InvokeHelper(0xc400292, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400292, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText14()
	{
		CString result;
		InvokeHelper(0xc400293, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400293, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText15()
	{
		CString result;
		InvokeHelper(0xc400294, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400294, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText16()
	{
		CString result;
		InvokeHelper(0xc400295, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400295, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText17()
	{
		CString result;
		InvokeHelper(0xc400296, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400296, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText18()
	{
		CString result;
		InvokeHelper(0xc400297, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText19()
	{
		CString result;
		InvokeHelper(0xc400298, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400298, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText20()
	{
		CString result;
		InvokeHelper(0xc400299, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400299, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText21()
	{
		CString result;
		InvokeHelper(0xc40029a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText22()
	{
		CString result;
		InvokeHelper(0xc40029b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText23()
	{
		CString result;
		InvokeHelper(0xc40029c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText24()
	{
		CString result;
		InvokeHelper(0xc40029d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText25()
	{
		CString result;
		InvokeHelper(0xc40029e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText26()
	{
		CString result;
		InvokeHelper(0xc40029f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc40029f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText27()
	{
		CString result;
		InvokeHelper(0xc4002a0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText28()
	{
		CString result;
		InvokeHelper(0xc4002a1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText29()
	{
		CString result;
		InvokeHelper(0xc4002a2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText30()
	{
		CString result;
		InvokeHelper(0xc4002a3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText31()
	{
		CString result;
		InvokeHelper(0xc4002a4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText31(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText32()
	{
		CString result;
		InvokeHelper(0xc4002a5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText32(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText33()
	{
		CString result;
		InvokeHelper(0xc4002a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText33(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText34()
	{
		CString result;
		InvokeHelper(0xc4002a7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText34(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText35()
	{
		CString result;
		InvokeHelper(0xc4002a8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText35(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText36()
	{
		CString result;
		InvokeHelper(0xc4002a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText36(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText37()
	{
		CString result;
		InvokeHelper(0xc4002aa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText37(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText38()
	{
		CString result;
		InvokeHelper(0xc4002ab, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText38(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText39()
	{
		CString result;
		InvokeHelper(0xc4002ac, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText39(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText40()
	{
		CString result;
		InvokeHelper(0xc4002ad, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText40(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_EnterpriseGeneric()
	{
		VARIANT result;
		InvokeHelper(0xc4002ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseGeneric(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseBaseCalendar()
	{
		VARIANT result;
		InvokeHelper(0xc4002af, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseRequiredValues()
	{
		VARIANT result;
		InvokeHelper(0xc4002b0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseNameUsed()
	{
		VARIANT result;
		InvokeHelper(0xc4002b1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Enterprise()
	{
		VARIANT result;
		InvokeHelper(0xc4002b3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseIsCheckedOut()
	{
		VARIANT result;
		InvokeHelper(0xc4002b4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_EnterpriseCheckedOutBy()
	{
		CString result;
		InvokeHelper(0xc4002b5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseLastModifiedDate()
	{
		VARIANT result;
		InvokeHelper(0xc4002b6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EnterpriseInactive()
	{
		VARIANT result;
		InvokeHelper(0xc4002b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseInactive(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	BOOL EnterpriseTeamMember(LPDISPATCH Project)
	{
		BOOL result;
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xc4002b9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Project);
		return result;
	}
	long get_BookingType()
	{
		long result;
		InvokeHelper(0xc4002bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_BookingType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc4002bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue20()
	{
		CString result;
		InvokeHelper(0xc4002bc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue21()
	{
		CString result;
		InvokeHelper(0xc4002be, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue22()
	{
		CString result;
		InvokeHelper(0xc4002c0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue23()
	{
		CString result;
		InvokeHelper(0xc4002c2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue24()
	{
		CString result;
		InvokeHelper(0xc4002c4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue25()
	{
		CString result;
		InvokeHelper(0xc4002c6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue26()
	{
		CString result;
		InvokeHelper(0xc4002c8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue27()
	{
		CString result;
		InvokeHelper(0xc4002ca, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue28()
	{
		CString result;
		InvokeHelper(0xc4002cc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseMultiValue29()
	{
		CString result;
		InvokeHelper(0xc4002ce, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseMultiValue29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_ActualWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xc4002d0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualOvertimeWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xc4002d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualOvertimeWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Created()
	{
		VARIANT result;
		InvokeHelper(0xc4002d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Created(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Guid()
	{
		CString result;
		InvokeHelper(0xc4002d8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_CalendarGuid()
	{
		CString result;
		InvokeHelper(0xc4002d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_ErrorMessage()
	{
		CString result;
		InvokeHelper(0xc4002e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_DefaultAssignmentOwner()
	{
		CString result;
		InvokeHelper(0xc4002e4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DefaultAssignmentOwner(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc4002e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Budget()
	{
		VARIANT result;
		InvokeHelper(0xc4002f0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Budget(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc4002f1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc4002f2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Import()
	{
		VARIANT result;
		InvokeHelper(0xc4002f3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Import(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc4002f4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc4002f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc4002f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc4002f9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc4002fc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc4002fd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc4002fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400300, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400300, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400301, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400301, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400304, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400304, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400305, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400305, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400308, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400308, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400309, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400309, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc40030c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40030c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc40030d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40030d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400310, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400310, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400311, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400311, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400314, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400314, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400315, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400315, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc400318, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400318, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc400319, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400319, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xc40031c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40031c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xc40031d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc40031d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_IsTeam()
	{
		VARIANT result;
		InvokeHelper(0xc400320, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_IsTeam(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xc400320, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_CostCenter()
	{
		CString result;
		InvokeHelper(0xc400321, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_CostCenter(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc400321, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// Resource properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CResourceGroups wrapper class

class CResourceGroups : public COleDispatchDriver
{
public:
	CResourceGroups(){} // Calls COleDispatchDriver default constructor
	CResourceGroups(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CResourceGroups(const CResourceGroups& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ResourceGroups methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, LPCTSTR FieldName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, FieldName);
		return result;
	}
	LPDISPATCH Copy(LPCTSTR Name, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// ResourceGroups properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CResources wrapper class

class CResources : public COleDispatchDriver
{
public:
	CResources(){} // Calls COleDispatchDriver default constructor
	CResources(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CResources(const CResources& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Resources methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_UniqueID(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfff1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	LPDISPATCH Add(VARIANT& Name, VARIANT& Before)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Name, &Before);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// Resources properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CSelection wrapper class

class CSelection : public COleDispatchDriver
{
public:
	CSelection(){} // Calls COleDispatchDriver default constructor
	CSelection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSelection(const CSelection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Selection methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Tasks()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Resources()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_FieldNameList()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_FieldIDList()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Selection properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CShift wrapper class

class CShift : public COleDispatchDriver
{
public:
	CShift(){} // Calls COleDispatchDriver default constructor
	CShift(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CShift(const CShift& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Shift methods
public:
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Clear()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Shift properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CSplitPart wrapper class

class CSplitPart : public COleDispatchDriver
{
public:
	CSplitPart(){} // Calls COleDispatchDriver default constructor
	CSplitPart(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSplitPart(const CSplitPart& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// SplitPart methods
public:
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

	// SplitPart properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CSplitParts wrapper class

class CSplitParts : public COleDispatchDriver
{
public:
	CSplitParts(){} // Calls COleDispatchDriver default constructor
	CSplitParts(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSplitParts(const CSplitParts& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// SplitParts methods
public:
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void Add(VARIANT& StartSplitPartOn, VARIANT& EndSplitPartOn)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &StartSplitPartOn, &EndSplitPartOn);
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// SplitParts properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CStartDriver wrapper class

class CStartDriver : public COleDispatchDriver
{
public:
	CStartDriver(){} // Calls COleDispatchDriver default constructor
	CStartDriver(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CStartDriver(const CStartDriver& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// StartDriver methods
public:
	LPDISPATCH get_ActualStartDrivers()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_PredecessorDrivers()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ChildTaskDrivers()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_CalendarDrivers()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// StartDriver properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CSubproject wrapper class

class CSubproject : public COleDispatchDriver
{
public:
	CSubproject(){} // Calls COleDispatchDriver default constructor
	CSubproject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSubproject(const CSubproject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Subproject methods
public:
	BOOL get_LinkToSource()
	{
		BOOL result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_LinkToSource(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Path()
	{
		CString result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Path(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ReadOnly()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ReadOnly(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_SourceProject()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_InsertedProjectSummary()
	{
		LPDISPATCH result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_IsLoaded()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}

	// Subproject properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CSubprojects wrapper class

class CSubprojects : public COleDispatchDriver
{
public:
	CSubprojects(){} // Calls COleDispatchDriver default constructor
	CSubprojects(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSubprojects(const CSubprojects& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Subprojects methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// Subprojects properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTable0 wrapper class

class CTable0 : public COleDispatchDriver
{
public:
	CTable0(){} // Calls COleDispatchDriver default constructor
	CTable0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTable0(const CTable0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Table methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_TableType()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_ShowInMenu()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowInMenu(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Apply()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_DateFormat()
	{
		long result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DateFormat(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_RowHeight()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_RowHeight(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_LockFirstColumn()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_LockFirstColumn(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AdjustHeaderRowHeight()
	{
		BOOL result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AdjustHeaderRowHeight(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_TableFields()
	{
		LPDISPATCH result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Table properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTableField wrapper class

class CTableField : public COleDispatchDriver
{
public:
	CTableField(){} // Calls COleDispatchDriver default constructor
	CTableField(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTableField(const CTableField& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TableField methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_Field()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Field(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AlignData()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AlignData(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Width()
	{
		long result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Width(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Title()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Title(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AlignTitle()
	{
		long result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AlignTitle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoWrap()
	{
		BOOL result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoWrap(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// TableField properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTableFields wrapper class

class CTableFields : public COleDispatchDriver
{
public:
	CTableFields(){} // Calls COleDispatchDriver default constructor
	CTableFields(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTableFields(const CTableFields& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TableFields methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(long Field, long AlignData, long Width, LPCTSTR Title, long AlignTitle, long Before, BOOL AutoWrap)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Field, AlignData, Width, Title, AlignTitle, Before, AutoWrap);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// TableFields properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTables0 wrapper class

class CTables0 : public COleDispatchDriver
{
public:
	CTables0(){} // Calls COleDispatchDriver default constructor
	CTables0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTables0(const CTables0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Tables methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Copy(VARIANT& Source, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, long Field, BOOL Task)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BOOL ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Field, Task);
		return result;
	}

	// Tables properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTask wrapper class

class CTask : public COleDispatchDriver
{
public:
	CTask(){} // Calls COleDispatchDriver default constructor
	CTask(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTask(const CTask& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Task methods
public:
	VARIANT get_Work()
	{
		VARIANT result;
		InvokeHelper(0xb400000, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineWork()
	{
		VARIANT result;
		InvokeHelper(0xb400001, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400001, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualWork()
	{
		VARIANT result;
		InvokeHelper(0xb400002, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400002, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_WorkVariance()
	{
		VARIANT result;
		InvokeHelper(0xb400003, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingWork()
	{
		VARIANT result;
		InvokeHelper(0xb400004, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_RemainingWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400005, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400005, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineCost()
	{
		VARIANT result;
		InvokeHelper(0xb400006, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualCost()
	{
		VARIANT result;
		InvokeHelper(0xb400007, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400007, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400008, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_CostVariance()
	{
		VARIANT result;
		InvokeHelper(0xb400009, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingCost()
	{
		VARIANT result;
		InvokeHelper(0xb40000a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWP()
	{
		VARIANT result;
		InvokeHelper(0xb40000b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BCWS()
	{
		VARIANT result;
		InvokeHelper(0xb40000c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_SV()
	{
		VARIANT result;
		InvokeHelper(0xb40000d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0xb40000e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40000e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Notes()
	{
		CString result;
		InvokeHelper(0xb40000f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Notes(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40000f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_WBS()
	{
		CString result;
		InvokeHelper(0xb400010, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_WBS(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400010, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_ConstraintType()
	{
		VARIANT result;
		InvokeHelper(0xb400011, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ConstraintType(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400011, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ConstraintDate()
	{
		VARIANT result;
		InvokeHelper(0xb400012, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ConstraintDate(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400012, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Critical()
	{
		VARIANT result;
		InvokeHelper(0xb400013, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LevelingDelay()
	{
		VARIANT result;
		InvokeHelper(0xb400014, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_LevelingDelay(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400014, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_FreeSlack()
	{
		VARIANT result;
		InvokeHelper(0xb400015, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_TotalSlack()
	{
		VARIANT result;
		InvokeHelper(0xb400016, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_ID()
	{
		long result;
		InvokeHelper(0xb400017, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Milestone()
	{
		VARIANT result;
		InvokeHelper(0xb400018, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Milestone(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400018, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Priority()
	{
		VARIANT result;
		InvokeHelper(0xb400019, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Priority(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400019, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Subproject()
	{
		CString result;
		InvokeHelper(0xb40001a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Subproject(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40001a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_BaselineDuration()
	{
		VARIANT result;
		InvokeHelper(0xb40001b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineDuration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40001b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualDuration()
	{
		VARIANT result;
		InvokeHelper(0xb40001c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualDuration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40001c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration()
	{
		VARIANT result;
		InvokeHelper(0xb40001d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40001d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_DurationVariance()
	{
		VARIANT result;
		InvokeHelper(0xb40001e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingDuration()
	{
		VARIANT result;
		InvokeHelper(0xb40001f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_RemainingDuration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40001f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_PercentComplete()
	{
		VARIANT result;
		InvokeHelper(0xb400020, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_PercentComplete(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400020, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_PercentWorkComplete()
	{
		VARIANT result;
		InvokeHelper(0xb400021, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_PercentWorkComplete(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400021, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_FixedDuration()
	{
		VARIANT result;
		InvokeHelper(0xb400022, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_FixedDuration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400022, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0xb400023, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400023, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0xb400024, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400024, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EarlyStart()
	{
		VARIANT result;
		InvokeHelper(0xb400025, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EarlyFinish()
	{
		VARIANT result;
		InvokeHelper(0xb400026, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LateStart()
	{
		VARIANT result;
		InvokeHelper(0xb400027, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LateFinish()
	{
		VARIANT result;
		InvokeHelper(0xb400028, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualStart()
	{
		VARIANT result;
		InvokeHelper(0xb400029, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400029, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualFinish()
	{
		VARIANT result;
		InvokeHelper(0xb40002a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40002a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineStart()
	{
		VARIANT result;
		InvokeHelper(0xb40002b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40002b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineFinish()
	{
		VARIANT result;
		InvokeHelper(0xb40002c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40002c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_StartVariance()
	{
		VARIANT result;
		InvokeHelper(0xb40002d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FinishVariance()
	{
		VARIANT result;
		InvokeHelper(0xb40002e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Text1()
	{
		CString result;
		InvokeHelper(0xb400033, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400033, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start1()
	{
		VARIANT result;
		InvokeHelper(0xb400034, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400034, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish1()
	{
		VARIANT result;
		InvokeHelper(0xb400035, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400035, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text2()
	{
		CString result;
		InvokeHelper(0xb400036, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400036, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start2()
	{
		VARIANT result;
		InvokeHelper(0xb400037, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400037, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish2()
	{
		VARIANT result;
		InvokeHelper(0xb400038, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400038, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text3()
	{
		CString result;
		InvokeHelper(0xb400039, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400039, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start3()
	{
		VARIANT result;
		InvokeHelper(0xb40003a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40003a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish3()
	{
		VARIANT result;
		InvokeHelper(0xb40003b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40003b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text4()
	{
		CString result;
		InvokeHelper(0xb40003c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40003c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start4()
	{
		VARIANT result;
		InvokeHelper(0xb40003d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40003d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish4()
	{
		VARIANT result;
		InvokeHelper(0xb40003e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40003e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text5()
	{
		CString result;
		InvokeHelper(0xb40003f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40003f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Start5()
	{
		VARIANT result;
		InvokeHelper(0xb400040, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400040, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish5()
	{
		VARIANT result;
		InvokeHelper(0xb400041, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400041, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Text6()
	{
		CString result;
		InvokeHelper(0xb400042, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400042, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text7()
	{
		CString result;
		InvokeHelper(0xb400043, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400043, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text8()
	{
		CString result;
		InvokeHelper(0xb400044, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400044, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text9()
	{
		CString result;
		InvokeHelper(0xb400045, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400045, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text10()
	{
		CString result;
		InvokeHelper(0xb400046, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400046, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Marked()
	{
		VARIANT result;
		InvokeHelper(0xb400047, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Marked(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400047, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag1()
	{
		VARIANT result;
		InvokeHelper(0xb400048, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400048, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag2()
	{
		VARIANT result;
		InvokeHelper(0xb400049, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400049, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag3()
	{
		VARIANT result;
		InvokeHelper(0xb40004a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag4()
	{
		VARIANT result;
		InvokeHelper(0xb40004b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag5()
	{
		VARIANT result;
		InvokeHelper(0xb40004c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag6()
	{
		VARIANT result;
		InvokeHelper(0xb40004d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag7()
	{
		VARIANT result;
		InvokeHelper(0xb40004e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag8()
	{
		VARIANT result;
		InvokeHelper(0xb40004f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40004f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag9()
	{
		VARIANT result;
		InvokeHelper(0xb400050, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400050, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag10()
	{
		VARIANT result;
		InvokeHelper(0xb400051, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400051, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Rollup()
	{
		VARIANT result;
		InvokeHelper(0xb400052, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Rollup(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400052, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_CV()
	{
		VARIANT result;
		InvokeHelper(0xb400053, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Project()
	{
		CString result;
		InvokeHelper(0xb400054, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	short get_OutlineLevel()
	{
		short result;
		InvokeHelper(0xb400055, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	long get_UniqueID()
	{
		long result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	double get_Number1()
	{
		double result;
		InvokeHelper(0xb400057, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400057, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number2()
	{
		double result;
		InvokeHelper(0xb400058, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400058, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number3()
	{
		double result;
		InvokeHelper(0xb400059, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400059, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number4()
	{
		double result;
		InvokeHelper(0xb40005a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40005a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number5()
	{
		double result;
		InvokeHelper(0xb40005b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40005b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Summary()
	{
		VARIANT result;
		InvokeHelper(0xb40005c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Created()
	{
		VARIANT result;
		InvokeHelper(0xb40005d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_UniqueIDPredecessors()
	{
		CString result;
		InvokeHelper(0xb40005f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_UniqueIDPredecessors(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40005f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_UniqueIDSuccessors()
	{
		CString result;
		InvokeHelper(0xb400060, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_UniqueIDSuccessors(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400060, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Objects()
	{
		long result;
		InvokeHelper(0xb400061, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LinkedFields()
	{
		VARIANT result;
		InvokeHelper(0xb400062, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Resume()
	{
		VARIANT result;
		InvokeHelper(0xb400063, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Resume(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400063, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Stop()
	{
		VARIANT result;
		InvokeHelper(0xb400064, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Stop(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400064, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ResumeNoEarlierThan()
	{
		VARIANT result;
		InvokeHelper(0xb400065, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ResumeNoEarlierThan(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400065, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_OutlineNumber()
	{
		CString result;
		InvokeHelper(0xb400066, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Duration1()
	{
		VARIANT result;
		InvokeHelper(0xb400067, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration2()
	{
		VARIANT result;
		InvokeHelper(0xb400068, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400068, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration3()
	{
		VARIANT result;
		InvokeHelper(0xb400069, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400069, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost1()
	{
		VARIANT result;
		InvokeHelper(0xb40006a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40006a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost2()
	{
		VARIANT result;
		InvokeHelper(0xb40006b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40006b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost3()
	{
		VARIANT result;
		InvokeHelper(0xb40006c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40006c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_HideBar()
	{
		VARIANT result;
		InvokeHelper(0xb40006d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_HideBar(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40006d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Confirmed()
	{
		VARIANT result;
		InvokeHelper(0xb40006e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_UpdateNeeded()
	{
		VARIANT result;
		InvokeHelper(0xb40006f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_Contact()
	{
		CString result;
		InvokeHelper(0xb400070, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Contact(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400070, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ResourceGroup()
	{
		CString result;
		InvokeHelper(0xb400071, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ACWP()
	{
		VARIANT result;
		InvokeHelper(0xb400078, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0xb400080, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Type(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb400080, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Recurring()
	{
		VARIANT result;
		InvokeHelper(0xb400081, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EffortDriven()
	{
		VARIANT result;
		InvokeHelper(0xb400084, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EffortDriven(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400084, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_OutlineChildren()
	{
		LPDISPATCH result;
		InvokeHelper(0xb400089, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_PredecessorTasks()
	{
		LPDISPATCH result;
		InvokeHelper(0xb40008b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_SuccessorTasks()
	{
		LPDISPATCH result;
		InvokeHelper(0xb40008d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_OvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xb4000a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xb4000a4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingOvertimeWork()
	{
		VARIANT result;
		InvokeHelper(0xb4000a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RegularWork()
	{
		VARIANT result;
		InvokeHelper(0xb4000a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_OvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xb4000a8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_ActualOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xb4000a9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_RemainingOvertimeCost()
	{
		VARIANT result;
		InvokeHelper(0xb4000aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long get_FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4000c8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4000c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Assignments()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000d5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_Parent(LPDISPATCH newValue)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xb4000d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Hyperlink()
	{
		CString result;
		InvokeHelper(0xb4000d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Hyperlink(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4000d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkAddress()
	{
		CString result;
		InvokeHelper(0xb4000da, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4000da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkSubAddress()
	{
		CString result;
		InvokeHelper(0xb4000db, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkSubAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4000db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HyperlinkHREF()
	{
		CString result;
		InvokeHelper(0xb4000dc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkHREF(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4000dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Overallocated()
	{
		VARIANT result;
		InvokeHelper(0xb4000e1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_SplitParts()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000e2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString GetField(long FieldID)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4000e5, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FieldID);
		return result;
	}
	void SetField(long FieldID, LPCTSTR Value)
	{
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0xb4000e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FieldID, Value);
	}
	VARIANT get_ExternalTask()
	{
		VARIANT result;
		InvokeHelper(0xb4000e8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0xb4000ec, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AppendNotes(LPCTSTR Value)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4000ed, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Value);
	}
	LPDISPATCH get_OutlineParent()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Resources()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4000ef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH TimeScaleData(VARIANT& StartDate, VARIANT& EndDate, long Type, long TimeScaleUnit, long Count)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xb4000f5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &StartDate, &EndDate, Type, TimeScaleUnit, Count);
		return result;
	}
	VARIANT get_SubProjectReadOnly()
	{
		VARIANT result;
		InvokeHelper(0xb4000f6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_SubProjectReadOnly(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4000f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ResponsePending()
	{
		VARIANT result;
		InvokeHelper(0xb4000fa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_TeamStatusPending()
	{
		VARIANT result;
		InvokeHelper(0xb4000fb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_LevelingCanSplit()
	{
		VARIANT result;
		InvokeHelper(0xb4000fc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_LevelingCanSplit(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4000fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_LevelIndividualAssignments()
	{
		VARIANT result;
		InvokeHelper(0xb4000fd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_LevelIndividualAssignments(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4000fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost4()
	{
		VARIANT result;
		InvokeHelper(0xb400102, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400102, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost5()
	{
		VARIANT result;
		InvokeHelper(0xb400103, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400103, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost6()
	{
		VARIANT result;
		InvokeHelper(0xb400104, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400104, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost7()
	{
		VARIANT result;
		InvokeHelper(0xb400105, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost8()
	{
		VARIANT result;
		InvokeHelper(0xb400106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost9()
	{
		VARIANT result;
		InvokeHelper(0xb400107, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Cost10()
	{
		VARIANT result;
		InvokeHelper(0xb400108, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Cost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date1()
	{
		VARIANT result;
		InvokeHelper(0xb400109, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date2()
	{
		VARIANT result;
		InvokeHelper(0xb40010a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date3()
	{
		VARIANT result;
		InvokeHelper(0xb40010b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date4()
	{
		VARIANT result;
		InvokeHelper(0xb40010c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date5()
	{
		VARIANT result;
		InvokeHelper(0xb40010d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date6()
	{
		VARIANT result;
		InvokeHelper(0xb40010e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date7()
	{
		VARIANT result;
		InvokeHelper(0xb40010f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40010f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date8()
	{
		VARIANT result;
		InvokeHelper(0xb400110, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date9()
	{
		VARIANT result;
		InvokeHelper(0xb400111, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400111, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Date10()
	{
		VARIANT result;
		InvokeHelper(0xb400112, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Date10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration4()
	{
		VARIANT result;
		InvokeHelper(0xb400113, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration5()
	{
		VARIANT result;
		InvokeHelper(0xb400114, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration6()
	{
		VARIANT result;
		InvokeHelper(0xb400115, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400115, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration7()
	{
		VARIANT result;
		InvokeHelper(0xb400116, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400116, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration8()
	{
		VARIANT result;
		InvokeHelper(0xb400117, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400117, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration9()
	{
		VARIANT result;
		InvokeHelper(0xb400118, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400118, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration10()
	{
		VARIANT result;
		InvokeHelper(0xb400119, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400119, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start6()
	{
		VARIANT result;
		InvokeHelper(0xb40011a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish6()
	{
		VARIANT result;
		InvokeHelper(0xb40011b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start7()
	{
		VARIANT result;
		InvokeHelper(0xb40011c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish7()
	{
		VARIANT result;
		InvokeHelper(0xb40011d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start8()
	{
		VARIANT result;
		InvokeHelper(0xb40011e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish8()
	{
		VARIANT result;
		InvokeHelper(0xb40011f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40011f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start9()
	{
		VARIANT result;
		InvokeHelper(0xb400120, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400120, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish9()
	{
		VARIANT result;
		InvokeHelper(0xb400121, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400121, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Start10()
	{
		VARIANT result;
		InvokeHelper(0xb400122, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400122, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish10()
	{
		VARIANT result;
		InvokeHelper(0xb400123, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400123, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag11()
	{
		VARIANT result;
		InvokeHelper(0xb400124, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400124, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag12()
	{
		VARIANT result;
		InvokeHelper(0xb400125, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400125, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag13()
	{
		VARIANT result;
		InvokeHelper(0xb400126, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag14()
	{
		VARIANT result;
		InvokeHelper(0xb400127, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400127, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag15()
	{
		VARIANT result;
		InvokeHelper(0xb400128, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag16()
	{
		VARIANT result;
		InvokeHelper(0xb400129, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag17()
	{
		VARIANT result;
		InvokeHelper(0xb40012a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40012a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag18()
	{
		VARIANT result;
		InvokeHelper(0xb40012b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40012b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag19()
	{
		VARIANT result;
		InvokeHelper(0xb40012c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40012c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Flag20()
	{
		VARIANT result;
		InvokeHelper(0xb40012d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Flag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40012d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_Number6()
	{
		double result;
		InvokeHelper(0xb40012e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40012e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number7()
	{
		double result;
		InvokeHelper(0xb40012f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40012f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number8()
	{
		double result;
		InvokeHelper(0xb400130, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400130, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number9()
	{
		double result;
		InvokeHelper(0xb400131, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400131, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number10()
	{
		double result;
		InvokeHelper(0xb400132, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400132, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number11()
	{
		double result;
		InvokeHelper(0xb400133, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400133, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number12()
	{
		double result;
		InvokeHelper(0xb400134, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400134, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number13()
	{
		double result;
		InvokeHelper(0xb400135, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400135, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number14()
	{
		double result;
		InvokeHelper(0xb400136, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400136, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number15()
	{
		double result;
		InvokeHelper(0xb400137, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400137, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number16()
	{
		double result;
		InvokeHelper(0xb400138, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400138, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number17()
	{
		double result;
		InvokeHelper(0xb400139, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400139, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number18()
	{
		double result;
		InvokeHelper(0xb40013a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40013a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number19()
	{
		double result;
		InvokeHelper(0xb40013b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40013b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Number20()
	{
		double result;
		InvokeHelper(0xb40013c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_Number20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40013c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text11()
	{
		CString result;
		InvokeHelper(0xb40013d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40013d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text12()
	{
		CString result;
		InvokeHelper(0xb40013e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40013e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text13()
	{
		CString result;
		InvokeHelper(0xb40013f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40013f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text14()
	{
		CString result;
		InvokeHelper(0xb400140, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400140, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text15()
	{
		CString result;
		InvokeHelper(0xb400141, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400141, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text16()
	{
		CString result;
		InvokeHelper(0xb400142, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400142, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text17()
	{
		CString result;
		InvokeHelper(0xb400143, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400143, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text18()
	{
		CString result;
		InvokeHelper(0xb400144, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400144, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text19()
	{
		CString result;
		InvokeHelper(0xb400145, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400145, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text20()
	{
		CString result;
		InvokeHelper(0xb400146, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400146, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text21()
	{
		CString result;
		InvokeHelper(0xb400147, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400147, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text22()
	{
		CString result;
		InvokeHelper(0xb400148, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400148, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text23()
	{
		CString result;
		InvokeHelper(0xb400149, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400149, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text24()
	{
		CString result;
		InvokeHelper(0xb40014a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text25()
	{
		CString result;
		InvokeHelper(0xb40014b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text26()
	{
		CString result;
		InvokeHelper(0xb40014c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text27()
	{
		CString result;
		InvokeHelper(0xb40014d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text28()
	{
		CString result;
		InvokeHelper(0xb40014e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text29()
	{
		CString result;
		InvokeHelper(0xb40014f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40014f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Text30()
	{
		CString result;
		InvokeHelper(0xb400150, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Text30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400150, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ResourcePhonetics()
	{
		CString result;
		InvokeHelper(0xb40015d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void LinkPredecessors(LPDISPATCH Tasks, long Link, VARIANT& Lag)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xb40015f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Tasks, Link, &Lag);
	}
	void LinkSuccessors(LPDISPATCH Tasks, long Link, VARIANT& Lag)
	{
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xb400160, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Tasks, Link, &Lag);
	}
	void UnlinkPredecessors(LPDISPATCH Tasks)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xb400161, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Tasks);
	}
	void UnlinkSuccessors(LPDISPATCH Tasks)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xb400162, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Tasks);
	}
	void OutlineIndent()
	{
		InvokeHelper(0xb400163, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void OutlineOutdent()
	{
		InvokeHelper(0xb400164, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void OutlineHideSubTasks()
	{
		InvokeHelper(0xb400165, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void OutlineShowSubTasks()
	{
		InvokeHelper(0xb400166, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void OutlineShowAllTasks()
	{
		InvokeHelper(0xb400167, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xb400168, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_PreleveledStart()
	{
		VARIANT result;
		InvokeHelper(0xb400171, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_PreleveledFinish()
	{
		VARIANT result;
		InvokeHelper(0xb400172, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void Split(VARIANT& StartSplitOn, VARIANT& EndSplitOn)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xb400176, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &StartSplitOn, &EndSplitOn);
	}
	CString get_Predecessors()
	{
		CString result;
		InvokeHelper(0xb400186, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Predecessors(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400186, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Successors()
	{
		CString result;
		InvokeHelper(0xb400187, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Successors(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400187, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ResourceNames()
	{
		CString result;
		InvokeHelper(0xb40018a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_ResourceNames(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40018a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ResourceInitials()
	{
		CString result;
		InvokeHelper(0xb40018b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_ResourceInitials(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40018b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_OutlineLevel(short newValue)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb400055, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb40018c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40018c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_IgnoreResourceCalendar()
	{
		VARIANT result;
		InvokeHelper(0xb40018f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreResourceCalendar(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40018f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Calendar()
	{
		CString result;
		InvokeHelper(0xb400192, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Calendar(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400192, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Duration1Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400193, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration1Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400193, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration2Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400194, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration2Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400194, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration3Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400195, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration3Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400195, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration4Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400196, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration4Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400196, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration5Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400197, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration5Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400197, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration6Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400198, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration6Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400198, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration7Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb400199, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration7Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400199, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration8Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb40019a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration8Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40019a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration9Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb40019b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration9Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40019b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Duration10Estimated()
	{
		VARIANT result;
		InvokeHelper(0xb40019c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Duration10Estimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40019c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineDurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40019d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineDurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40019d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_OutlineCode1()
	{
		CString result;
		InvokeHelper(0xb4001a0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode2()
	{
		CString result;
		InvokeHelper(0xb4001a2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode3()
	{
		CString result;
		InvokeHelper(0xb4001a4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode4()
	{
		CString result;
		InvokeHelper(0xb4001a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode5()
	{
		CString result;
		InvokeHelper(0xb4001a8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode6()
	{
		CString result;
		InvokeHelper(0xb4001aa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode7()
	{
		CString result;
		InvokeHelper(0xb4001ac, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode8()
	{
		CString result;
		InvokeHelper(0xb4001ae, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode9()
	{
		CString result;
		InvokeHelper(0xb4001b0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_OutlineCode10()
	{
		CString result;
		InvokeHelper(0xb4001b2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_OutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Deadline()
	{
		VARIANT result;
		InvokeHelper(0xb4001b5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Deadline(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_StartSlack()
	{
		VARIANT result;
		InvokeHelper(0xb4001b6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_FinishSlack()
	{
		VARIANT result;
		InvokeHelper(0xb4001b7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_VAC()
	{
		VARIANT result;
		InvokeHelper(0xb4001b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TaskDependencies()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4001bd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_GroupBySummary()
	{
		VARIANT result;
		InvokeHelper(0xb4001be, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	CString get_WBSPredecessors()
	{
		CString result;
		InvokeHelper(0xb4001c1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_WBSSuccessors()
	{
		CString result;
		InvokeHelper(0xb4001c2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_HyperlinkScreenTip()
	{
		CString result;
		InvokeHelper(0xb4001c4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HyperlinkScreenTip(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4001c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline1Start()
	{
		VARIANT result;
		InvokeHelper(0xb4001e2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Finish()
	{
		VARIANT result;
		InvokeHelper(0xb4001e3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Cost()
	{
		VARIANT result;
		InvokeHelper(0xb4001e4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Work()
	{
		VARIANT result;
		InvokeHelper(0xb4001e5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1Duration()
	{
		VARIANT result;
		InvokeHelper(0xb4001e7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Start()
	{
		VARIANT result;
		InvokeHelper(0xb4001ed, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Finish()
	{
		VARIANT result;
		InvokeHelper(0xb4001ee, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Cost()
	{
		VARIANT result;
		InvokeHelper(0xb4001ef, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Work()
	{
		VARIANT result;
		InvokeHelper(0xb4001f0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2Duration()
	{
		VARIANT result;
		InvokeHelper(0xb4001f2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Start()
	{
		VARIANT result;
		InvokeHelper(0xb4001f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Finish()
	{
		VARIANT result;
		InvokeHelper(0xb4001f9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Cost()
	{
		VARIANT result;
		InvokeHelper(0xb4001fa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Work()
	{
		VARIANT result;
		InvokeHelper(0xb4001fb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3Duration()
	{
		VARIANT result;
		InvokeHelper(0xb4001fd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Start()
	{
		VARIANT result;
		InvokeHelper(0xb400203, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400203, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Finish()
	{
		VARIANT result;
		InvokeHelper(0xb400204, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400204, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400205, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400205, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Work()
	{
		VARIANT result;
		InvokeHelper(0xb400206, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400206, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400208, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400208, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Start()
	{
		VARIANT result;
		InvokeHelper(0xb40020e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40020e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Finish()
	{
		VARIANT result;
		InvokeHelper(0xb40020f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40020f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400210, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400210, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Work()
	{
		VARIANT result;
		InvokeHelper(0xb400211, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400211, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400213, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400213, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_CPI()
	{
		double result;
		InvokeHelper(0xb400219, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	double get_SPI()
	{
		double result;
		InvokeHelper(0xb40021a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	VARIANT get_CVPercent()
	{
		VARIANT result;
		InvokeHelper(0xb40021b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_SVPercent()
	{
		VARIANT result;
		InvokeHelper(0xb40021c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EAC()
	{
		VARIANT result;
		InvokeHelper(0xb40021d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	double get_TCPI()
	{
		double result;
		InvokeHelper(0xb40021e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	long get_Status()
	{
		long result;
		InvokeHelper(0xb40021f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Baseline6Start()
	{
		VARIANT result;
		InvokeHelper(0xb400220, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400220, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Finish()
	{
		VARIANT result;
		InvokeHelper(0xb400221, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400221, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400222, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400222, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Work()
	{
		VARIANT result;
		InvokeHelper(0xb400223, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400223, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400225, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400225, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Start()
	{
		VARIANT result;
		InvokeHelper(0xb40022b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40022b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Finish()
	{
		VARIANT result;
		InvokeHelper(0xb40022c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40022c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Cost()
	{
		VARIANT result;
		InvokeHelper(0xb40022d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40022d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Work()
	{
		VARIANT result;
		InvokeHelper(0xb40022e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400230, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Start()
	{
		VARIANT result;
		InvokeHelper(0xb400236, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400236, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Finish()
	{
		VARIANT result;
		InvokeHelper(0xb400237, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400237, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400238, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400238, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Work()
	{
		VARIANT result;
		InvokeHelper(0xb400239, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400239, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8Duration()
	{
		VARIANT result;
		InvokeHelper(0xb40023b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40023b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Start()
	{
		VARIANT result;
		InvokeHelper(0xb400241, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400241, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Finish()
	{
		VARIANT result;
		InvokeHelper(0xb400242, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400242, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Cost()
	{
		VARIANT result;
		InvokeHelper(0xb400243, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400243, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Work()
	{
		VARIANT result;
		InvokeHelper(0xb400244, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400244, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400246, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400246, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Start()
	{
		VARIANT result;
		InvokeHelper(0xb40024c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40024c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Finish()
	{
		VARIANT result;
		InvokeHelper(0xb40024d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40024d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Cost()
	{
		VARIANT result;
		InvokeHelper(0xb40024e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Cost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40024e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Work()
	{
		VARIANT result;
		InvokeHelper(0xb40024f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Work(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40024f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10Duration()
	{
		VARIANT result;
		InvokeHelper(0xb400251, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10Duration(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400251, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost1()
	{
		VARIANT result;
		InvokeHelper(0xb400257, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost2()
	{
		VARIANT result;
		InvokeHelper(0xb400258, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost3()
	{
		VARIANT result;
		InvokeHelper(0xb400259, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400259, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost4()
	{
		VARIANT result;
		InvokeHelper(0xb40025a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost5()
	{
		VARIANT result;
		InvokeHelper(0xb40025b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost6()
	{
		VARIANT result;
		InvokeHelper(0xb40025c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost7()
	{
		VARIANT result;
		InvokeHelper(0xb40025d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost8()
	{
		VARIANT result;
		InvokeHelper(0xb40025e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost9()
	{
		VARIANT result;
		InvokeHelper(0xb40025f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40025f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseCost10()
	{
		VARIANT result;
		InvokeHelper(0xb400260, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseCost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400260, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate1()
	{
		VARIANT result;
		InvokeHelper(0xb400261, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400261, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate2()
	{
		VARIANT result;
		InvokeHelper(0xb400262, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400262, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate3()
	{
		VARIANT result;
		InvokeHelper(0xb400263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate4()
	{
		VARIANT result;
		InvokeHelper(0xb400264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate5()
	{
		VARIANT result;
		InvokeHelper(0xb400265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate6()
	{
		VARIANT result;
		InvokeHelper(0xb400266, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate7()
	{
		VARIANT result;
		InvokeHelper(0xb400267, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400267, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate8()
	{
		VARIANT result;
		InvokeHelper(0xb400268, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate9()
	{
		VARIANT result;
		InvokeHelper(0xb400269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate10()
	{
		VARIANT result;
		InvokeHelper(0xb40026a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate11()
	{
		VARIANT result;
		InvokeHelper(0xb40026b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate12()
	{
		VARIANT result;
		InvokeHelper(0xb40026c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate13()
	{
		VARIANT result;
		InvokeHelper(0xb40026d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate14()
	{
		VARIANT result;
		InvokeHelper(0xb40026e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate15()
	{
		VARIANT result;
		InvokeHelper(0xb40026f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40026f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate16()
	{
		VARIANT result;
		InvokeHelper(0xb400270, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400270, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate17()
	{
		VARIANT result;
		InvokeHelper(0xb400271, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400271, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate18()
	{
		VARIANT result;
		InvokeHelper(0xb400272, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400272, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate19()
	{
		VARIANT result;
		InvokeHelper(0xb400273, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400273, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate20()
	{
		VARIANT result;
		InvokeHelper(0xb400274, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate21()
	{
		VARIANT result;
		InvokeHelper(0xb400275, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate21(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400275, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate22()
	{
		VARIANT result;
		InvokeHelper(0xb400276, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate22(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400276, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate23()
	{
		VARIANT result;
		InvokeHelper(0xb400277, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate23(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400277, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate24()
	{
		VARIANT result;
		InvokeHelper(0xb400278, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate24(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400278, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate25()
	{
		VARIANT result;
		InvokeHelper(0xb400279, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate25(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400279, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate26()
	{
		VARIANT result;
		InvokeHelper(0xb40027a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate26(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate27()
	{
		VARIANT result;
		InvokeHelper(0xb40027b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate27(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate28()
	{
		VARIANT result;
		InvokeHelper(0xb40027c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate28(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate29()
	{
		VARIANT result;
		InvokeHelper(0xb40027d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate29(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDate30()
	{
		VARIANT result;
		InvokeHelper(0xb40027e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDate30(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration1()
	{
		VARIANT result;
		InvokeHelper(0xb40027f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40027f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration2()
	{
		VARIANT result;
		InvokeHelper(0xb400280, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400280, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration3()
	{
		VARIANT result;
		InvokeHelper(0xb400281, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400281, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration4()
	{
		VARIANT result;
		InvokeHelper(0xb400282, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400282, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration5()
	{
		VARIANT result;
		InvokeHelper(0xb400283, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400283, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration6()
	{
		VARIANT result;
		InvokeHelper(0xb400284, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration7()
	{
		VARIANT result;
		InvokeHelper(0xb400285, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400285, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration8()
	{
		VARIANT result;
		InvokeHelper(0xb400286, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration9()
	{
		VARIANT result;
		InvokeHelper(0xb400287, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseDuration10()
	{
		VARIANT result;
		InvokeHelper(0xb400288, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseDuration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag1()
	{
		VARIANT result;
		InvokeHelper(0xb400293, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400293, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag2()
	{
		VARIANT result;
		InvokeHelper(0xb400294, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400294, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag3()
	{
		VARIANT result;
		InvokeHelper(0xb400295, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400295, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag4()
	{
		VARIANT result;
		InvokeHelper(0xb400296, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400296, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag5()
	{
		VARIANT result;
		InvokeHelper(0xb400297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag6()
	{
		VARIANT result;
		InvokeHelper(0xb400298, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400298, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag7()
	{
		VARIANT result;
		InvokeHelper(0xb400299, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400299, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag8()
	{
		VARIANT result;
		InvokeHelper(0xb40029a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag9()
	{
		VARIANT result;
		InvokeHelper(0xb40029b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag10()
	{
		VARIANT result;
		InvokeHelper(0xb40029c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag11()
	{
		VARIANT result;
		InvokeHelper(0xb40029d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag12()
	{
		VARIANT result;
		InvokeHelper(0xb40029e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag13()
	{
		VARIANT result;
		InvokeHelper(0xb40029f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40029f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag14()
	{
		VARIANT result;
		InvokeHelper(0xb4002a0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag15()
	{
		VARIANT result;
		InvokeHelper(0xb4002a1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag16()
	{
		VARIANT result;
		InvokeHelper(0xb4002a2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag17()
	{
		VARIANT result;
		InvokeHelper(0xb4002a3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag18()
	{
		VARIANT result;
		InvokeHelper(0xb4002a4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag19()
	{
		VARIANT result;
		InvokeHelper(0xb4002a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseFlag20()
	{
		VARIANT result;
		InvokeHelper(0xb4002a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseFlag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4002a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_EnterpriseNumber1()
	{
		double result;
		InvokeHelper(0xb4002bb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber2()
	{
		double result;
		InvokeHelper(0xb4002bc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber3()
	{
		double result;
		InvokeHelper(0xb4002bd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber4()
	{
		double result;
		InvokeHelper(0xb4002be, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber5()
	{
		double result;
		InvokeHelper(0xb4002bf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber6()
	{
		double result;
		InvokeHelper(0xb4002c0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber7()
	{
		double result;
		InvokeHelper(0xb4002c1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber8()
	{
		double result;
		InvokeHelper(0xb4002c2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber9()
	{
		double result;
		InvokeHelper(0xb4002c3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber10()
	{
		double result;
		InvokeHelper(0xb4002c4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber11()
	{
		double result;
		InvokeHelper(0xb4002c5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber12()
	{
		double result;
		InvokeHelper(0xb4002c6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber13()
	{
		double result;
		InvokeHelper(0xb4002c7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber14()
	{
		double result;
		InvokeHelper(0xb4002c8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber15()
	{
		double result;
		InvokeHelper(0xb4002c9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber16()
	{
		double result;
		InvokeHelper(0xb4002ca, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber17()
	{
		double result;
		InvokeHelper(0xb4002cb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber18()
	{
		double result;
		InvokeHelper(0xb4002cc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber19()
	{
		double result;
		InvokeHelper(0xb4002cd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber20()
	{
		double result;
		InvokeHelper(0xb4002ce, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber21()
	{
		double result;
		InvokeHelper(0xb4002cf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber21(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber22()
	{
		double result;
		InvokeHelper(0xb4002d0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber22(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber23()
	{
		double result;
		InvokeHelper(0xb4002d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber23(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber24()
	{
		double result;
		InvokeHelper(0xb4002d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber24(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber25()
	{
		double result;
		InvokeHelper(0xb4002d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber25(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber26()
	{
		double result;
		InvokeHelper(0xb4002d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber26(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber27()
	{
		double result;
		InvokeHelper(0xb4002d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber27(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber28()
	{
		double result;
		InvokeHelper(0xb4002d6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber28(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber29()
	{
		double result;
		InvokeHelper(0xb4002d7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber29(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber30()
	{
		double result;
		InvokeHelper(0xb4002d8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber30(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber31()
	{
		double result;
		InvokeHelper(0xb4002d9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber31(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber32()
	{
		double result;
		InvokeHelper(0xb4002da, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber32(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber33()
	{
		double result;
		InvokeHelper(0xb4002db, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber33(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber34()
	{
		double result;
		InvokeHelper(0xb4002dc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber34(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber35()
	{
		double result;
		InvokeHelper(0xb4002dd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber35(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber36()
	{
		double result;
		InvokeHelper(0xb4002de, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber36(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber37()
	{
		double result;
		InvokeHelper(0xb4002df, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber37(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber38()
	{
		double result;
		InvokeHelper(0xb4002e0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber38(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber39()
	{
		double result;
		InvokeHelper(0xb4002e1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber39(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseNumber40()
	{
		double result;
		InvokeHelper(0xb4002e2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseNumber40(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4002e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode1()
	{
		CString result;
		InvokeHelper(0xb4002e3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode2()
	{
		CString result;
		InvokeHelper(0xb4002e5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode3()
	{
		CString result;
		InvokeHelper(0xb4002e7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode4()
	{
		CString result;
		InvokeHelper(0xb4002e9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode5()
	{
		CString result;
		InvokeHelper(0xb4002eb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode6()
	{
		CString result;
		InvokeHelper(0xb4002ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode7()
	{
		CString result;
		InvokeHelper(0xb4002ef, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode8()
	{
		CString result;
		InvokeHelper(0xb4002f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode9()
	{
		CString result;
		InvokeHelper(0xb4002f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode10()
	{
		CString result;
		InvokeHelper(0xb4002f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode11()
	{
		CString result;
		InvokeHelper(0xb4002f7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode12()
	{
		CString result;
		InvokeHelper(0xb4002f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode13()
	{
		CString result;
		InvokeHelper(0xb4002fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode14()
	{
		CString result;
		InvokeHelper(0xb4002fd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode15()
	{
		CString result;
		InvokeHelper(0xb4002ff, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4002ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode16()
	{
		CString result;
		InvokeHelper(0xb400301, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400301, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode17()
	{
		CString result;
		InvokeHelper(0xb400303, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400303, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode18()
	{
		CString result;
		InvokeHelper(0xb400305, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400305, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode19()
	{
		CString result;
		InvokeHelper(0xb400307, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400307, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode20()
	{
		CString result;
		InvokeHelper(0xb400309, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400309, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode21()
	{
		CString result;
		InvokeHelper(0xb40030b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40030b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode22()
	{
		CString result;
		InvokeHelper(0xb40030d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40030d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode23()
	{
		CString result;
		InvokeHelper(0xb40030f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40030f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode24()
	{
		CString result;
		InvokeHelper(0xb400311, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400311, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode25()
	{
		CString result;
		InvokeHelper(0xb400313, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400313, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode26()
	{
		CString result;
		InvokeHelper(0xb400315, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400315, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode27()
	{
		CString result;
		InvokeHelper(0xb400317, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400317, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode28()
	{
		CString result;
		InvokeHelper(0xb400319, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400319, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode29()
	{
		CString result;
		InvokeHelper(0xb40031b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40031b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseOutlineCode30()
	{
		CString result;
		InvokeHelper(0xb40031d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseOutlineCode30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40031d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText1()
	{
		CString result;
		InvokeHelper(0xb40031f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40031f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText2()
	{
		CString result;
		InvokeHelper(0xb400320, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400320, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText3()
	{
		CString result;
		InvokeHelper(0xb400321, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400321, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText4()
	{
		CString result;
		InvokeHelper(0xb400322, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400322, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText5()
	{
		CString result;
		InvokeHelper(0xb400323, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400323, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText6()
	{
		CString result;
		InvokeHelper(0xb400324, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400324, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText7()
	{
		CString result;
		InvokeHelper(0xb400325, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400325, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText8()
	{
		CString result;
		InvokeHelper(0xb400326, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400326, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText9()
	{
		CString result;
		InvokeHelper(0xb400327, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400327, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText10()
	{
		CString result;
		InvokeHelper(0xb400328, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400328, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText11()
	{
		CString result;
		InvokeHelper(0xb400329, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400329, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText12()
	{
		CString result;
		InvokeHelper(0xb40032a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText13()
	{
		CString result;
		InvokeHelper(0xb40032b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText14()
	{
		CString result;
		InvokeHelper(0xb40032c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText15()
	{
		CString result;
		InvokeHelper(0xb40032d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText16()
	{
		CString result;
		InvokeHelper(0xb40032e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText17()
	{
		CString result;
		InvokeHelper(0xb40032f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40032f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText18()
	{
		CString result;
		InvokeHelper(0xb400330, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400330, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText19()
	{
		CString result;
		InvokeHelper(0xb400331, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400331, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText20()
	{
		CString result;
		InvokeHelper(0xb400332, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400332, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText21()
	{
		CString result;
		InvokeHelper(0xb400333, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400333, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText22()
	{
		CString result;
		InvokeHelper(0xb400334, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400334, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText23()
	{
		CString result;
		InvokeHelper(0xb400335, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400335, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText24()
	{
		CString result;
		InvokeHelper(0xb400336, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400336, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText25()
	{
		CString result;
		InvokeHelper(0xb400337, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400337, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText26()
	{
		CString result;
		InvokeHelper(0xb400338, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400338, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText27()
	{
		CString result;
		InvokeHelper(0xb400339, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400339, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText28()
	{
		CString result;
		InvokeHelper(0xb40033a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText29()
	{
		CString result;
		InvokeHelper(0xb40033b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText30()
	{
		CString result;
		InvokeHelper(0xb40033c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText31()
	{
		CString result;
		InvokeHelper(0xb40033d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText31(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText32()
	{
		CString result;
		InvokeHelper(0xb40033e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText32(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText33()
	{
		CString result;
		InvokeHelper(0xb40033f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText33(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40033f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText34()
	{
		CString result;
		InvokeHelper(0xb400340, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText34(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400340, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText35()
	{
		CString result;
		InvokeHelper(0xb400341, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText35(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400341, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText36()
	{
		CString result;
		InvokeHelper(0xb400342, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText36(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400342, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText37()
	{
		CString result;
		InvokeHelper(0xb400343, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText37(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400343, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText38()
	{
		CString result;
		InvokeHelper(0xb400344, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText38(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400344, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText39()
	{
		CString result;
		InvokeHelper(0xb400345, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText39(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400345, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseText40()
	{
		CString result;
		InvokeHelper(0xb400346, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseText40(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400346, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline1DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb400347, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400347, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb400348, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400348, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb400349, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400349, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb40034f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40034f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10DurationEstimated()
	{
		VARIANT result;
		InvokeHelper(0xb400350, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10DurationEstimated(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_PhysicalPercentComplete()
	{
		VARIANT result;
		InvokeHelper(0xb40045f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_PhysicalPercentComplete(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40045f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_EarnedValueMethod()
	{
		long result;
		InvokeHelper(0xb400462, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_EarnedValueMethod(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb400462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_EnterpriseProjectCost1()
	{
		VARIANT result;
		InvokeHelper(0xb400351, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400351, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost2()
	{
		VARIANT result;
		InvokeHelper(0xb400352, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost3()
	{
		VARIANT result;
		InvokeHelper(0xb400353, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400353, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost4()
	{
		VARIANT result;
		InvokeHelper(0xb400354, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400354, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost5()
	{
		VARIANT result;
		InvokeHelper(0xb400355, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400355, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost6()
	{
		VARIANT result;
		InvokeHelper(0xb400356, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost7()
	{
		VARIANT result;
		InvokeHelper(0xb400357, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost8()
	{
		VARIANT result;
		InvokeHelper(0xb400358, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400358, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost9()
	{
		VARIANT result;
		InvokeHelper(0xb400359, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectCost10()
	{
		VARIANT result;
		InvokeHelper(0xb40035a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectCost10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate1()
	{
		VARIANT result;
		InvokeHelper(0xb40035b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate2()
	{
		VARIANT result;
		InvokeHelper(0xb40035c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate3()
	{
		VARIANT result;
		InvokeHelper(0xb40035d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate4()
	{
		VARIANT result;
		InvokeHelper(0xb40035e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate5()
	{
		VARIANT result;
		InvokeHelper(0xb40035f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40035f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate6()
	{
		VARIANT result;
		InvokeHelper(0xb400360, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400360, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate7()
	{
		VARIANT result;
		InvokeHelper(0xb400361, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400361, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate8()
	{
		VARIANT result;
		InvokeHelper(0xb400362, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400362, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate9()
	{
		VARIANT result;
		InvokeHelper(0xb400363, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400363, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate10()
	{
		VARIANT result;
		InvokeHelper(0xb400364, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400364, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate11()
	{
		VARIANT result;
		InvokeHelper(0xb400365, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400365, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate12()
	{
		VARIANT result;
		InvokeHelper(0xb400366, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400366, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate13()
	{
		VARIANT result;
		InvokeHelper(0xb400367, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400367, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate14()
	{
		VARIANT result;
		InvokeHelper(0xb400368, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400368, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate15()
	{
		VARIANT result;
		InvokeHelper(0xb400369, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400369, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate16()
	{
		VARIANT result;
		InvokeHelper(0xb40036a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate17()
	{
		VARIANT result;
		InvokeHelper(0xb40036b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate18()
	{
		VARIANT result;
		InvokeHelper(0xb40036c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate19()
	{
		VARIANT result;
		InvokeHelper(0xb40036d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate20()
	{
		VARIANT result;
		InvokeHelper(0xb40036e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate21()
	{
		VARIANT result;
		InvokeHelper(0xb40036f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate21(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40036f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate22()
	{
		VARIANT result;
		InvokeHelper(0xb400370, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate22(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400370, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate23()
	{
		VARIANT result;
		InvokeHelper(0xb400371, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate23(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400371, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate24()
	{
		VARIANT result;
		InvokeHelper(0xb400372, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate24(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400372, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate25()
	{
		VARIANT result;
		InvokeHelper(0xb400373, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate25(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400373, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate26()
	{
		VARIANT result;
		InvokeHelper(0xb400374, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate26(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400374, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate27()
	{
		VARIANT result;
		InvokeHelper(0xb400375, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate27(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400375, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate28()
	{
		VARIANT result;
		InvokeHelper(0xb400376, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate28(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400376, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate29()
	{
		VARIANT result;
		InvokeHelper(0xb400377, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate29(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400377, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDate30()
	{
		VARIANT result;
		InvokeHelper(0xb400378, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDate30(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400378, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration1()
	{
		VARIANT result;
		InvokeHelper(0xb400379, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400379, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration2()
	{
		VARIANT result;
		InvokeHelper(0xb40037a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration3()
	{
		VARIANT result;
		InvokeHelper(0xb40037b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration4()
	{
		VARIANT result;
		InvokeHelper(0xb40037c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration5()
	{
		VARIANT result;
		InvokeHelper(0xb40037d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration6()
	{
		VARIANT result;
		InvokeHelper(0xb40037e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration7()
	{
		VARIANT result;
		InvokeHelper(0xb40037f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40037f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration8()
	{
		VARIANT result;
		InvokeHelper(0xb400380, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400380, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration9()
	{
		VARIANT result;
		InvokeHelper(0xb400381, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400381, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectDuration10()
	{
		VARIANT result;
		InvokeHelper(0xb400382, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectDuration10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400382, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_EnterpriseProjectOutlineCode1()
	{
		CString result;
		InvokeHelper(0xb40038d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40038d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode2()
	{
		CString result;
		InvokeHelper(0xb40038e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40038e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode3()
	{
		CString result;
		InvokeHelper(0xb40038f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40038f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode4()
	{
		CString result;
		InvokeHelper(0xb400390, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400390, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode5()
	{
		CString result;
		InvokeHelper(0xb400391, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400391, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode6()
	{
		CString result;
		InvokeHelper(0xb400392, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400392, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode7()
	{
		CString result;
		InvokeHelper(0xb400393, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400393, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode8()
	{
		CString result;
		InvokeHelper(0xb400394, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400394, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode9()
	{
		CString result;
		InvokeHelper(0xb400395, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400395, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode10()
	{
		CString result;
		InvokeHelper(0xb400396, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400396, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode11()
	{
		CString result;
		InvokeHelper(0xb400397, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400397, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode12()
	{
		CString result;
		InvokeHelper(0xb400398, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400398, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode13()
	{
		CString result;
		InvokeHelper(0xb400399, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode14()
	{
		CString result;
		InvokeHelper(0xb40039a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode15()
	{
		CString result;
		InvokeHelper(0xb40039b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode16()
	{
		CString result;
		InvokeHelper(0xb40039c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode17()
	{
		CString result;
		InvokeHelper(0xb40039d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode18()
	{
		CString result;
		InvokeHelper(0xb40039e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode19()
	{
		CString result;
		InvokeHelper(0xb40039f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40039f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode20()
	{
		CString result;
		InvokeHelper(0xb4003a0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode21()
	{
		CString result;
		InvokeHelper(0xb4003a1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode22()
	{
		CString result;
		InvokeHelper(0xb4003a2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode23()
	{
		CString result;
		InvokeHelper(0xb4003a3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode24()
	{
		CString result;
		InvokeHelper(0xb4003a4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode25()
	{
		CString result;
		InvokeHelper(0xb4003a5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode26()
	{
		CString result;
		InvokeHelper(0xb4003a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode27()
	{
		CString result;
		InvokeHelper(0xb4003a7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode28()
	{
		CString result;
		InvokeHelper(0xb4003a8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode29()
	{
		CString result;
		InvokeHelper(0xb4003a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectOutlineCode30()
	{
		CString result;
		InvokeHelper(0xb4003aa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectOutlineCode30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4003aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_EnterpriseProjectFlag1()
	{
		VARIANT result;
		InvokeHelper(0xb4003c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag1(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag2()
	{
		VARIANT result;
		InvokeHelper(0xb4003ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag2(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag3()
	{
		VARIANT result;
		InvokeHelper(0xb4003cb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag3(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag4()
	{
		VARIANT result;
		InvokeHelper(0xb4003cc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag4(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag5()
	{
		VARIANT result;
		InvokeHelper(0xb4003cd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag5(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag6()
	{
		VARIANT result;
		InvokeHelper(0xb4003ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag6(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag7()
	{
		VARIANT result;
		InvokeHelper(0xb4003cf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag7(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag8()
	{
		VARIANT result;
		InvokeHelper(0xb4003d0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag8(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag9()
	{
		VARIANT result;
		InvokeHelper(0xb4003d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag9(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag10()
	{
		VARIANT result;
		InvokeHelper(0xb4003d2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag10(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag11()
	{
		VARIANT result;
		InvokeHelper(0xb4003d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag11(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag12()
	{
		VARIANT result;
		InvokeHelper(0xb4003d4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag12(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag13()
	{
		VARIANT result;
		InvokeHelper(0xb4003d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag13(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag14()
	{
		VARIANT result;
		InvokeHelper(0xb4003d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag14(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag15()
	{
		VARIANT result;
		InvokeHelper(0xb4003d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag15(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag16()
	{
		VARIANT result;
		InvokeHelper(0xb4003d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag16(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag17()
	{
		VARIANT result;
		InvokeHelper(0xb4003d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag17(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag18()
	{
		VARIANT result;
		InvokeHelper(0xb4003da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag18(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag19()
	{
		VARIANT result;
		InvokeHelper(0xb4003db, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag19(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_EnterpriseProjectFlag20()
	{
		VARIANT result;
		InvokeHelper(0xb4003dc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectFlag20(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4003dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	double get_EnterpriseProjectNumber1()
	{
		double result;
		InvokeHelper(0xb4003f1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber1(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber2()
	{
		double result;
		InvokeHelper(0xb4003f2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber2(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber3()
	{
		double result;
		InvokeHelper(0xb4003f3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber3(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber4()
	{
		double result;
		InvokeHelper(0xb4003f4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber4(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber5()
	{
		double result;
		InvokeHelper(0xb4003f5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber5(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber6()
	{
		double result;
		InvokeHelper(0xb4003f6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber6(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber7()
	{
		double result;
		InvokeHelper(0xb4003f7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber7(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber8()
	{
		double result;
		InvokeHelper(0xb4003f8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber8(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber9()
	{
		double result;
		InvokeHelper(0xb4003f9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber9(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber10()
	{
		double result;
		InvokeHelper(0xb4003fa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber10(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber11()
	{
		double result;
		InvokeHelper(0xb4003fb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber11(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber12()
	{
		double result;
		InvokeHelper(0xb4003fc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber12(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber13()
	{
		double result;
		InvokeHelper(0xb4003fd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber13(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber14()
	{
		double result;
		InvokeHelper(0xb4003fe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber14(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber15()
	{
		double result;
		InvokeHelper(0xb4003ff, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber15(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb4003ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber16()
	{
		double result;
		InvokeHelper(0xb400400, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber16(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400400, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber17()
	{
		double result;
		InvokeHelper(0xb400401, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber17(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber18()
	{
		double result;
		InvokeHelper(0xb400402, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber18(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber19()
	{
		double result;
		InvokeHelper(0xb400403, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber19(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400403, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber20()
	{
		double result;
		InvokeHelper(0xb400404, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber20(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400404, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber21()
	{
		double result;
		InvokeHelper(0xb400405, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber21(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400405, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber22()
	{
		double result;
		InvokeHelper(0xb400406, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber22(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400406, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber23()
	{
		double result;
		InvokeHelper(0xb400407, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber23(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber24()
	{
		double result;
		InvokeHelper(0xb400408, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber24(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400408, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber25()
	{
		double result;
		InvokeHelper(0xb400409, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber25(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400409, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber26()
	{
		double result;
		InvokeHelper(0xb40040a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber26(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber27()
	{
		double result;
		InvokeHelper(0xb40040b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber27(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber28()
	{
		double result;
		InvokeHelper(0xb40040c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber28(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber29()
	{
		double result;
		InvokeHelper(0xb40040d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber29(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber30()
	{
		double result;
		InvokeHelper(0xb40040e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber30(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber31()
	{
		double result;
		InvokeHelper(0xb40040f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber31(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb40040f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber32()
	{
		double result;
		InvokeHelper(0xb400410, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber32(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400410, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber33()
	{
		double result;
		InvokeHelper(0xb400411, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber33(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400411, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber34()
	{
		double result;
		InvokeHelper(0xb400412, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber34(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400412, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber35()
	{
		double result;
		InvokeHelper(0xb400413, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber35(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400413, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber36()
	{
		double result;
		InvokeHelper(0xb400414, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber36(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400414, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber37()
	{
		double result;
		InvokeHelper(0xb400415, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber37(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400415, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber38()
	{
		double result;
		InvokeHelper(0xb400416, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber38(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400416, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber39()
	{
		double result;
		InvokeHelper(0xb400417, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber39(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400417, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_EnterpriseProjectNumber40()
	{
		double result;
		InvokeHelper(0xb400418, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectNumber40(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb400418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText1()
	{
		CString result;
		InvokeHelper(0xb400419, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText1(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400419, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText2()
	{
		CString result;
		InvokeHelper(0xb40041a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText3()
	{
		CString result;
		InvokeHelper(0xb40041b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText3(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText4()
	{
		CString result;
		InvokeHelper(0xb40041c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText4(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText5()
	{
		CString result;
		InvokeHelper(0xb40041d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText5(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText6()
	{
		CString result;
		InvokeHelper(0xb40041e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText6(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText7()
	{
		CString result;
		InvokeHelper(0xb40041f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText7(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40041f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText8()
	{
		CString result;
		InvokeHelper(0xb400420, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText8(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400420, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText9()
	{
		CString result;
		InvokeHelper(0xb400421, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText9(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400421, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText10()
	{
		CString result;
		InvokeHelper(0xb400422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText10(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText11()
	{
		CString result;
		InvokeHelper(0xb400423, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText11(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400423, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText12()
	{
		CString result;
		InvokeHelper(0xb400424, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText12(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400424, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText13()
	{
		CString result;
		InvokeHelper(0xb400425, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText13(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400425, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText14()
	{
		CString result;
		InvokeHelper(0xb400426, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText14(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400426, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText15()
	{
		CString result;
		InvokeHelper(0xb400427, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText15(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText16()
	{
		CString result;
		InvokeHelper(0xb400428, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText16(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400428, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText17()
	{
		CString result;
		InvokeHelper(0xb400429, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText17(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400429, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText18()
	{
		CString result;
		InvokeHelper(0xb40042a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText18(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText19()
	{
		CString result;
		InvokeHelper(0xb40042b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText19(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText20()
	{
		CString result;
		InvokeHelper(0xb40042c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText20(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText21()
	{
		CString result;
		InvokeHelper(0xb40042d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText21(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText22()
	{
		CString result;
		InvokeHelper(0xb40042e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText22(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText23()
	{
		CString result;
		InvokeHelper(0xb40042f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText23(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40042f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText24()
	{
		CString result;
		InvokeHelper(0xb400430, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText24(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400430, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText25()
	{
		CString result;
		InvokeHelper(0xb400431, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText25(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400431, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText26()
	{
		CString result;
		InvokeHelper(0xb400432, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText26(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400432, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText27()
	{
		CString result;
		InvokeHelper(0xb400433, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText27(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400433, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText28()
	{
		CString result;
		InvokeHelper(0xb400434, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText28(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400434, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText29()
	{
		CString result;
		InvokeHelper(0xb400435, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText29(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400435, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText30()
	{
		CString result;
		InvokeHelper(0xb400436, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText30(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400436, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText31()
	{
		CString result;
		InvokeHelper(0xb400437, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText31(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400437, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText32()
	{
		CString result;
		InvokeHelper(0xb400438, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText32(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400438, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText33()
	{
		CString result;
		InvokeHelper(0xb400439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText33(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText34()
	{
		CString result;
		InvokeHelper(0xb40043a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText34(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText35()
	{
		CString result;
		InvokeHelper(0xb40043b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText35(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText36()
	{
		CString result;
		InvokeHelper(0xb40043c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText36(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText37()
	{
		CString result;
		InvokeHelper(0xb40043d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText37(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText38()
	{
		CString result;
		InvokeHelper(0xb40043e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText38(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText39()
	{
		CString result;
		InvokeHelper(0xb40043f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText39(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40043f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_EnterpriseProjectText40()
	{
		CString result;
		InvokeHelper(0xb400440, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_EnterpriseProjectText40(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb400440, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_ActualWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xb400473, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400473, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_ActualOvertimeWorkProtected()
	{
		VARIANT result;
		InvokeHelper(0xb400474, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_ActualOvertimeWorkProtected(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400474, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineFixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb4001e0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineFixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb4001e9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb4001f4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb4001ff, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4001ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb40020a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40020a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400215, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400215, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400227, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400227, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400232, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400232, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb40023d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40023d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400248, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400248, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10FixedCost()
	{
		VARIANT result;
		InvokeHelper(0xb400253, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10FixedCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400253, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Guid()
	{
		CString result;
		InvokeHelper(0xb400477, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_CalendarGuid()
	{
		CString result;
		InvokeHelper(0xb400478, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_DeliverableGuid()
	{
		CString result;
		InvokeHelper(0xb40047a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DeliverableGuid(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40047a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	short get_DeliverableType()
	{
		short result;
		InvokeHelper(0xb40047b, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	void put_DeliverableType(short newValue)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb40047b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb400480, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400480, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb400481, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400481, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_IsPublished()
	{
		VARIANT result;
		InvokeHelper(0xb40048d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_IsPublished(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40048d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_StatusManagerName()
	{
		CString result;
		InvokeHelper(0xb40048e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_StatusManagerName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb40048e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ErrorMessage()
	{
		CString result;
		InvokeHelper(0xb40048f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	VARIANT get_BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb400493, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400493, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb400494, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400494, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_BaselineFixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb400495, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_BaselineFixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb400495, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_BaselineDeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb400496, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineDeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400496, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineDeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb400497, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineDeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400497, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb400498, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400498, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_BaselineBudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb400499, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_BaselineBudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb400499, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline1FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb40049c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb40049c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline1DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb40049d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40049d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb40049e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40049e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb40049f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb40049f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline1BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004a0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline1BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline2FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004a3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline2DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004a4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004a5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004a5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004a6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline2BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004a7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline2BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline3FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline3DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline3BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline3BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline4FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004b1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline4DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004b2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004b3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004b3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004b4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline4BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004b5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline4BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline5FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004b8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline5DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004bb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline5BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004bc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline5BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline6FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004bf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline6DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004c0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004c1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004c2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline6BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004c3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline6BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline7FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline7DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004c7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004c9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline7BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004ca, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline7BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline8FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004cd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline8DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004cf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004d0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline8BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline8BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline9FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline9DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline9BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline9BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Baseline10FixedCostAccrual()
	{
		long result;
		InvokeHelper(0xb4004db, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10FixedCostAccrual(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4004db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Baseline10DeliverableStart()
	{
		VARIANT result;
		InvokeHelper(0xb4004dc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10DeliverableStart(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10DeliverableFinish()
	{
		VARIANT result;
		InvokeHelper(0xb4004dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10DeliverableFinish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetWork()
	{
		VARIANT result;
		InvokeHelper(0xb4004de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetWork(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Baseline10BudgetCost()
	{
		VARIANT result;
		InvokeHelper(0xb4004df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Baseline10BudgetCost(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0xb4004df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_RecalcFlags()
	{
		long result;
		InvokeHelper(0xb4004e2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_StartDriver()
	{
		LPDISPATCH result;
		InvokeHelper(0xb4004e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_DeliverableName()
	{
		CString result;
		InvokeHelper(0xb4004fc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DeliverableName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb4004fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// Task properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTaskDependencies wrapper class

class CTaskDependencies : public COleDispatchDriver
{
public:
	CTaskDependencies(){} // Calls COleDispatchDriver default constructor
	CTaskDependencies(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTaskDependencies(const CTaskDependencies& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TaskDependencies methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPDISPATCH From, long Type, VARIANT& Lag)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_DISPATCH VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, From, Type, &Lag);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// TaskDependencies properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTaskDependency wrapper class

class CTaskDependency : public COleDispatchDriver
{
public:
	CTaskDependency(){} // Calls COleDispatchDriver default constructor
	CTaskDependency(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTaskDependency(const CTaskDependency& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TaskDependency methods
public:
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_From()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_To()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Type(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_Lag()
	{
		VARIANT result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Lag(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	CString get_Path()
	{
		CString result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Path(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_LagType()
	{
		long result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// TaskDependency properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTaskGroups wrapper class

class CTaskGroups : public COleDispatchDriver
{
public:
	CTaskGroups(){} // Calls COleDispatchDriver default constructor
	CTaskGroups(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTaskGroups(const CTaskGroups& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TaskGroups methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, LPCTSTR FieldName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, FieldName);
		return result;
	}
	LPDISPATCH Copy(LPCTSTR Name, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// TaskGroups properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTasks wrapper class

class CTasks : public COleDispatchDriver
{
public:
	CTasks(){} // Calls COleDispatchDriver default constructor
	CTasks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTasks(const CTasks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Tasks methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_UniqueID(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfff1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	LPDISPATCH Add(VARIANT& Name, VARIANT& Before)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Name, &Before);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// Tasks properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTimeScaleValue wrapper class

class CTimeScaleValue : public COleDispatchDriver
{
public:
	CTimeScaleValue(){} // Calls COleDispatchDriver default constructor
	CTimeScaleValue(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTimeScaleValue(const CTimeScaleValue& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TimeScaleValue methods
public:
	VARIANT get_StartDate()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_EndDate()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Value()
	{
		VARIANT result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Value(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void Clear()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Delete()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// TimeScaleValue properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CTimeScaleValues wrapper class

class CTimeScaleValues : public COleDispatchDriver
{
public:
	CTimeScaleValues(){} // Calls COleDispatchDriver default constructor
	CTimeScaleValues(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CTimeScaleValues(const CTimeScaleValues& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// TimeScaleValues methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(VARIANT& Value, VARIANT& Position)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Value, &Position);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// TimeScaleValues properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CView0 wrapper class

class CView0 : public COleDispatchDriver
{
public:
	CView0(){} // Calls COleDispatchDriver default constructor
	CView0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CView0(const CView0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// View methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_ShowInMenu()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowInMenu(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Apply()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_Single()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_Screen()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}

	// View properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CViewCombination wrapper class

class CViewCombination : public COleDispatchDriver
{
public:
	CViewCombination(){} // Calls COleDispatchDriver default constructor
	CViewCombination(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CViewCombination(const CViewCombination& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ViewCombination methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_ShowInMenu()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowInMenu(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Apply()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_Single()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_Screen()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TopView()
	{
		LPDISPATCH result;
		InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_TopView(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_BottomView()
	{
		LPDISPATCH result;
		InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_BottomView(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}

	// ViewCombination properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CViews0 wrapper class

class CViews0 : public COleDispatchDriver
{
public:
	CViews0(){} // Calls COleDispatchDriver default constructor
	CViews0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CViews0(const CViews0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Views methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Copy(VARIANT& Source, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Views properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CViewsCombination wrapper class

class CViewsCombination : public COleDispatchDriver
{
public:
	CViewsCombination(){} // Calls COleDispatchDriver default constructor
	CViewsCombination(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CViewsCombination(const CViewsCombination& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ViewsCombination methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Copy(VARIANT& Source, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, VARIANT& TopView, VARIANT& BottomView, BOOL ShowInMenu)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_BOOL ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, &TopView, &BottomView, ShowInMenu);
		return result;
	}

	// ViewsCombination properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CViewSingle wrapper class

class CViewSingle : public COleDispatchDriver
{
public:
	CViewSingle(){} // Calls COleDispatchDriver default constructor
	CViewSingle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CViewSingle(const CViewSingle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ViewSingle methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long get_Type()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_ShowInMenu()
	{
		BOOL result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowInMenu(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void Apply()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL get_Single()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_Screen()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Table()
	{
		LPDISPATCH result;
		InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_Table(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_Filter()
	{
		LPDISPATCH result;
		InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_Filter(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_Group()
	{
		LPDISPATCH result;
		InvokeHelper(0x3ec, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_Group(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	BOOL get_HighlightFilter()
	{
		BOOL result;
		InvokeHelper(0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_HighlightFilter(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

	// ViewSingle properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CViewsSingle wrapper class

class CViewsSingle : public COleDispatchDriver
{
public:
	CViewsSingle(){} // Calls COleDispatchDriver default constructor
	CViewsSingle(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CViewsSingle(const CViewsSingle& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// ViewsSingle methods
public:
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Copy(VARIANT& Source, LPCTSTR NewName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Source, NewName);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH Add(LPCTSTR Name, long Screen, BOOL ShowInMenu, VARIANT& Table, VARIANT& Filter, VARIANT& Group, BOOL HighlightFilt)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BOOL VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_BOOL ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Screen, ShowInMenu, &Table, &Filter, &Group, HighlightFilt);
		return result;
	}

	// ViewsSingle properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWeekDay wrapper class

class CWeekDay : public COleDispatchDriver
{
public:
	CWeekDay(){} // Calls COleDispatchDriver default constructor
	CWeekDay(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWeekDay(const CWeekDay& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WeekDay methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// WeekDay properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWeekDays wrapper class

class CWeekDays : public COleDispatchDriver
{
public:
	CWeekDays(){} // Calls COleDispatchDriver default constructor
	CWeekDays(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWeekDays(const CWeekDays& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WeekDays methods
public:
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// WeekDays properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWindow0 wrapper class

class CWindow0 : public COleDispatchDriver
{
public:
	CWindow0(){} // Calls COleDispatchDriver default constructor
	CWindow0(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWindow0(const CWindow0& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Window methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Index()
	{
		VARIANT result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ActivePane()
	{
		LPDISPATCH result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TopPane()
	{
		LPDISPATCH result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_BottomPane()
	{
		LPDISPATCH result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Close()
	{
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Activate()
	{
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH WebBrowserControlWindow()
	{
		LPDISPATCH result;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH WebBrowserControlFrame(VARIANT& FrameName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &FrameName);
		return result;
	}
	void Refresh()
	{
		InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

	// Window properties
public:
	CString GetCaption()
	{
		CString result;
		GetProperty(0x0, VT_BSTR, (void*)&result);
		return result;
	}
	void SetCaption(CString propVal)
	{
		SetProperty(0x0, VT_BSTR, propVal);
	}
	BOOL GetVisible()
	{
		BOOL result;
		GetProperty(0x3, VT_BOOL, (void*)&result);
		return result;
	}
	void SetVisible(BOOL propVal)
	{
		SetProperty(0x3, VT_BOOL, propVal);
	}
	long GetWindowState()
	{
		long result;
		GetProperty(0x2, VT_I4, (void*)&result);
		return result;
	}
	void SetWindowState(long propVal)
	{
		SetProperty(0x2, VT_I4, propVal);
	}
	long GetLeft()
	{
		long result;
		GetProperty(0x4, VT_I4, (void*)&result);
		return result;
	}
	void SetLeft(long propVal)
	{
		SetProperty(0x4, VT_I4, propVal);
	}
	long GetTop()
	{
		long result;
		GetProperty(0x5, VT_I4, (void*)&result);
		return result;
	}
	void SetTop(long propVal)
	{
		SetProperty(0x5, VT_I4, propVal);
	}
	long GetWidth()
	{
		long result;
		GetProperty(0x6, VT_I4, (void*)&result);
		return result;
	}
	void SetWidth(long propVal)
	{
		SetProperty(0x6, VT_I4, propVal);
	}
	long GetHeight()
	{
		long result;
		GetProperty(0x7, VT_I4, (void*)&result);
		return result;
	}
	void SetHeight(long propVal)
	{
		SetProperty(0x7, VT_I4, propVal);
	}

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWindows wrapper class

class CWindows : public COleDispatchDriver
{
public:
	CWindows(){} // Calls COleDispatchDriver default constructor
	CWindows(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWindows(const CWindows& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Windows methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ActiveWindow()
	{
		LPDISPATCH result;
		InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// Windows properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWindows2 wrapper class

class CWindows2 : public COleDispatchDriver
{
public:
	CWindows2(){} // Calls COleDispatchDriver default constructor
	CWindows2(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWindows2(const CWindows2& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Windows2 methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_ActiveWindow()
	{
		LPDISPATCH result;
		InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}

	// Windows2 properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWorkWeek wrapper class

class CWorkWeek : public COleDispatchDriver
{
public:
	CWorkWeek(){} // Calls COleDispatchDriver default constructor
	CWorkWeek(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWorkWeek(const CWorkWeek& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WorkWeek methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Name(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Index()
	{
		long result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT get_Start()
	{
		VARIANT result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Start(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	VARIANT get_Finish()
	{
		VARIANT result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_Finish(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	LPDISPATCH get_WeekDays()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void Delete()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

	// WorkWeek properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWorkWeekDay wrapper class

class CWorkWeekDay : public COleDispatchDriver
{
public:
	CWorkWeekDay(){} // Calls COleDispatchDriver default constructor
	CWorkWeekDay(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWorkWeekDay(const CWorkWeekDay& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WorkWeekDay methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// WorkWeekDay properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWorkWeekDays wrapper class

class CWorkWeekDays : public COleDispatchDriver
{
public:
	CWorkWeekDays(){} // Calls COleDispatchDriver default constructor
	CWorkWeekDays(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWorkWeekDays(const CWorkWeekDays& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WorkWeekDays methods
public:
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// WorkWeekDays properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CWorkWeeks wrapper class

class CWorkWeeks : public COleDispatchDriver
{
public:
	CWorkWeeks(){} // Calls COleDispatchDriver default constructor
	CWorkWeeks(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWorkWeeks(const CWorkWeeks& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// WorkWeeks methods
public:
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	long get_Count()
	{
		long result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}
	LPDISPATCH Add(VARIANT& Start, VARIANT& Finish, VARIANT& Name)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0xfff6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, &Start, &Finish, &Name);
		return result;
	}

	// WorkWeeks properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CYear wrapper class

class CYear : public COleDispatchDriver
{
public:
	CYear(){} // Calls COleDispatchDriver default constructor
	CYear(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CYear(const CYear& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Year methods
public:
	LPDISPATCH get_Calendar()
	{
		LPDISPATCH result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift1()
	{
		LPDISPATCH result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift2()
	{
		LPDISPATCH result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift3()
	{
		LPDISPATCH result;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL get_Working()
	{
		BOOL result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Working(VARIANT& newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void Default()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	short get_Index()
	{
		short result;
		InvokeHelper(0xfff7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString get_Name()
	{
		CString result;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Months()
	{
		LPDISPATCH result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift4()
	{
		LPDISPATCH result;
		InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Shift5()
	{
		LPDISPATCH result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}

	// Year properties
public:

};
// Machine generated IDispatch wrapper class(es) created with Add Class from Typelib Wizard

#import "C:\\Program Files\\Microsoft Office\\Office12\\MSPRJ.OLB" no_namespace
// CYears wrapper class

class CYears : public COleDispatchDriver
{
public:
	CYears(){} // Calls COleDispatchDriver default constructor
	CYears(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CYears(const CYears& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// Attributes
public:

	// Operations
public:


	// Years methods
public:
	short get_Count()
	{
		short result;
		InvokeHelper(0xfff5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Application()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Parent()
	{
		LPDISPATCH result;
		InvokeHelper(0xfff3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get__NewEnum()
	{
		LPUNKNOWN result;
		InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Item(VARIANT& Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, &Index);
		return result;
	}

	// Years properties
public:

};
