// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// ktSoftwareLic.cpp
// Header definition of ktSoftwareLic
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2010  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "ktSoftwareLic.h"
#include "CATApplicationFrame.h"
#include "CATDlgWindow.h"
#include "CATDlgNotify.h"
#include "CATUnicodeString.h"
#include "CATListofCATUnicodeString.h"

#include "CATAfrCommandHeaderServices.h"
#include "CATCommandHeader.h"

// c++ header
#include "atlstr.h"
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include "stdio.h"
#include "iostream"
using namespace std;


// 字符串转换
CATUnicodeString CStringToUS(CString iCString);

// 授权认证功能
HRESULT ktGetSoftwareLic(CATListOfCATUnicodeString &listustrLic);
HRESULT ktGetMacInfo(CATListValCATUnicodeString &alistMac);
HRESULT ktGetCurrentTime(CATUnicodeString &strUserTime);


//------------------------------------------------------------------------------
//convert CString to CATUnicodeString
//------------------------------------------------------------------------------
CATUnicodeString CStringToUS(CString iCString)
{
	if ("" == iCString) return FALSE;
	CATUnicodeString StrBSTR ;
	BSTR bstrText = iCString.AllocSysString();
	StrBSTR.BuildFromBSTR(bstrText);
	SysFreeString(bstrText); // 用完释放

	return StrBSTR;
}


 
//  [3/19/2010 ev5adm]
//
void ShowDlgNotify(CATUnicodeString strTitle, CATUnicodeString strValue)
{
	CATApplicationFrame *pApplication = CATApplicationFrame::GetFrame(); 
	if (NULL != pApplication) 
	{ 
		CATDlgWindow * pMainWindow = pApplication->GetMainWindow();
		CATDlgNotify *pNotifyDlg = new CATDlgNotify (pMainWindow, "MBD Notify", CATDlgNfyInformation|CATDlgNfyOK);
		pNotifyDlg->SetVisibility(CATDlgShow);
		pNotifyDlg->SetOKTitle("OK");

		if (NULL != pNotifyDlg) 
		{
			pNotifyDlg->DisplayBlocked(strValue,strTitle);
			pNotifyDlg->RequestDelayedDestruction(); 
		}
	}
}

// 授权认证功能
HRESULT ktGetSoftwareLic(CATListOfCATUnicodeString &listustrLic)
{
	HRESULT hr = S_OK;

	//调用DLL
	//////////////////////////////////////////////////////////////////////////
	HINSTANCE hDll= NULL;//DLL句柄 	
	typedef HRESULT (*lpFun)(std::string*&,int&); 
	hDll = LoadLibrary(_T("KTLicSetting.dll"));
	if(NULL == hDll)
	{
		LPVOID lpMsgBuf;
		FormatMessage( 
			FORMAT_MESSAGE_ALLOCATE_BUFFER | 
			FORMAT_MESSAGE_FROM_SYSTEM | 
			FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			GetLastError(),
			MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
			(LPTSTR) &lpMsgBuf,
			0,
			NULL 
			);
		//MessageBox("提示信息" );
		LocalFree( lpMsgBuf );

		return E_FAIL;
	}


	if (NULL!=hDll)
	{
		lpFun pMBDQuery = (lpFun)GetProcAddress(hDll,"KTVerifyLic");
		if (NULL==pMBDQuery)
		{
			//AfxMessageBox(_T("DLL中函数寻找失败"));
			ShowDlgNotify("错误提示信息","KTLicSetting.dll中函数寻找失败");
			hr = E_FAIL;
			return hr;
		}

		//可能需要对输入条件进行判断，以求确定内容的可靠性
		//std::string *decryptedText = new std::string("");
		std::string* decryptedText;
		int iSubStrs;


		hr = pMBDQuery(decryptedText,iSubStrs);

		if (SUCCEEDED(hr))
		{
			for (int i = 0; i < iSubStrs; i ++)
			{
				CATUnicodeString ustrLic = (decryptedText[i]).c_str();
				listustrLic.Append(ustrLic);
			}
		}
		else
		{
			CATUnicodeString ustrLic = (decryptedText[0]).c_str();
			listustrLic.Append(ustrLic);

			ShowDlgNotify("提示信息","您的软件授权错误！\n\n如果没有授权文件，请联系您的软件供应商购买正版授权！");
		}

		::FreeLibrary(hDll);
	}


	return hr;
}

HRESULT ktGetMacInfo(CATListValCATUnicodeString &alistMac)
{

	HRESULT hr = S_OK;

	//调用DLL
	//////////////////////////////////////////////////////////////////////////
	HINSTANCE hDll= NULL;//DLL句柄 	
	typedef HRESULT (*lpFun)(CString *&, int &); 
	hDll = LoadLibrary(_T("KTLicSetting.dll"));
	if(NULL == hDll)
	{
		LPVOID lpMsgBuf;
		FormatMessage( 
			FORMAT_MESSAGE_ALLOCATE_BUFFER | 
			FORMAT_MESSAGE_FROM_SYSTEM | 
			FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			GetLastError(),
			MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
			(LPTSTR) &lpMsgBuf,
			0,
			NULL 
			);
		//MessageBox("提示信息" );
		LocalFree( lpMsgBuf );

		return E_FAIL;
	}


	if (NULL!=hDll)
	{
		lpFun pMBDQuery = (lpFun)GetProcAddress(hDll,"KTGetMacInfo");
		if (NULL==pMBDQuery)
		{
			ShowDlgNotify("错误提示信息","KTLicSetting.dll中函数寻找失败");
			hr = E_FAIL;
			return hr;
		}

		//可能需要对输入条件进行判断，以求确定内容的可靠性
		CString *iocstrInfo;
		int ioMacCount;

		hr = pMBDQuery(iocstrInfo,ioMacCount);

		if (SUCCEEDED(hr))
		{
			int strCount = ioMacCount / 4;

			for (int i = 0; i < strCount; i++)
			{
				CATUnicodeString ustrTemp = CStringToUS(iocstrInfo[i*4]);
				alistMac.Append(ustrTemp);
			}

		}
		else{

			alistMac = NULL;

		}

		::FreeLibrary(hDll);
	}


	return hr;	
}

HRESULT ktGetCurrentTime(CATUnicodeString &strUserTime)
{
	HRESULT hr = S_OK;
	//调用DLL
	//////////////////////////////////////////////////////////////////////////
	HINSTANCE hDll= NULL;//DLL句柄 	
	typedef HRESULT (*lpFun)(CString &); 
	hDll = LoadLibrary(_T("KTLicSetting.dll"));
	if(NULL == hDll)
	{
		LPVOID lpMsgBuf;
		FormatMessage( 
			FORMAT_MESSAGE_ALLOCATE_BUFFER | 
			FORMAT_MESSAGE_FROM_SYSTEM | 
			FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			GetLastError(),
			MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
			(LPTSTR) &lpMsgBuf,
			0,
			NULL 
			);
		//MessageBox("提示信息" );
		LocalFree( lpMsgBuf );

		return E_FAIL;
	}


	if (NULL!=hDll)
	{
		lpFun pMBDQuery = (lpFun)GetProcAddress(hDll,"KTGetCurrentTime");
		if (NULL==pMBDQuery)
		{
			//AfxMessageBox(_T("DLL中函数寻找失败"));
			ShowDlgNotify("错误提示信息","KTLicSetting.dll中函数寻找失败");
			hr = E_FAIL;
			return hr;
		}

		//变量
		CString iostrTime;

		hr = pMBDQuery(iostrTime);

		if (SUCCEEDED(hr))
		{
			strUserTime = CStringToUS(iostrTime);
		}
		else{

			strUserTime = "";
		}

		::FreeLibrary(hDll);
	}


	return hr;
}

HRESULT ktVerifyUserLic(CATUnicodeString &ustrKTPRDNAME)
{

	HRESULT hr;
	hr = S_OK;

	CATListOfCATUnicodeString listustrLic;
	CATUnicodeString strUserTime;
	CATListValCATUnicodeString alistMac;

	CATUnicodeString strMac,strStartTime,strEndTime,strPRDNAME;

	hr = ktGetSoftwareLic(listustrLic);

	//校核是否存在lic信息
	if (FAILED(hr))
	{
		ShowDlgNotify("授权信息提示","未能获取正确的授权信息，请联系您的软件供应商申请授权，点击确定关闭提示框！");
		hr = E_FAIL;
		return hr;
	}

	//如果没有该产品授权 此处值为FALSE
	CATBoolean KTPRDFlag = FALSE;

	//校验获取的授权信息
	for (int i = 1; i <= listustrLic.Size(); i ++)
	{
		//一个个处理
		CATUnicodeString ustrLic = listustrLic[i];

		//如果该授权信息用密码解析出错，直接跳过
		if (ustrLic == "LICENSE PARSE EXCEPTION")
		{
			continue;
		}

		//拆分lic信息
		strMac = ustrLic.SubString(0,12);
		strStartTime = ustrLic.SubString(12,8);
		strEndTime = ustrLic.SubString(20,8);

		int liclength = ustrLic.GetLengthInChar();

		//获取KT产品标识号
		if (liclength > 28)
		{
			strPRDNAME = ustrLic.SubString(28,liclength-28);
		}

		//1 首先找到该产品的lic信息项
		//验证KT产品号是否相符
		if (strPRDNAME != ustrKTPRDNAME)
		{
			continue;
		}
		//如果相符
		else
		{
			//获取用户所有的mac值
			hr = ktGetMacInfo(alistMac);
			CATBoolean Macflag = FALSE;

			for (int i = 1; i <= alistMac.Size(); i++)
			{
				if (alistMac[i] == strMac)
				{
					Macflag = TRUE;
				}
			}

			//检验mac
			if (Macflag == TRUE)
			{
				// 获取用户时间
				hr = ktGetCurrentTime(strUserTime);
				// 校验起始时间	
				long starttime,endtime,usertime;
				strStartTime.ConvertToNum(&starttime);
				strEndTime.ConvertToNum(&endtime);
				strUserTime.ConvertToNum(&usertime);

				// 验证lic时间是否吻合
				if (usertime >= starttime && usertime <= endtime)
				{
					KTPRDFlag = TRUE;
					hr = S_OK;

					// 即将过期提示
					if ((endtime - usertime) <= 5)
					{
						CATUnicodeString strlastTime;
						strlastTime.BuildFromNum(endtime - usertime + 1);
						ShowDlgNotify("授权信息提示",ustrKTPRDNAME+"产品的授权文件"+ strlastTime +"天后过期，请联系您的软件供应商申请新授权，点击确定关闭提示框！");
					}

					return hr;						
				}
				else
				{
					// 用户授权时间存在不正确情况
					ShowDlgNotify("授权信息提示",ustrKTPRDNAME+"产品的授权文件已经过期，请联系您的软件供应商申请新授权，点击确定关闭提示框！");
					hr = E_FAIL;
					return hr;
				}

			} 
			else
			{
				// 用户地址信息存在不正确情况
				ShowDlgNotify("授权信息提示",ustrKTPRDNAME+"产品的授权文件与您电脑信息不符，请联系您的软件供应商申请授权，点击确定关闭提示框！");
				hr = E_FAIL;
				return hr;
			}
		}
	}

	if (KTPRDFlag == FALSE)
	{
		hr = E_FAIL;
	}
		
	return hr;
}

HRESULT CheckLicHeaderStatus(CATUnicodeString ustrKTPRDName,CATListOfCATString listCmdHeader)
{

	// 设置
	HRESULT hr = ktVerifyUserLic(ustrKTPRDName);
	if (SUCCEEDED (hr))
	{
		CATCommandHeader*  poCommandHeader;

		for (int i = 1; i <= listCmdHeader.Size(); i ++)
		{
			::CATAfrGetCommandHeader(listCmdHeader[i],poCommandHeader);
			poCommandHeader->BecomeAvailable();
		}
	}
	else{

		CATCommandHeader*  poCommandHeader;

		for (int i = 1; i <= listCmdHeader.Size(); i ++)
		{
			::CATAfrGetCommandHeader(listCmdHeader[i],poCommandHeader);
			poCommandHeader->BecomeUnavailable();
		}
	}


	return hr;

}