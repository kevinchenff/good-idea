/* soapC.cpp
   Generated by gSOAP 2.8.3 from MBDWebService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.3 2011-08-25 02:50:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_kt1__ArrayOfString:
		return soap_in_kt1__ArrayOfString(soap, NULL, NULL, "kt1:ArrayOfString");
	case SOAP_TYPE_PointerTo_kt1__getInforByIpResponse:
		return soap_in_PointerTo_kt1__getInforByIpResponse(soap, NULL, NULL, "kt1:getInforByIpResponse");
	case SOAP_TYPE_PointerTo_kt1__getInforByIp:
		return soap_in_PointerTo_kt1__getInforByIp(soap, NULL, NULL, "kt1:getInforByIp");
	case SOAP_TYPE_PointerTo_kt1__QueryResponse:
		return soap_in_PointerTo_kt1__QueryResponse(soap, NULL, NULL, "kt1:QueryResponse");
	case SOAP_TYPE_PointerTo_kt1__Query:
		return soap_in_PointerTo_kt1__Query(soap, NULL, NULL, "kt1:Query");
	case SOAP_TYPE_PointerTo_kt1__InsertResponse:
		return soap_in_PointerTo_kt1__InsertResponse(soap, NULL, NULL, "kt1:InsertResponse");
	case SOAP_TYPE_PointerTo_kt1__Insert:
		return soap_in_PointerTo_kt1__Insert(soap, NULL, NULL, "kt1:Insert");
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTokt1__ArrayOfString:
		return soap_in_PointerTokt1__ArrayOfString(soap, NULL, NULL, "kt1:ArrayOfString");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:ArrayOfString"))
		{	*type = SOAP_TYPE_kt1__ArrayOfString;
			return soap_in_kt1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "kt1:getInforByIpResponse"))
		{	*type = SOAP_TYPE__kt1__getInforByIpResponse;
			return soap_in__kt1__getInforByIpResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:getInforByIp"))
		{	*type = SOAP_TYPE__kt1__getInforByIp;
			return soap_in__kt1__getInforByIp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:QueryResponse"))
		{	*type = SOAP_TYPE__kt1__QueryResponse;
			return soap_in__kt1__QueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:Query"))
		{	*type = SOAP_TYPE__kt1__Query;
			return soap_in__kt1__Query(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:InsertResponse"))
		{	*type = SOAP_TYPE__kt1__InsertResponse;
			return soap_in__kt1__InsertResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "kt1:Insert"))
		{	*type = SOAP_TYPE__kt1__Insert;
			return soap_in__kt1__Insert(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__kt1__getInforByIpResponse:
		return ((_kt1__getInforByIpResponse *)ptr)->soap_out(soap, "kt1:getInforByIpResponse", id, NULL);
	case SOAP_TYPE__kt1__getInforByIp:
		return ((_kt1__getInforByIp *)ptr)->soap_out(soap, "kt1:getInforByIp", id, NULL);
	case SOAP_TYPE__kt1__QueryResponse:
		return ((_kt1__QueryResponse *)ptr)->soap_out(soap, "kt1:QueryResponse", id, NULL);
	case SOAP_TYPE__kt1__Query:
		return ((_kt1__Query *)ptr)->soap_out(soap, "kt1:Query", id, NULL);
	case SOAP_TYPE__kt1__InsertResponse:
		return ((_kt1__InsertResponse *)ptr)->soap_out(soap, "kt1:InsertResponse", id, NULL);
	case SOAP_TYPE__kt1__Insert:
		return ((_kt1__Insert *)ptr)->soap_out(soap, "kt1:Insert", id, NULL);
	case SOAP_TYPE_kt1__ArrayOfString:
		return ((kt1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "kt1:ArrayOfString");
	case SOAP_TYPE_PointerTo_kt1__getInforByIpResponse:
		return soap_out_PointerTo_kt1__getInforByIpResponse(soap, tag, id, (_kt1__getInforByIpResponse *const*)ptr, "kt1:getInforByIpResponse");
	case SOAP_TYPE_PointerTo_kt1__getInforByIp:
		return soap_out_PointerTo_kt1__getInforByIp(soap, tag, id, (_kt1__getInforByIp *const*)ptr, "kt1:getInforByIp");
	case SOAP_TYPE_PointerTo_kt1__QueryResponse:
		return soap_out_PointerTo_kt1__QueryResponse(soap, tag, id, (_kt1__QueryResponse *const*)ptr, "kt1:QueryResponse");
	case SOAP_TYPE_PointerTo_kt1__Query:
		return soap_out_PointerTo_kt1__Query(soap, tag, id, (_kt1__Query *const*)ptr, "kt1:Query");
	case SOAP_TYPE_PointerTo_kt1__InsertResponse:
		return soap_out_PointerTo_kt1__InsertResponse(soap, tag, id, (_kt1__InsertResponse *const*)ptr, "kt1:InsertResponse");
	case SOAP_TYPE_PointerTo_kt1__Insert:
		return soap_out_PointerTo_kt1__Insert(soap, tag, id, (_kt1__Insert *const*)ptr, "kt1:Insert");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t*const*)&ptr, "xsd:string");
	case SOAP_TYPE_PointerTokt1__ArrayOfString:
		return soap_out_PointerTokt1__ArrayOfString(soap, tag, id, (kt1__ArrayOfString *const*)ptr, "kt1:ArrayOfString");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__kt1__getInforByIpResponse:
		((_kt1__getInforByIpResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__kt1__getInforByIp:
		((_kt1__getInforByIp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__kt1__QueryResponse:
		((_kt1__QueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__kt1__Query:
		((_kt1__Query *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__kt1__InsertResponse:
		((_kt1__InsertResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__kt1__Insert:
		((_kt1__Insert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_kt1__ArrayOfString:
		((kt1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___kt1__getInforByIp:
		soap_serialize___kt1__getInforByIp(soap, (const struct __kt1__getInforByIp *)ptr);
		break;
	case SOAP_TYPE___kt1__Query:
		soap_serialize___kt1__Query(soap, (const struct __kt1__Query *)ptr);
		break;
	case SOAP_TYPE___kt1__Insert:
		soap_serialize___kt1__Insert(soap, (const struct __kt1__Insert *)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__getInforByIpResponse:
		soap_serialize_PointerTo_kt1__getInforByIpResponse(soap, (_kt1__getInforByIpResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__getInforByIp:
		soap_serialize_PointerTo_kt1__getInforByIp(soap, (_kt1__getInforByIp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__QueryResponse:
		soap_serialize_PointerTo_kt1__QueryResponse(soap, (_kt1__QueryResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__Query:
		soap_serialize_PointerTo_kt1__Query(soap, (_kt1__Query *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__InsertResponse:
		soap_serialize_PointerTo_kt1__InsertResponse(soap, (_kt1__InsertResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_kt1__Insert:
		soap_serialize_PointerTo_kt1__Insert(soap, (_kt1__Insert *const*)ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_serialize_wstring(soap, (wchar_t*const*)&ptr);
		break;
	case SOAP_TYPE_PointerTokt1__ArrayOfString:
		soap_serialize_PointerTokt1__ArrayOfString(soap, (kt1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_kt1__ArrayOfString:
		return (void*)soap_instantiate_kt1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__Insert:
		return (void*)soap_instantiate__kt1__Insert(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__InsertResponse:
		return (void*)soap_instantiate__kt1__InsertResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__Query:
		return (void*)soap_instantiate__kt1__Query(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__QueryResponse:
		return (void*)soap_instantiate__kt1__QueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__getInforByIp:
		return (void*)soap_instantiate__kt1__getInforByIp(soap, -1, type, arrayType, n);
	case SOAP_TYPE__kt1__getInforByIpResponse:
		return (void*)soap_instantiate__kt1__getInforByIpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___kt1__Insert:
		return (void*)soap_instantiate___kt1__Insert(soap, -1, type, arrayType, n);
	case SOAP_TYPE___kt1__Query:
		return (void*)soap_instantiate___kt1__Query(soap, -1, type, arrayType, n);
	case SOAP_TYPE___kt1__getInforByIp:
		return (void*)soap_instantiate___kt1__getInforByIp(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__wstring(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_kt1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE((kt1__ArrayOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((kt1__ArrayOfString*)p->ptr);
		break;
	case SOAP_TYPE__kt1__Insert:
		if (p->size < 0)
			SOAP_DELETE((_kt1__Insert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__Insert*)p->ptr);
		break;
	case SOAP_TYPE__kt1__InsertResponse:
		if (p->size < 0)
			SOAP_DELETE((_kt1__InsertResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__InsertResponse*)p->ptr);
		break;
	case SOAP_TYPE__kt1__Query:
		if (p->size < 0)
			SOAP_DELETE((_kt1__Query*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__Query*)p->ptr);
		break;
	case SOAP_TYPE__kt1__QueryResponse:
		if (p->size < 0)
			SOAP_DELETE((_kt1__QueryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__QueryResponse*)p->ptr);
		break;
	case SOAP_TYPE__kt1__getInforByIp:
		if (p->size < 0)
			SOAP_DELETE((_kt1__getInforByIp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__getInforByIp*)p->ptr);
		break;
	case SOAP_TYPE__kt1__getInforByIpResponse:
		if (p->size < 0)
			SOAP_DELETE((_kt1__getInforByIpResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_kt1__getInforByIpResponse*)p->ptr);
		break;
	case SOAP_TYPE___kt1__Insert:
		if (p->size < 0)
			SOAP_DELETE((struct __kt1__Insert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __kt1__Insert*)p->ptr);
		break;
	case SOAP_TYPE___kt1__Query:
		if (p->size < 0)
			SOAP_DELETE((struct __kt1__Query*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __kt1__Query*)p->ptr);
		break;
	case SOAP_TYPE___kt1__getInforByIp:
		if (p->size < 0)
			SOAP_DELETE((struct __kt1__getInforByIp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __kt1__getInforByIp*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::wstring >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::wstring >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::wstring >*)p)[len] = *(std::wstring *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::wstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::wstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

void _kt1__getInforByIpResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__getInforByIpResponse::out = NULL;
	/* transient soap skipped */
}

void _kt1__getInforByIpResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTokt1__ArrayOfString(soap, &this->_kt1__getInforByIpResponse::out);
	/* transient soap skipped */
}

int _kt1__getInforByIpResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__getInforByIpResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__getInforByIpResponse(struct soap *soap, const char *tag, int id, const _kt1__getInforByIpResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__getInforByIpResponse), type))
		return soap->error;
	if (a->out)
		soap_element_result(soap, "kt1:out");
	if (a->_kt1__getInforByIpResponse::out)
	{	if (soap_out_PointerTokt1__ArrayOfString(soap, "kt1:out", -1, &a->_kt1__getInforByIpResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__getInforByIpResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__getInforByIpResponse(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__getInforByIpResponse * SOAP_FMAC4 soap_in__kt1__getInforByIpResponse(struct soap *soap, const char *tag, _kt1__getInforByIpResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__getInforByIpResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__getInforByIpResponse, sizeof(_kt1__getInforByIpResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__getInforByIpResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__getInforByIpResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTokt1__ArrayOfString(soap, "kt1:out", &(a->_kt1__getInforByIpResponse::out), "kt1:ArrayOfString"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "kt1:out");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__getInforByIpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__getInforByIpResponse, 0, sizeof(_kt1__getInforByIpResponse), 0, soap_copy__kt1__getInforByIpResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__getInforByIpResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__getInforByIpResponse);
	if (this->soap_out(soap, tag?tag:"kt1:getInforByIpResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__getInforByIpResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__getInforByIpResponse(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__getInforByIpResponse * SOAP_FMAC4 soap_get__kt1__getInforByIpResponse(struct soap *soap, _kt1__getInforByIpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__getInforByIpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__getInforByIpResponse * SOAP_FMAC2 soap_instantiate__kt1__getInforByIpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__getInforByIpResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__getInforByIpResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__getInforByIpResponse);
		if (size)
			*size = sizeof(_kt1__getInforByIpResponse);
		((_kt1__getInforByIpResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__getInforByIpResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__getInforByIpResponse);
		for (int i = 0; i < n; i++)
			((_kt1__getInforByIpResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__getInforByIpResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__getInforByIpResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__getInforByIpResponse %p -> %p\n", q, p));
	*(_kt1__getInforByIpResponse*)p = *(_kt1__getInforByIpResponse*)q;
}

void _kt1__getInforByIp::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__getInforByIp::in0 = NULL;
	/* transient soap skipped */
}

void _kt1__getInforByIp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_wstring(soap, &this->_kt1__getInforByIp::in0);
	/* transient soap skipped */
}

int _kt1__getInforByIp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__getInforByIp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__getInforByIp(struct soap *soap, const char *tag, int id, const _kt1__getInforByIp *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__getInforByIp), type))
		return soap->error;
	if (a->_kt1__getInforByIp::in0)
	{	if (soap_out_wstring(soap, "kt1:in0", -1, &a->_kt1__getInforByIp::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__getInforByIp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__getInforByIp(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__getInforByIp * SOAP_FMAC4 soap_in__kt1__getInforByIp(struct soap *soap, const char *tag, _kt1__getInforByIp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__getInforByIp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__getInforByIp, sizeof(_kt1__getInforByIp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__getInforByIp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__getInforByIp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_wstring(soap, "kt1:in0", &(a->_kt1__getInforByIp::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__getInforByIp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__getInforByIp, 0, sizeof(_kt1__getInforByIp), 0, soap_copy__kt1__getInforByIp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__getInforByIp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__getInforByIp);
	if (this->soap_out(soap, tag?tag:"kt1:getInforByIp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__getInforByIp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__getInforByIp(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__getInforByIp * SOAP_FMAC4 soap_get__kt1__getInforByIp(struct soap *soap, _kt1__getInforByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__getInforByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__getInforByIp * SOAP_FMAC2 soap_instantiate__kt1__getInforByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__getInforByIp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__getInforByIp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__getInforByIp);
		if (size)
			*size = sizeof(_kt1__getInforByIp);
		((_kt1__getInforByIp*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__getInforByIp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__getInforByIp);
		for (int i = 0; i < n; i++)
			((_kt1__getInforByIp*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__getInforByIp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__getInforByIp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__getInforByIp %p -> %p\n", q, p));
	*(_kt1__getInforByIp*)p = *(_kt1__getInforByIp*)q;
}

void _kt1__QueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__QueryResponse::out = NULL;
	/* transient soap skipped */
}

void _kt1__QueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTokt1__ArrayOfString(soap, &this->_kt1__QueryResponse::out);
	/* transient soap skipped */
}

int _kt1__QueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__QueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__QueryResponse(struct soap *soap, const char *tag, int id, const _kt1__QueryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__QueryResponse), type))
		return soap->error;
	if (a->out)
		soap_element_result(soap, "kt1:out");
	if (a->_kt1__QueryResponse::out)
	{	if (soap_out_PointerTokt1__ArrayOfString(soap, "kt1:out", -1, &a->_kt1__QueryResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__QueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__QueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__QueryResponse * SOAP_FMAC4 soap_in__kt1__QueryResponse(struct soap *soap, const char *tag, _kt1__QueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__QueryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__QueryResponse, sizeof(_kt1__QueryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__QueryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__QueryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTokt1__ArrayOfString(soap, "kt1:out", &(a->_kt1__QueryResponse::out), "kt1:ArrayOfString"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "kt1:out");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__QueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__QueryResponse, 0, sizeof(_kt1__QueryResponse), 0, soap_copy__kt1__QueryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__QueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__QueryResponse);
	if (this->soap_out(soap, tag?tag:"kt1:QueryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__QueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__QueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__QueryResponse * SOAP_FMAC4 soap_get__kt1__QueryResponse(struct soap *soap, _kt1__QueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__QueryResponse * SOAP_FMAC2 soap_instantiate__kt1__QueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__QueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__QueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__QueryResponse);
		if (size)
			*size = sizeof(_kt1__QueryResponse);
		((_kt1__QueryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__QueryResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__QueryResponse);
		for (int i = 0; i < n; i++)
			((_kt1__QueryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__QueryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__QueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__QueryResponse %p -> %p\n", q, p));
	*(_kt1__QueryResponse*)p = *(_kt1__QueryResponse*)q;
}

void _kt1__Query::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__Query::in0 = NULL;
	/* transient soap skipped */
}

void _kt1__Query::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTokt1__ArrayOfString(soap, &this->_kt1__Query::in0);
	/* transient soap skipped */
}

int _kt1__Query::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__Query(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__Query(struct soap *soap, const char *tag, int id, const _kt1__Query *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__Query), type))
		return soap->error;
	if (a->_kt1__Query::in0)
	{	if (soap_out_PointerTokt1__ArrayOfString(soap, "kt1:in0", -1, &a->_kt1__Query::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__Query::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__Query(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__Query * SOAP_FMAC4 soap_in__kt1__Query(struct soap *soap, const char *tag, _kt1__Query *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__Query *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__Query, sizeof(_kt1__Query), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__Query)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__Query *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTokt1__ArrayOfString(soap, "kt1:in0", &(a->_kt1__Query::in0), "kt1:ArrayOfString"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__Query *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__Query, 0, sizeof(_kt1__Query), 0, soap_copy__kt1__Query);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__Query::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__Query);
	if (this->soap_out(soap, tag?tag:"kt1:Query", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__Query::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__Query(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__Query * SOAP_FMAC4 soap_get__kt1__Query(struct soap *soap, _kt1__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__Query * SOAP_FMAC2 soap_instantiate__kt1__Query(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__Query(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__Query, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__Query);
		if (size)
			*size = sizeof(_kt1__Query);
		((_kt1__Query*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__Query[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__Query);
		for (int i = 0; i < n; i++)
			((_kt1__Query*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__Query*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__Query(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__Query %p -> %p\n", q, p));
	*(_kt1__Query*)p = *(_kt1__Query*)q;
}

void _kt1__InsertResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__InsertResponse::out = NULL;
	/* transient soap skipped */
}

void _kt1__InsertResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTokt1__ArrayOfString(soap, &this->_kt1__InsertResponse::out);
	/* transient soap skipped */
}

int _kt1__InsertResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__InsertResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__InsertResponse(struct soap *soap, const char *tag, int id, const _kt1__InsertResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__InsertResponse), type))
		return soap->error;
	if (a->out)
		soap_element_result(soap, "kt1:out");
	if (a->_kt1__InsertResponse::out)
	{	if (soap_out_PointerTokt1__ArrayOfString(soap, "kt1:out", -1, &a->_kt1__InsertResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__InsertResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__InsertResponse(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__InsertResponse * SOAP_FMAC4 soap_in__kt1__InsertResponse(struct soap *soap, const char *tag, _kt1__InsertResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__InsertResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__InsertResponse, sizeof(_kt1__InsertResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__InsertResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__InsertResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTokt1__ArrayOfString(soap, "kt1:out", &(a->_kt1__InsertResponse::out), "kt1:ArrayOfString"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "kt1:out");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__InsertResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__InsertResponse, 0, sizeof(_kt1__InsertResponse), 0, soap_copy__kt1__InsertResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__InsertResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__InsertResponse);
	if (this->soap_out(soap, tag?tag:"kt1:InsertResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__InsertResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__InsertResponse(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__InsertResponse * SOAP_FMAC4 soap_get__kt1__InsertResponse(struct soap *soap, _kt1__InsertResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__InsertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__InsertResponse * SOAP_FMAC2 soap_instantiate__kt1__InsertResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__InsertResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__InsertResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__InsertResponse);
		if (size)
			*size = sizeof(_kt1__InsertResponse);
		((_kt1__InsertResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__InsertResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__InsertResponse);
		for (int i = 0; i < n; i++)
			((_kt1__InsertResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__InsertResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__InsertResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__InsertResponse %p -> %p\n", q, p));
	*(_kt1__InsertResponse*)p = *(_kt1__InsertResponse*)q;
}

void _kt1__Insert::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_kt1__Insert::in0 = NULL;
	/* transient soap skipped */
}

void _kt1__Insert::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTokt1__ArrayOfString(soap, &this->_kt1__Insert::in0);
	/* transient soap skipped */
}

int _kt1__Insert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__kt1__Insert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__kt1__Insert(struct soap *soap, const char *tag, int id, const _kt1__Insert *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__kt1__Insert), type))
		return soap->error;
	if (a->_kt1__Insert::in0)
	{	if (soap_out_PointerTokt1__ArrayOfString(soap, "kt1:in0", -1, &a->_kt1__Insert::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "kt1:in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_kt1__Insert::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__kt1__Insert(soap, tag, this, type);
}

SOAP_FMAC3 _kt1__Insert * SOAP_FMAC4 soap_in__kt1__Insert(struct soap *soap, const char *tag, _kt1__Insert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_kt1__Insert *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__kt1__Insert, sizeof(_kt1__Insert), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__kt1__Insert)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_kt1__Insert *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTokt1__ArrayOfString(soap, "kt1:in0", &(a->_kt1__Insert::in0), "kt1:ArrayOfString"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_kt1__Insert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__kt1__Insert, 0, sizeof(_kt1__Insert), 0, soap_copy__kt1__Insert);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _kt1__Insert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__kt1__Insert);
	if (this->soap_out(soap, tag?tag:"kt1:Insert", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_kt1__Insert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__kt1__Insert(soap, this, tag, type);
}

SOAP_FMAC3 _kt1__Insert * SOAP_FMAC4 soap_get__kt1__Insert(struct soap *soap, _kt1__Insert *p, const char *tag, const char *type)
{
	if ((p = soap_in__kt1__Insert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _kt1__Insert * SOAP_FMAC2 soap_instantiate__kt1__Insert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__kt1__Insert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__kt1__Insert, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_kt1__Insert);
		if (size)
			*size = sizeof(_kt1__Insert);
		((_kt1__Insert*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_kt1__Insert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_kt1__Insert);
		for (int i = 0; i < n; i++)
			((_kt1__Insert*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_kt1__Insert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__kt1__Insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _kt1__Insert %p -> %p\n", q, p));
	*(_kt1__Insert*)p = *(_kt1__Insert*)q;
}

void kt1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__wstring(soap, &this->kt1__ArrayOfString::string);
	/* transient soap skipped */
}

void kt1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__wstring(soap, &this->kt1__ArrayOfString::string);
	/* transient soap skipped */
}

int kt1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_kt1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_kt1__ArrayOfString(struct soap *soap, const char *tag, int id, const kt1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_kt1__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__wstring(soap, "kt1:string", -1, &(a->kt1__ArrayOfString::string), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *kt1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_kt1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 kt1__ArrayOfString * SOAP_FMAC4 soap_in_kt1__ArrayOfString(struct soap *soap, const char *tag, kt1__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (kt1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_kt1__ArrayOfString, sizeof(kt1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_kt1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (kt1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__wstring(soap, "kt1:string", &(a->kt1__ArrayOfString::string), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (kt1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_kt1__ArrayOfString, 0, sizeof(kt1__ArrayOfString), 0, soap_copy_kt1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int kt1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_kt1__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"kt1:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *kt1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_kt1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 kt1__ArrayOfString * SOAP_FMAC4 soap_get_kt1__ArrayOfString(struct soap *soap, kt1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_kt1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 kt1__ArrayOfString * SOAP_FMAC2 soap_instantiate_kt1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_kt1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_kt1__ArrayOfString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(kt1__ArrayOfString);
		if (size)
			*size = sizeof(kt1__ArrayOfString);
		((kt1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(kt1__ArrayOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(kt1__ArrayOfString);
		for (int i = 0; i < n; i++)
			((kt1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (kt1__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kt1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying kt1__ArrayOfString %p -> %p\n", q, p));
	*(kt1__ArrayOfString*)p = *(kt1__ArrayOfString*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___kt1__getInforByIp(struct soap *soap, struct __kt1__getInforByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->kt1__getInforByIp = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___kt1__getInforByIp(struct soap *soap, const struct __kt1__getInforByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_kt1__getInforByIp(soap, &a->kt1__getInforByIp);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___kt1__getInforByIp(struct soap *soap, const char *tag, int id, const struct __kt1__getInforByIp *a, const char *type)
{
	if (soap_out_PointerTo_kt1__getInforByIp(soap, "kt1:getInforByIp", -1, &a->kt1__getInforByIp, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__getInforByIp * SOAP_FMAC4 soap_in___kt1__getInforByIp(struct soap *soap, const char *tag, struct __kt1__getInforByIp *a, const char *type)
{
	size_t soap_flag_kt1__getInforByIp = 1;
	short soap_flag;
	a = (struct __kt1__getInforByIp *)soap_id_enter(soap, "", a, SOAP_TYPE___kt1__getInforByIp, sizeof(struct __kt1__getInforByIp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___kt1__getInforByIp(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_kt1__getInforByIp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_kt1__getInforByIp(soap, "kt1:getInforByIp", &a->kt1__getInforByIp, ""))
				{	soap_flag_kt1__getInforByIp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___kt1__getInforByIp(struct soap *soap, const struct __kt1__getInforByIp *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___kt1__getInforByIp(soap, tag?tag:"-kt1:getInforByIp", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__getInforByIp * SOAP_FMAC4 soap_get___kt1__getInforByIp(struct soap *soap, struct __kt1__getInforByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in___kt1__getInforByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __kt1__getInforByIp * SOAP_FMAC2 soap_instantiate___kt1__getInforByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___kt1__getInforByIp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___kt1__getInforByIp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__getInforByIp);
		if (size)
			*size = sizeof(struct __kt1__getInforByIp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__getInforByIp[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __kt1__getInforByIp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __kt1__getInforByIp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___kt1__getInforByIp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __kt1__getInforByIp %p -> %p\n", q, p));
	*(struct __kt1__getInforByIp*)p = *(struct __kt1__getInforByIp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___kt1__Query(struct soap *soap, struct __kt1__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->kt1__Query = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___kt1__Query(struct soap *soap, const struct __kt1__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_kt1__Query(soap, &a->kt1__Query);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___kt1__Query(struct soap *soap, const char *tag, int id, const struct __kt1__Query *a, const char *type)
{
	if (soap_out_PointerTo_kt1__Query(soap, "kt1:Query", -1, &a->kt1__Query, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__Query * SOAP_FMAC4 soap_in___kt1__Query(struct soap *soap, const char *tag, struct __kt1__Query *a, const char *type)
{
	size_t soap_flag_kt1__Query = 1;
	short soap_flag;
	a = (struct __kt1__Query *)soap_id_enter(soap, "", a, SOAP_TYPE___kt1__Query, sizeof(struct __kt1__Query), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___kt1__Query(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_kt1__Query && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_kt1__Query(soap, "kt1:Query", &a->kt1__Query, ""))
				{	soap_flag_kt1__Query--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___kt1__Query(struct soap *soap, const struct __kt1__Query *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___kt1__Query(soap, tag?tag:"-kt1:Query", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__Query * SOAP_FMAC4 soap_get___kt1__Query(struct soap *soap, struct __kt1__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in___kt1__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __kt1__Query * SOAP_FMAC2 soap_instantiate___kt1__Query(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___kt1__Query(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___kt1__Query, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__Query);
		if (size)
			*size = sizeof(struct __kt1__Query);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__Query[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __kt1__Query);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __kt1__Query*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___kt1__Query(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __kt1__Query %p -> %p\n", q, p));
	*(struct __kt1__Query*)p = *(struct __kt1__Query*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___kt1__Insert(struct soap *soap, struct __kt1__Insert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->kt1__Insert = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___kt1__Insert(struct soap *soap, const struct __kt1__Insert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_kt1__Insert(soap, &a->kt1__Insert);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___kt1__Insert(struct soap *soap, const char *tag, int id, const struct __kt1__Insert *a, const char *type)
{
	if (soap_out_PointerTo_kt1__Insert(soap, "kt1:Insert", -1, &a->kt1__Insert, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__Insert * SOAP_FMAC4 soap_in___kt1__Insert(struct soap *soap, const char *tag, struct __kt1__Insert *a, const char *type)
{
	size_t soap_flag_kt1__Insert = 1;
	short soap_flag;
	a = (struct __kt1__Insert *)soap_id_enter(soap, "", a, SOAP_TYPE___kt1__Insert, sizeof(struct __kt1__Insert), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___kt1__Insert(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_kt1__Insert && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_kt1__Insert(soap, "kt1:Insert", &a->kt1__Insert, ""))
				{	soap_flag_kt1__Insert--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___kt1__Insert(struct soap *soap, const struct __kt1__Insert *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___kt1__Insert(soap, tag?tag:"-kt1:Insert", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __kt1__Insert * SOAP_FMAC4 soap_get___kt1__Insert(struct soap *soap, struct __kt1__Insert *p, const char *tag, const char *type)
{
	if ((p = soap_in___kt1__Insert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __kt1__Insert * SOAP_FMAC2 soap_instantiate___kt1__Insert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___kt1__Insert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___kt1__Insert, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__Insert);
		if (size)
			*size = sizeof(struct __kt1__Insert);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __kt1__Insert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __kt1__Insert);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __kt1__Insert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___kt1__Insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __kt1__Insert %p -> %p\n", q, p));
	*(struct __kt1__Insert*)p = *(struct __kt1__Insert*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__getInforByIpResponse(struct soap *soap, _kt1__getInforByIpResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__getInforByIpResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__getInforByIpResponse(struct soap *soap, const char *tag, int id, _kt1__getInforByIpResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__getInforByIpResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__getInforByIpResponse ** SOAP_FMAC4 soap_in_PointerTo_kt1__getInforByIpResponse(struct soap *soap, const char *tag, _kt1__getInforByIpResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__getInforByIpResponse **)soap_malloc(soap, sizeof(_kt1__getInforByIpResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__getInforByIpResponse *)soap_instantiate__kt1__getInforByIpResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__getInforByIpResponse ** p = (_kt1__getInforByIpResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__getInforByIpResponse, sizeof(_kt1__getInforByIpResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__getInforByIpResponse(struct soap *soap, _kt1__getInforByIpResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__getInforByIpResponse);
	if (soap_out_PointerTo_kt1__getInforByIpResponse(soap, tag?tag:"kt1:getInforByIpResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__getInforByIpResponse ** SOAP_FMAC4 soap_get_PointerTo_kt1__getInforByIpResponse(struct soap *soap, _kt1__getInforByIpResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__getInforByIpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__getInforByIp(struct soap *soap, _kt1__getInforByIp *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__getInforByIp))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__getInforByIp(struct soap *soap, const char *tag, int id, _kt1__getInforByIp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__getInforByIp);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__getInforByIp ** SOAP_FMAC4 soap_in_PointerTo_kt1__getInforByIp(struct soap *soap, const char *tag, _kt1__getInforByIp **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__getInforByIp **)soap_malloc(soap, sizeof(_kt1__getInforByIp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__getInforByIp *)soap_instantiate__kt1__getInforByIp(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__getInforByIp ** p = (_kt1__getInforByIp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__getInforByIp, sizeof(_kt1__getInforByIp), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__getInforByIp(struct soap *soap, _kt1__getInforByIp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__getInforByIp);
	if (soap_out_PointerTo_kt1__getInforByIp(soap, tag?tag:"kt1:getInforByIp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__getInforByIp ** SOAP_FMAC4 soap_get_PointerTo_kt1__getInforByIp(struct soap *soap, _kt1__getInforByIp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__getInforByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__QueryResponse(struct soap *soap, _kt1__QueryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__QueryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__QueryResponse(struct soap *soap, const char *tag, int id, _kt1__QueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__QueryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__QueryResponse ** SOAP_FMAC4 soap_in_PointerTo_kt1__QueryResponse(struct soap *soap, const char *tag, _kt1__QueryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__QueryResponse **)soap_malloc(soap, sizeof(_kt1__QueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__QueryResponse *)soap_instantiate__kt1__QueryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__QueryResponse ** p = (_kt1__QueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__QueryResponse, sizeof(_kt1__QueryResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__QueryResponse(struct soap *soap, _kt1__QueryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__QueryResponse);
	if (soap_out_PointerTo_kt1__QueryResponse(soap, tag?tag:"kt1:QueryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__QueryResponse ** SOAP_FMAC4 soap_get_PointerTo_kt1__QueryResponse(struct soap *soap, _kt1__QueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__Query(struct soap *soap, _kt1__Query *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__Query))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__Query(struct soap *soap, const char *tag, int id, _kt1__Query *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__Query);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__Query ** SOAP_FMAC4 soap_in_PointerTo_kt1__Query(struct soap *soap, const char *tag, _kt1__Query **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__Query **)soap_malloc(soap, sizeof(_kt1__Query *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__Query *)soap_instantiate__kt1__Query(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__Query ** p = (_kt1__Query **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__Query, sizeof(_kt1__Query), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__Query(struct soap *soap, _kt1__Query *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__Query);
	if (soap_out_PointerTo_kt1__Query(soap, tag?tag:"kt1:Query", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__Query ** SOAP_FMAC4 soap_get_PointerTo_kt1__Query(struct soap *soap, _kt1__Query **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__InsertResponse(struct soap *soap, _kt1__InsertResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__InsertResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__InsertResponse(struct soap *soap, const char *tag, int id, _kt1__InsertResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__InsertResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__InsertResponse ** SOAP_FMAC4 soap_in_PointerTo_kt1__InsertResponse(struct soap *soap, const char *tag, _kt1__InsertResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__InsertResponse **)soap_malloc(soap, sizeof(_kt1__InsertResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__InsertResponse *)soap_instantiate__kt1__InsertResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__InsertResponse ** p = (_kt1__InsertResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__InsertResponse, sizeof(_kt1__InsertResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__InsertResponse(struct soap *soap, _kt1__InsertResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__InsertResponse);
	if (soap_out_PointerTo_kt1__InsertResponse(soap, tag?tag:"kt1:InsertResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__InsertResponse ** SOAP_FMAC4 soap_get_PointerTo_kt1__InsertResponse(struct soap *soap, _kt1__InsertResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__InsertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_kt1__Insert(struct soap *soap, _kt1__Insert *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__kt1__Insert))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_kt1__Insert(struct soap *soap, const char *tag, int id, _kt1__Insert *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__kt1__Insert);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _kt1__Insert ** SOAP_FMAC4 soap_in_PointerTo_kt1__Insert(struct soap *soap, const char *tag, _kt1__Insert **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_kt1__Insert **)soap_malloc(soap, sizeof(_kt1__Insert *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_kt1__Insert *)soap_instantiate__kt1__Insert(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_kt1__Insert ** p = (_kt1__Insert **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__kt1__Insert, sizeof(_kt1__Insert), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_kt1__Insert(struct soap *soap, _kt1__Insert *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_kt1__Insert);
	if (soap_out_PointerTo_kt1__Insert(soap, tag?tag:"kt1:Insert", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _kt1__Insert ** SOAP_FMAC4 soap_get_PointerTo_kt1__Insert(struct soap *soap, _kt1__Insert **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_kt1__Insert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_wstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{	wchar_t **p;
	p = soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wstring);
	if (soap_out_wstring(soap, tag?tag:"wchar", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTokt1__ArrayOfString(struct soap *soap, kt1__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_kt1__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTokt1__ArrayOfString(struct soap *soap, const char *tag, int id, kt1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_kt1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 kt1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTokt1__ArrayOfString(struct soap *soap, const char *tag, kt1__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (kt1__ArrayOfString **)soap_malloc(soap, sizeof(kt1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (kt1__ArrayOfString *)soap_instantiate_kt1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	kt1__ArrayOfString ** p = (kt1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_kt1__ArrayOfString, sizeof(kt1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTokt1__ArrayOfString(struct soap *soap, kt1__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTokt1__ArrayOfString);
	if (soap_out_PointerTokt1__ArrayOfString(soap, tag?tag:"kt1:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 kt1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTokt1__ArrayOfString(struct soap *soap, kt1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTokt1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap *soap, std::vector<std::wstring >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap *soap, const std::vector<std::wstring >*a)
{
	for (std::vector<std::wstring >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__wstring(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, int id, const std::vector<std::wstring >*a, const char *type)
{
	for (std::vector<std::wstring >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__wstring(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::wstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, std::vector<std::wstring >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__wstring(soap, -1)))
		return NULL;
	std::wstring n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_std__wstring(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__wstring, SOAP_TYPE_std__vectorTemplateOfstd__wstring, sizeof(std::wstring), 0))
				break;
			if (!soap_in_std__wstring(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__wstring(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::wstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__wstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::wstring >);
		if (size)
			*size = sizeof(std::vector<std::wstring >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::wstring >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::wstring >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::wstring >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::wstring > %p -> %p\n", q, p));
	*(std::vector<std::wstring >*)p = *(std::vector<std::wstring >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
