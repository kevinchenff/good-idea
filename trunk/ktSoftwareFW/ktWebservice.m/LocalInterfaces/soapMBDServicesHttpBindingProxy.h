/* soapMBDServicesHttpBindingProxy.h
   Generated by gSOAP 2.8.3 from MBDWebService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapMBDServicesHttpBindingProxy_H
#define soapMBDServicesHttpBindingProxy_H
#include "soapH.h"

class SOAP_CMAC MBDServicesHttpBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'MBDServicesHttpBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	MBDServicesHttpBindingProxy();
	/// Constructor with copy of another engine state
	MBDServicesHttpBindingProxy(const struct soap&);
	/// Constructor with endpoint URL
	MBDServicesHttpBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	MBDServicesHttpBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	MBDServicesHttpBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	MBDServicesHttpBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~MBDServicesHttpBindingProxy();
	/// Initializer used by constructors
	virtual	void MBDServicesHttpBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Insert' (returns error code or SOAP_OK)
	virtual	int Insert(_kt1__Insert *kt1__Insert, _kt1__InsertResponse *kt1__InsertResponse) { return Insert(NULL, NULL, kt1__Insert, kt1__InsertResponse); }
	virtual	int Insert(const char *endpoint, const char *soap_action, _kt1__Insert *kt1__Insert, _kt1__InsertResponse *kt1__InsertResponse);

	/// Web service operation 'Query' (returns error code or SOAP_OK)
	virtual	int Query(_kt1__Query *kt1__Query, _kt1__QueryResponse *kt1__QueryResponse) { return Query(NULL, NULL, kt1__Query, kt1__QueryResponse); }
	virtual	int Query(const char *endpoint, const char *soap_action, _kt1__Query *kt1__Query, _kt1__QueryResponse *kt1__QueryResponse);

	/// Web service operation 'getInforByIp' (returns error code or SOAP_OK)
	virtual	int getInforByIp(_kt1__getInforByIp *kt1__getInforByIp, _kt1__getInforByIpResponse *kt1__getInforByIpResponse) { return getInforByIp(NULL, NULL, kt1__getInforByIp, kt1__getInforByIpResponse); }
	virtual	int getInforByIp(const char *endpoint, const char *soap_action, _kt1__getInforByIp *kt1__getInforByIp, _kt1__getInforByIpResponse *kt1__getInforByIpResponse);
};
#endif
