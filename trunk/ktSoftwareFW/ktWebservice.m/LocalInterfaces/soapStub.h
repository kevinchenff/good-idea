/* soapStub.h
   Generated by gSOAP 2.8.3 from MBDWebService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_kt1	"http://domain.webserviceserver.module.mbd.avicit"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_kt1__ArrayOfString
#define SOAP_TYPE_kt1__ArrayOfString (8)
/* kt1:ArrayOfString */
class SOAP_CMAC kt1__ArrayOfString
{
public:
	std::vector<std::wstring >string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_kt1__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         kt1__ArrayOfString() { kt1__ArrayOfString::soap_default(NULL); }
	virtual ~kt1__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE__kt1__Insert
#define SOAP_TYPE__kt1__Insert (9)
/* kt1:Insert */
class SOAP_CMAC _kt1__Insert
{
public:
	kt1__ArrayOfString *in0;	/* required element of type kt1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__kt1__Insert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__Insert() { _kt1__Insert::soap_default(NULL); }
	virtual ~_kt1__Insert() { }
};
#endif

#ifndef SOAP_TYPE__kt1__InsertResponse
#define SOAP_TYPE__kt1__InsertResponse (10)
/* kt1:InsertResponse */
class SOAP_CMAC _kt1__InsertResponse
{
public:
	kt1__ArrayOfString *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type kt1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__kt1__InsertResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__InsertResponse() { _kt1__InsertResponse::soap_default(NULL); }
	virtual ~_kt1__InsertResponse() { }
};
#endif

#ifndef SOAP_TYPE__kt1__Query
#define SOAP_TYPE__kt1__Query (11)
/* kt1:Query */
class SOAP_CMAC _kt1__Query
{
public:
	kt1__ArrayOfString *in0;	/* required element of type kt1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__kt1__Query */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__Query() { _kt1__Query::soap_default(NULL); }
	virtual ~_kt1__Query() { }
};
#endif

#ifndef SOAP_TYPE__kt1__QueryResponse
#define SOAP_TYPE__kt1__QueryResponse (12)
/* kt1:QueryResponse */
class SOAP_CMAC _kt1__QueryResponse
{
public:
	kt1__ArrayOfString *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type kt1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__kt1__QueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__QueryResponse() { _kt1__QueryResponse::soap_default(NULL); }
	virtual ~_kt1__QueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__kt1__getInforByIp
#define SOAP_TYPE__kt1__getInforByIp (13)
/* kt1:getInforByIp */
class SOAP_CMAC _kt1__getInforByIp
{
public:
	wchar_t *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__kt1__getInforByIp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__getInforByIp() { _kt1__getInforByIp::soap_default(NULL); }
	virtual ~_kt1__getInforByIp() { }
};
#endif

#ifndef SOAP_TYPE__kt1__getInforByIpResponse
#define SOAP_TYPE__kt1__getInforByIpResponse (14)
/* kt1:getInforByIpResponse */
class SOAP_CMAC _kt1__getInforByIpResponse
{
public:
	kt1__ArrayOfString *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type kt1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__kt1__getInforByIpResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _kt1__getInforByIpResponse() { _kt1__getInforByIpResponse::soap_default(NULL); }
	virtual ~_kt1__getInforByIpResponse() { }
};
#endif

#ifndef SOAP_TYPE___kt1__Insert
#define SOAP_TYPE___kt1__Insert (24)
/* Operation wrapper: */
struct __kt1__Insert
{
public:
	_kt1__Insert *kt1__Insert;	/* optional element of type kt1:Insert */
};
#endif

#ifndef SOAP_TYPE___kt1__Query
#define SOAP_TYPE___kt1__Query (28)
/* Operation wrapper: */
struct __kt1__Query
{
public:
	_kt1__Query *kt1__Query;	/* optional element of type kt1:Query */
};
#endif

#ifndef SOAP_TYPE___kt1__getInforByIp
#define SOAP_TYPE___kt1__getInforByIp (32)
/* Operation wrapper: */
struct __kt1__getInforByIp
{
public:
	_kt1__getInforByIp *kt1__getInforByIp;	/* optional element of type kt1:getInforByIp */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
