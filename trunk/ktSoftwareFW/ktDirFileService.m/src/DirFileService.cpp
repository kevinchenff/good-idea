// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// DirFileService.cpp
// Header definition of DirFileService
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2011  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "DirFileService.h"
 
CATImplementClass( DirFileService,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// DirFileService : constructor
//-----------------------------------------------------------------------------
DirFileService::DirFileService():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// DirFileService : destructor
//-----------------------------------------------------------------------------
DirFileService::~DirFileService()
{
}
 
//-----------------------------------------------------------------------------
// DirFileService : copy constructor
//-----------------------------------------------------------------------------
DirFileService::DirFileService(DirFileService& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// DirFileService : equal operator
//-----------------------------------------------------------------------------
DirFileService& DirFileService::operator=(DirFileService& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}

//获得得到当前程序的intel_a文件夹路径
HRESULT DirFileService::GetCurrentDataPath(CATUnicodeString &StrODataPath)
{
	//获取主程序所在路径,存在sPath中
	CString sPath;
	GetModuleFileName(NULL,sPath.GetBufferSetLength (MAX_PATH+1),MAX_PATH);
	sPath.ReleaseBuffer ();
	int nPos;

	nPos=sPath.ReverseFind('\\');
	sPath=sPath.Left (nPos);
	nPos=sPath.ReverseFind('\\');
	sPath=sPath.Left (nPos);
	nPos=sPath.ReverseFind('\\');
	sPath=sPath.Left (nPos);

	BSTR path=sPath.AllocSysString();
	StrODataPath.BuildFromBSTR(path);
	::SysFreeString(path);

	return S_OK;
}


//------------------------------------------------------------------------------
//按行读取文件，返回每行数据的内容
//------------------------------------------------------------------------------
HRESULT DirFileService::ReadFileByLines(CATUnicodeString istrfilePath,CATListValCATUnicodeString& ioastrFileContent)
{
	HRESULT hr = S_OK;
	const int BUF_SIZE = 1024;
	char buf[BUF_SIZE];//= new char[BUF_SIZE];
	memset(buf, 0, BUF_SIZE);

	ifstream fin1;
	fin1.open(istrfilePath.ConvertToChar(), ios::in);
	if(!fin1) 
	{
		hr = E_FAIL;
		return hr;
	}

	//按照行读取文档内容
	
	while(!fin1.eof())   //按行读取
	{
		fin1.getline(buf,BUF_SIZE);
		CATUnicodeString strFileLine(buf);
		ioastrFileContent.Append(strFileLine);
	}

	fin1.close();
	return hr;
}




//------------------------------------------------------------------------------
//创建目录
//------------------------------------------------------------------------------
BOOL DirFileService::CreateDirectory(CATUnicodeString StrDir)
{
	CATUnicodeString StrSec;
	int iStart =-1;
	while(1)
	{
		iStart+=1;
		int iCurrent = StrDir.SearchSubString("\\", iStart, CATUnicodeString::CATSearchModeForward);
		if(iCurrent==-1)
		{
			iCurrent = StrDir.GetLengthInChar();
			StrSec =  StrDir.SubString(0,iCurrent);
			CATCreateDirectory(StrSec);
			break ;	
		}

		StrSec =  StrDir.SubString(0,iCurrent);
		CATCreateDirectory(StrSec);
		iStart = iCurrent;
	}

	if(CATFileAccess(StrDir.ConvertToChar(),0)==CATLibSuccess)
	{
		return TRUE;
	}

	return FALSE;
}

BOOL DirFileService::GetCertainFilesFromFolder(CATLISTV(CATUnicodeString) &ioLstFilePath,CATUnicodeString istrSuffix,CATUnicodeString iStrFolderPath)
{
	ioLstFilePath.RemoveAll();
	CATDirectory Dir;
	CATLibStatus status = ::CATOpenDirectory (iStrFolderPath, &Dir);
	if ( CATLibSuccess != status)
	{
		return FALSE;
	}

	int EndOfDir=0;
	status = CATLibSuccess ;
	CATDirectoryEntry Entry;
	int i=0;
	while (( EndOfDir !=1) && ( CATLibSuccess == status))
	{
		status= ::CATReadDirectory ( &Dir, &Entry, &EndOfDir);
		if (( CATLibSuccess == status ))
		{
			CATUnicodeString StrFileName(Entry.name);
			if(StrFileName.SearchSubString(istrSuffix, 0, CATUnicodeString::CATSearchModeForward)!=-1)
			{
				CATUnicodeString StrTemp = iStrFolderPath + "\\" + StrFileName;
				ioLstFilePath.Append(StrTemp);
			}
		}
	}
	status = ::CATCloseDirectory (&Dir);
	if ( CATLibSuccess != status)
	{
		return FALSE;
	}

	return TRUE;
}
 
