// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// MBDFAINewPrdCmd.cpp
// The command: MBDFAINewPrdCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2010  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDFAINewPrdCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDFAINewPrdCmd);

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDFAINewPrdCmd::MBDFAINewPrdCmd() :
  CATCommand (NULL, "MBDFAINewPrdCmd")
  ,_piMBDNoteDoc(NULL)
{
	_piMBDNoteDoc = PrtService::GetPrtDocument();	
    RequestStatusChange (CATCommandMsgRequestSharedMode);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDFAINewPrdCmd::~MBDFAINewPrdCmd()
{
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC MBDFAINewPrdCmd::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  if (_piMBDNoteDoc != NULL)
	{
		//增加判断，针对CATPart，CATProduct两种文档分别对待。

		//当是product文件时，提示退出
		CATFrmEditor * pEditor =CATFrmEditor::GetCurrentEditor();
		CATPathElement spPath = pEditor->GetUIActiveObject( );

		CATBaseUnknown* pcurrbase = spPath.CurrentElement( );

		HRESULT rc = S_FALSE;
		CATIProduct *piProduct = NULL;
		CATIPrtPart *piPrtPart = NULL;

		//********************************************************************************
		// 当前文档为product工作环境时
		//********************************************************************************
		if (SUCCEEDED(pcurrbase->QueryInterface(IID_CATIProduct,(void**)& piProduct)))
		{
			InitialMBDInfo();

			piProduct->Release();
			piProduct=NULL;

			RequestDelayedDestruction(); 
		}

		//********************************************************************************
		// 当前文档为part工作环境时
		//********************************************************************************
		else if (SUCCEEDED(pcurrbase->QueryInterface(IID_CATIPrtPart,(void**)& piPrtPart)))
		{
			// 当前状态没有激活的CATPart文件
			PrtService::ShowDlgNotify("添加装配模板提示","当前文档为CATPart环境，请转换到CATProduct环境再做操作！");
			piPrtPart->Release();
			piPrtPart=NULL;

			RequestDelayedDestruction(); 
		}
		else 
		{
			PrtService::ShowDlgNotify("添加装配模板提示","当前文档为非PRD环境，请转换到CATProduct环境再做操作！");
			RequestDelayedDestruction(); 
		}
	}
	//没有激活文档的情况
	else
	{
		// 当前状态没有激活的CATPart文件
		PrtService::ShowDlgNotify("添加装配模板提示","当前状态没有激活的CATProduct文件！");

		RequestDelayedDestruction();
	}

  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC MBDFAINewPrdCmd::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC MBDFAINewPrdCmd::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}


// 初始化时，自动搜索出当前工作环境的状态信息，包括文档类型以及文档名称
void MBDFAINewPrdCmd::InitialMBDInfo()
{
    // 得到当前文档中的pathElement
	//-------------------------------------------
	CATFrmEditor * pEditor =CATFrmEditor::GetCurrentEditor();
	CATPathElement spPath = pEditor->GetUIActiveObject( );

	CATBaseUnknown* pcurrbase = spPath.CurrentElement( );

	HRESULT hr = E_FAIL;
	CATIProduct *piProduct = NULL;

	//********************************************************************************
	// 当前文档为product工作环境时
	//********************************************************************************
	if (SUCCEEDED(pcurrbase->QueryInterface(IID_CATIProduct,(void**)& piProduct)))
	{
		
		// 得到当前选中装配件的名称
		CATUnicodeString StrPartNumber = piProduct->GetPartNumber();
		//cout<<"当前选中名称:"<<StrPartNumber.ConvertToChar()<<endl;
		_strDocName = StrPartNumber;
	
		// 得到当前选中Component的ReferenceProduct
		CATIProduct_var spReferenceProduct = piProduct->GetReferenceProduct();

		// 获取选中Component的ReferenceProduct的CATDocument指针,如果文档存在则做处理，不存在则退出
		CATILinkableObject *piLinkableObject = NULL;
		HRESULT rc = spReferenceProduct->QueryInterface( IID_CATILinkableObject, (void**)& piLinkableObject );
		CATDocument * piCurrentDoc = NULL ;
		if ( SUCCEEDED(rc) )
		{
			//*****************************************************************************
			// 得到当前文档的基本信息：名称、类型
			//*****************************************************************************
			piCurrentDoc = piLinkableObject->GetDocument();
			piLinkableObject->Release();
			piLinkableObject = NULL ;

			// 获取文档类型
			CATIDocId*  oDocId = NULL;
			piCurrentDoc->GetDocId(&oDocId);
			
			CATUnicodeString  oType;
			oDocId->GetType(oType);
			oDocId->Release();
			oDocId=NULL;
			_strDocType = oType;

			//*****************************************************************************
			// 根据此时文档是CATPart或者是CATProduct不同情况，做不同的信息处理
			//*****************************************************************************
			if (oType == "CATPart")
			{
				// 当前状态没有激活的CATPart文件
				PrtService::ShowDlgNotify("添加装配模板提示","该Component节点的Reference文档类型为CATPart！请激活其上一级装配节点！");

				RequestDelayedDestruction();
			} 
			else if(oType == "CATProduct")
			{
				//****************************************************************************
				// 对装配件MBD信息的处理
				//*****************************************************************************
				//-----------------------------------------------------------
				// 1 得到选中Product文档的Root Product
				//-----------------------------------------------------------
				CATIProduct *piProductOnRoot = NULL;
				PrdService::GetRootProductFromDoc(piCurrentDoc,piProductOnRoot);
				
				//----------------------------------------------------------------------------
				// 2 查找该Product是否有MBD安装模板实例，如果有则得到该文档的指针方便下一步操作
				//   如果没有则通过步骤3实现自动创建MBD安装模板实例
				//----------------------------------------------------------------------------
				CATListValCATBaseUnknown_var *ListChildren = piProductOnRoot->GetChildren();

				// 记录是否存在ARM模型
				CATBoolean flagCreateOrNot = FALSE;

				// 2.1 对节点信息进行搜索，并找到该节点下面的第一层所有子节点名称，进行相应的判断	
				if(NULL != ListChildren)
				{
					int nbOfDirectChidren = ListChildren->Size();

					// 获取该节点下面direct product的名称
					CATIProduct_var spChild = NULL_var;

					// 通过循环方式查询该节点下面的partNumber
					for (int i=1;i<=nbOfDirectChidren;i++)
					{
						spChild = (*ListChildren)[i];
						CATUnicodeString partNumber = spChild -> GetPartNumber();
						CATUnicodeString instanceName ("");
						hr = spChild -> GetPrdInstanceName ( instanceName );
						if  ( FAILED(hr) ) return;

						// 检验所有的节点名称，是否含有多个ARM模型
						int flagFind = partNumber.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeForward);
						if (flagFind != -1)
						{
							//查找到了开头含有“-ZP”标识号的文档，但是不能唯一确定，需要进一步做判断：有文档关联、关联文档必须为CATPart文件
							CATDocument* piPrdDoc = NULL;
							hr = PrdService::GetInstPrdDoc(spChild,piPrdDoc);
							if (SUCCEEDED(hr))
							{
								CATUnicodeString iostrPrdType("");
								hr = PrdService::GetInstPrdType(spChild,iostrPrdType);

								if (iostrPrdType == "CATPart")
								{
									//遍历出则添加到数组列表
									m_listARMInstancePrd.Append(spChild);
									flagCreateOrNot = TRUE;
								}
							}

						}

					}

					// 内存清理工作
					delete ListChildren;
					ListChildren=NULL;

				}	

				/*if (flagCreateOrNot == TRUE)
				{
					PrtService::ShowDlgNotify("添加MBD装配模板提示","在该装配节点下已经存在ZP模型！！！");
					return;
				}*/
				
				//------------------------------------------------------------------
				// 3 自动创建MBD装配模板文档
				//------------------------------------------------------------------
				CATUnicodeString strNum("01");
				int Num = m_listARMInstancePrd.Size();
				cout<<"ZP个数："<<Num<<endl;
				int dMax=0;
				if (Num >= 1)
				{
					//获取ARM编号最大值
					for (int i = 1; i <= Num; i ++)
					{

						CATIProduct_var spPrdAlias = ((CATIProduct_var)m_listARMInstancePrd[i])->GetReferenceProduct();
						CATUnicodeString strAlias = spPrdAlias->GetPartNumber();
						CATUnicodeString strTempNum = strAlias.SubString(strAlias.GetLengthInChar()-2,2);

						//获取数字部分
						int start = strTempNum.SearchSubString("0");
						while (start == 0)
						{
							strTempNum = strTempNum.SubString(1,strTempNum.GetLengthInChar()-1);
							start = strTempNum.SearchSubString("0");
						}
						//转换成数字
						int NumTemp;
						strTempNum.ConvertToNum(&NumTemp);
						//
						if (dMax < NumTemp)
						{
							dMax = NumTemp;			
						}
					}				

					//生成编号
					int NumSize = 2; //两位数字
					dMax ++;
					strNum.BuildFromNum(dMax);
					int NumiSize = (int)log10((double)(dMax))+1;
					if (NumSize >= 2&& NumiSize < NumSize)//增加0
					{
						for (int k=1; k <= NumSize-NumiSize; k++)
						{
							strNum = "0"+strNum;
						}
					}			
				}
				//
				CATUnicodeString strChangeARMName = _strDocName + "-ZP" + strNum;
				CATIProduct* oNewProduct = NULL;
									
				// 调用函数自动添加MBD零件模板
				CATUnicodeString  iDocumentPath ; 
				DirFileService::GetCurrentDataPath(iDocumentPath);
				iDocumentPath += "\\KTCustomConfig\\MBDSTDDoc\\ARM.CATPart";
				hr = PrdService::AddNewFromExternalComponent(piProductOnRoot,iDocumentPath,strChangeARMName, &oNewProduct,_piMBDNoteDoc);

				piProductOnRoot->Release();
				piProductOnRoot=NULL;

				// 更新结构树显示添加的MBD零件模板
				//Update the 3D view
				CATIModelEvents_var spEvents = piProduct;
				CATModify ModifyEvent(piProduct);
				spEvents -> Dispatch (ModifyEvent);

				//Update the graph view
				CATIRedrawEvent_var spRedraw = piProduct;
				spRedraw -> Redraw();
				
				// 输出自动创建MBD装配信息的模型提示
				if (SUCCEEDED(hr))
				{
					PrtService::ShowDlgNotify("添加MBD装配模板提示","在该装配节点下添加零件装配ZP信息模型！");
				}
							
			} // else if

			piProduct->Release();
			piProduct = NULL;

		} // if SUCCEEDED(rc)
	}
}