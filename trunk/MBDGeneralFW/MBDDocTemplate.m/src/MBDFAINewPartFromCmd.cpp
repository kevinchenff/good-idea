// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// MBDFAINewPartFromCmd.cpp
// The state chart based command: MBDFAINewPartFromCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2010  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDFAINewPartFromCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDFAINewPartFromCmd);

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDFAINewPartFromCmd::MBDFAINewPartFromCmd() :
  CATStateCommand ("MBDFAINewPartFromCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,m_pDlg(NULL),m_pOpenFileDlg(NULL),m_pFrmEditor(NULL)
{
	
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDFAINewPartFromCmd::~MBDFAINewPartFromCmd()
{
	if (m_pOpenFileDlg != NULL)
	{
		m_pOpenFileDlg->RequestDelayedDestruction();
	}

	if (m_pDlg != NULL)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDFAINewPartFromCmd::BuildGraph()
{
	// 定义具体实现细节
	// 打开一个OpenFile对话框
	CATString iFileName;
	m_pOpenFileDlg = new CATDlgFile((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),iFileName,CATDlgWndModal);
	m_pOpenFileDlg->SetVisibility(CATDlgShow);
	// Sets the authorized types  
	CATUnicodeString nameExtension = CATUnicodeString("CATPart");
	CATString filterExtension = CATString("*.CATPart");
	m_pOpenFileDlg->SetFilterStrings(&nameExtension, &filterExtension, 1);

	// 两个消息响应
	AddAnalyseNotificationCB(m_pOpenFileDlg, 
		m_pOpenFileDlg->GetDiaCANCELNotification(), 
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnMBDCancelAction, 
		NULL);  

	AddAnalyseNotificationCB(m_pOpenFileDlg, 
		m_pOpenFileDlg->GetWindCloseNotification(), 
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnMBDCancelAction, 
		NULL); 

	int iTypeOfInput = 0;
	AddAnalyseNotificationCB(m_pOpenFileDlg, 
		m_pOpenFileDlg->GetDiaOKNotification(), 
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnOpenFileOKAction, 
		&iTypeOfInput);   

}	


void MBDFAINewPartFromCmd::OnMBDCancelAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//Specify that the command is finished

	if (m_pOpenFileDlg != NULL)
	{
		m_pOpenFileDlg->RequestDelayedDestruction();
		m_pOpenFileDlg = NULL;
	}

	if (m_pDlg != NULL)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}

	//Specify that the command is finished
	RequestDelayedDestruction();
}


void MBDFAINewPartFromCmd::OnOpenFileOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
    	
	// 得到打开文件的全路径
	m_pOpenFileDlg->GetSelection(m_oSelectedFile);
	//cout<<m_oSelectedFile.ConvertToChar()<<endl;

	// 析构选择对话框
	if (m_pOpenFileDlg != NULL)
	{
		m_pOpenFileDlg->RequestDelayedDestruction();
		m_pOpenFileDlg = NULL;
	}

	// 创建文档命名交互对话框
	m_pDlg = new MBDFAINewPartFromDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnMBDOKAction,NULL);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnMBDCancelAction,NULL);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDFAINewPartFromCmd::OnMBDCancelAction,NULL);

	
}

void MBDFAINewPartFromCmd::OnMBDOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//---------------------------------------------------
	// 实现打开模板文件，拷贝模板零件内部的注释信息
	//---------------------------------------------------
	// 创建一个新文档
	// Retrieve a CATIIniInteractiveSession Interface
	// Get the current session !!! Not doc
	HRESULT hr ;

	CATIEditor*  poIEditorDocument = NULL;
	CATSession * pSession = CATSession::GetPtrSession();

	//------------------------------------------------------------------------------
	// 对于第一次新建文件存在特殊情况，即无法得到当前session的指针，采用如下代码规避
	//------------------------------------------------------------------------------
	if (NULL == pSession)
	{
		CATUnicodeString strFilePath;
		DirFileService::GetCurrentDataPath(strFilePath);
		strFilePath += "\\code\\bin\\";
		CATVariant VariantReturnValue;

		long ReturnValue = 0;
		hr = BuildVariant((const long)ReturnValue,VariantReturnValue);
		hr = CATScriptUtilities::ExecuteScript(strFilePath,catScriptLibraryTypeDirectory, "InitialSession.catvbs",VariantReturnValue,"CATMain");

		// 重新获取CATIA Session
		pSession = CATSession::GetPtrSession();
	}

	if (NULL != pSession )
	{
		CATIIniInteractiveSession * pIOnInteractiveSession =NULL;
		hr = pSession -> QueryInterface ( IID_CATIIniInteractiveSession, (void **) &pIOnInteractiveSession ) ;
		if (FAILED(hr)||(NULL==pIOnInteractiveSession))
		{
			cout << "Cannot retrieve CATIIniInteractiveSession Interface from RW" << endl << flush;
		}
		else
		{
			hr = pIOnInteractiveSession->NewFrom(m_oSelectedFile,&poIEditorDocument);
			pIOnInteractiveSession -> Release();
			pIOnInteractiveSession = NULL;

			if (SUCCEEDED(hr))
			{
				m_pFrmEditor = poIEditorDocument->GetEditor();
				poIEditorDocument->Release();
				poIEditorDocument=NULL;
			}
		}
	}

	// 新建零件的CATDocument 指针
	CATDocument * piDocument;
	// 获得相应的容器类
	CATIPrtContainer * piPrtCont ;
	CATIPrtPart_var spPart ;
	CATISpecObject_var spSpecOnPart ;
	
	//--------------------------------------------------------------------------
	//  根据需求，创建part零件模板内容
	//--------------------------------------------------------------------------
	if (NULL != m_pFrmEditor)
	{
		//
		CATUnicodeString StrPartNumber = m_pDlg->GetPartName();

		// 通过上一步的FrmEditor获得文档的Document
		piDocument = m_pFrmEditor->GetDocument();
		CATInit_var spInitOnDoc(piDocument);

		// 获得相应的容器类
		piPrtCont =  (CATIPrtContainer*) spInitOnDoc->GetRootContainer("CATIPrtContainer");
		spPart = piPrtCont->GetPart();
		piPrtCont->Release();
		piPrtCont=NULL;

		spSpecOnPart = spPart;

		// 获得Product，更改零件编号
		CATIProduct_var spProduct = spPart->GetProduct( );
		spProduct->SetPartNumber(StrPartNumber);

		// 更改PartBody命名
		CATIPartRequest_var spPrtRequst = spPart;
		CATBaseUnknown_var  oPartBody;
		spPrtRequst->GetMainBody("MfDefault3DView",oPartBody );

		CATIAlias_var spMainBodyAlias = oPartBody;
		spMainBodyAlias->SetAlias(StrPartNumber);


		// 清空几何图形集内容
		CATListValCATUnicodeString  ListStrSearchedFeatName;
		CATListValCATISpecObject_var ListValOfspSearchGSMTool;

		ListStrSearchedFeatName.Append("过程元素");
		PrtService::CAAGsiSearchFeatureFromName(piDocument, ListStrSearchedFeatName,ListValOfspSearchGSMTool);

		for (int j =1; j <= ListValOfspSearchGSMTool.Size(); j++)
		{
			if (ListValOfspSearchGSMTool[j] == NULL_var)
			{
				continue;
			}
			CATIDescendants_var spDescendants=  ListValOfspSearchGSMTool[j];
			CATListValCATISpecObject_var  oLst;
			spDescendants->GetAllChildren( "CATISpecObject", oLst);
			for (int i = 1; i <= oLst.Size(); i ++)
			{
				CATISpecObject* spFather = oLst[i]->GetFather();
				if (spFather!= NULL)
				{
					spFather->Remove(oLst[i]);
					spFather->Release();
				}				
			}
		}

		CATListValCATBaseUnknown_var  listSpecBodie;
		spPrtRequst->GetSolidBodies("MfDefault3DView",listSpecBodie);
		for (int j =1; j <= listSpecBodie.Size(); j++)
		{
			if (listSpecBodie[j] == NULL_var)
			{
				continue;
			}
			CATIDescendants_var spDescendants=  listSpecBodie[j];
			CATListValCATISpecObject_var  oLst;
			spDescendants->GetAllChildren( "CATISpecObject", oLst);
			for (int i = 1; i <= oLst.Size(); i ++)
			{
				CATISpecObject* spFather = oLst[i]->GetFather();
				if (spFather!= NULL)
				{
					spFather->Remove(oLst[i]);
					spFather->Release();
				}	
			}
		}
		
		// 更新目标文件
		PrtService::ObjectUpdate(spSpecOnPart);
	}

}


