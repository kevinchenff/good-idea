// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// MBDFAINewPartCmd.cpp
// The state chart based command: MBDFAINewPartCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2010  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDFAINewPartCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDFAINewPartCmd);

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDFAINewPartCmd::MBDFAINewPartCmd() :
CATStateCommand ("MBDFAINewPartCmd", CATDlgEngOneShot, CATCommandModeShared),
m_pDlg(NULL),m_pFrmEditor(NULL)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
{

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDFAINewPartCmd::~MBDFAINewPartCmd()
{
	if (m_pDlg != NULL) 
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDFAINewPartCmd::BuildGraph()
{
  // TODO: Define the StateChart 
  // ---------------------------
	m_pDlg = new MBDFAINewPartDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDFAINewPartCmd::OnMBDOKAction,NULL);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&MBDFAINewPartCmd::OnMBDCancelAction,NULL);

	AddAnalyseNotificationCB(m_pDlg,m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDFAINewPartCmd::OnMBDCancelAction,NULL);
}


void MBDFAINewPartCmd::OnMBDCancelAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//Specify that the command is finished
	RequestDelayedDestruction();
}


void MBDFAINewPartCmd::OnMBDOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	int selIndex = m_pDlg->GetMBDTempType();

	if (selIndex == 0)
	{
		AddMBDTemplateType01();
	} 
	
	//Specify that the command is finished
	RequestDelayedDestruction();
}

void MBDFAINewPartCmd::AddMBDTemplateType01()
{
	//************************************************************************
	// 交互模式创建一个FAI新零件文档模板
	// [1/8/2010 ev5adm]
	//************************************************************************

	// Retrieve a CATIIniInteractiveSession Interface
	// Get the current session !!! Not doc
	HRESULT hr ;
	
	CATIEditor * poIEditorDocument = NULL;
	CATSession * pSession = NULL;
	::GetPtrSession(pSession);

	//------------------------------------------------------------------------------
	// 对于第一次新建文件存在特殊情况，即无法得到当前session的指针，采用如下代码规避
	//------------------------------------------------------------------------------
	if (NULL == pSession)
	{
		CATUnicodeString strFilePath;
		DirFileService::GetCurrentDataPath(strFilePath);
		strFilePath += "\\code\\bin\\";
		CATVariant VariantReturnValue;

		long ReturnValue = 0;
		hr = BuildVariant((const long)ReturnValue,VariantReturnValue);
		hr = CATScriptUtilities::ExecuteScript(strFilePath,catScriptLibraryTypeDirectory, "InitialSession.catvbs",VariantReturnValue,"CATMain");

		// 重新获取CATIA Session
		pSession = CATSession::GetPtrSession();
	}
	
	if (NULL != pSession )
	{
		CATIIniInteractiveSession * pIOnInteractiveSession =NULL;
		hr = pSession -> QueryInterface ( IID_CATIIniInteractiveSession, (void **) &pIOnInteractiveSession ) ;

		CATUnicodeString  iDocumentPath ; 
		DirFileService::GetCurrentDataPath(iDocumentPath);
		iDocumentPath += "\\KTCustomConfig\\MBDSTDDoc\\MBD.CATPart";
		hr = pIOnInteractiveSession->NewFrom(iDocumentPath,&poIEditorDocument);
		pIOnInteractiveSession -> Release();
		pIOnInteractiveSession = NULL;

		if (poIEditorDocument != NULL)
		{
			m_pFrmEditor = poIEditorDocument->GetEditor();
			poIEditorDocument->Release();
			poIEditorDocument = NULL;
		}
		else
		{
			PrtService::ktErrorMsgBox("未能找到配置文件路径下 \\KTCustomConfig\\MBDSTDDoc\\MBD.CATPart！");
			return;
		}

	}
	if (NULL != m_pFrmEditor)
	{
		CATUnicodeString StrPartNumber = m_pDlg->GetPartName();

		// 通过上一步的FrmEditor获得文档的Document
		CATDocument * piDocument = m_pFrmEditor->GetDocument();
		CATInit_var spInitOnDoc(piDocument);

		// 获得相应的容器类
		CATIPrtContainer * piPrtCont =  (CATIPrtContainer*) spInitOnDoc->GetRootContainer("CATIPrtContainer");
		CATIPrtPart_var spPart = piPrtCont->GetPart();
		piPrtCont->Release();
		piPrtCont=NULL;
		CATISpecObject_var spSpecOnPart = spPart;

		// 获得Product，更改零件编号
		CATIProduct_var spProduct = spPart->GetProduct( );
		spProduct->SetPartNumber(StrPartNumber);

		// 更改PartBody命名
		CATIPartRequest_var spPrtRequst = spPart;
		CATBaseUnknown_var  oPartBody;
		spPrtRequst->GetMainBody("MfDefault3DView",oPartBody );

	    CATIAlias_var spMainBodyAlias = oPartBody;
		spMainBodyAlias->SetAlias(StrPartNumber);
		
		// 更新零件
		PrtService::ObjectUpdate(spSpecOnPart);
	}
}

