// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// MBDTechnicInfoCmd.cpp
// The state chart based command: MBDTechnicInfoCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2011  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDTechnicInfoCmd.h"

//CATTPSInterfaces
#include "CATITPSFlagNote.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDTechnicInfoCmd);

#include "iostream"
using namespace std;

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDTechnicInfoCmd::MBDTechnicInfoCmd() :
  CATStateCommand ("MBDTechnicInfoCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,m_piDlg(NULL),m_piSearchDlg(NULL),m_piNewAddinDlg(NULL),m_strXMLpath(""),m_strCurrentDocName("")
,m_piCurrentDoc(NULL),m_piEditor(NULL),m_piHSO(NULL),m_spSpecGSMTool(NULL_var),m_pContextMenu(NULL)
,m_pPushItemModify(NULL),m_pPushItemDelete(NULL),m_MBDNoteSelectNum(-1),m_MBDNoteSelectedFlag(FALSE),m_piNoteModifyDlg(NULL)
,m_selectResultLine(-1),m_pResultContextMenu(NULL),m_pResultPushItemModify(NULL)
,m_piResultNoteModifyDlg(NULL)
{
	//类参数初始化
	m_piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != m_piEditor)
	{
		m_piHSO = m_piEditor->GetHSO();
	}

	// 读取XML配置文件路径
	DirFileService::GetCurrentDataPath(m_strXMLpath);

	//初始化工作
	GetInitialInfo();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDTechnicInfoCmd::~MBDTechnicInfoCmd()
{
	if (m_piDlg != NULL) 
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}

	if (m_piSearchDlg != NULL) 
	{
		m_piSearchDlg->RequestDelayedDestruction();
		m_piSearchDlg = NULL;
	}

	if (m_piNewAddinDlg != NULL) 
	{
		m_piNewAddinDlg->RequestDelayedDestruction();
		m_piNewAddinDlg = NULL;
	}

	if (m_piHSO != NULL)
	{
		m_piHSO->Empty();
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDTechnicInfoCmd::BuildGraph()
{
  // TODO: Define the StateChart 
  // ---------------------------

	m_piDlg = new MBDTechnicInfoDlg();
	m_piDlg->m_xmlPath = m_strXMLpath + "\\MBDTECHTreeNode.xml";
	m_piDlg->Build();
	m_piDlg->SetVisibility(CATDlgShow); 
	m_ListTreeNodeName = m_piDlg->m_ListTreeNodeName;
	m_piDlg->GetGSMToolSpecs(m_piCurrentDoc,m_listTreeNodeSpec);	
	m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);
	GetAllFlagNoteInPrt(m_piCurrentDoc);

	// 主对话框的消息响应
	/*AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::OkDlgTechnicInfo,
		NULL);*/

	AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgTechnicInfo,
		NULL);

	AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgTechnicInfo,
		NULL);

	// 主对话框按钮消息响应
	AddAnalyseNotificationCB (m_piDlg->_TechnicNoteSearchPB, 
		m_piDlg->_TechnicNoteSearchPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::ShowDlgTechnicNoteSearch,
		NULL);

	AddAnalyseNotificationCB (m_piDlg->_NewNoteAddinPB, 
		m_piDlg->_NewNoteAddinPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::ShowDlgNewNoteAddin,
		NULL);

	//用户点击搜索结果mutillist
	AddAnalyseNotificationCB (m_piDlg->_SearchResultML, 
		m_piDlg->_SearchResultML->GetListSelectNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::SearchResultMLSelectedCB,
		NULL);

	//树节点响应的控制
	AddCallback (m_piDlg->m_piTreeCtrl, TreeNodeSelectNotif::ClassName(),(CATSubscriberMethod)&MBDTechnicInfoCmd::OnTreeNodeSelect,NULL);

	//添加对MBDNoteMultiList的响应函数，实现对显示数据的更改和删除工作
	//对mutillist添加右键响应
	AddAnalyseNotificationCB(m_piDlg->_TreeGSMToolNotesML,
		m_piDlg->_TreeGSMToolNotesML->GetListSelectNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::MBDNoteMLSelectedCB,
		NULL);

	//点击添加选择搜索结果技术附注项到指定几何图形集
	AddAnalyseNotificationCB (m_piDlg->_InsertToGSMToolPB, 
		m_piDlg->_InsertToGSMToolPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::InsertTechItemPushButtonCB,
		NULL);

}


void MBDTechnicInfoCmd::OkDlgTechnicInfo(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (NULL != m_piDlg)
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}	

	RequestDelayedDestruction();

}

void MBDTechnicInfoCmd::CloseDlgTechnicInfo(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	if (NULL != m_piDlg)
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}	

	RequestDelayedDestruction();

}


void MBDTechnicInfoCmd::ShowDlgNewNoteAddin(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (m_piNewAddinDlg != NULL)
	{
		m_piNewAddinDlg->SetVisibility(CATDlgShow);
	}
	else
	{
		m_piNewAddinDlg = new MBDTechnicInfoNewAddinDlg();
		m_piNewAddinDlg->m_xmlPath = m_strXMLpath + "\\MBDTECHAddinItems.xml";
		m_piNewAddinDlg->Build();
		m_piNewAddinDlg->SetVisibility(CATDlgShow);
		m_ListAddinGSMTOOLName = m_piNewAddinDlg->ListGSMToolName;

	}


	AddAnalyseNotificationCB (m_piNewAddinDlg, 
		m_piNewAddinDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::OkDlgNewNoteAddin,
		NULL);

	AddAnalyseNotificationCB (m_piNewAddinDlg, 
		m_piNewAddinDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgNewNoteAddin,
		NULL);

	AddAnalyseNotificationCB (m_piNewAddinDlg, 
		m_piNewAddinDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgNewNoteAddin,
		NULL);

}

void MBDTechnicInfoCmd::OkDlgNewNoteAddin(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	m_piNewAddinDlg->SetVisibility(CATDlgHide);

}

void MBDTechnicInfoCmd::CloseDlgNewNoteAddin(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	if (NULL != m_piNewAddinDlg)
	{
		m_piNewAddinDlg->RequestDelayedDestruction();
		m_piNewAddinDlg = NULL;
	}

}


void MBDTechnicInfoCmd::ShowDlgTechnicNoteSearch(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (m_piSearchDlg != NULL)
	{
		m_piSearchDlg->SetVisibility(CATDlgShow);
	}
	else
	{
		m_piSearchDlg = new MBDTechnicInfoSearchDlg();
		m_piSearchDlg->m_xmlPath = m_strXMLpath + "\\MBDTECHSearchItems.xml";
		m_piSearchDlg->Build();
		m_piSearchDlg->SetVisibility(CATDlgShow);
		m_ListSearchGSMTOOLName = m_piSearchDlg->ListGSMToolName;
		m_ListSearchGSMToolSwitch = m_piSearchDlg->ListGSMToolSwitch;
	}


	AddAnalyseNotificationCB (m_piSearchDlg, 
		m_piSearchDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::OkDlgTechnicNoteSearch,
		NULL);

	AddAnalyseNotificationCB (m_piSearchDlg, 
		m_piSearchDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgTechnicNoteSearch,
		NULL);

	AddAnalyseNotificationCB (m_piSearchDlg, 
		m_piSearchDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&MBDTechnicInfoCmd::CloseDlgTechnicNoteSearch,
		NULL);
}

void MBDTechnicInfoCmd::CloseDlgTechnicNoteSearch(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (NULL != m_piSearchDlg)
	{
		//清空操作
		m_piDlg->_SearchResultML->ClearLine();
		m_piDlg->_TechnicalNoteDetailEditor->ClearLine();
		m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);

		m_selectResultLine = -1;
		m_piSearchDlg->RequestDelayedDestruction();
		m_piSearchDlg = NULL;
	}
}


//点击附注信息检索OK消息响应
void MBDTechnicInfoCmd::OkDlgTechnicNoteSearch(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//存在BUG问题，如果不判断对话框显示状态，会出现多次运行的可能.
	if (CATDlgShow == m_piSearchDlg->GetVisibility())
	{
		//清空检索信息拆分数组
		m_strListOfSearchResult01.RemoveAll();
		m_strListOfSearchResult02.RemoveAll();
		m_strListOfSearchResult03.RemoveAll();

		//----------------------
		// Go and search
		//----------------------
		m_listStrSearchItemsValue.RemoveAll();
		m_piSearchDlg->GetAllWBSItemInfo(m_listStrSearchItemsValue);

		// 测试代码，用于显示输出
		/*for (int i = 1; i <= m_listStrSearchItemsValue.Size(); i++)
		{
			cout<<"第"<<i<<"行数据："<<m_listStrSearchItemsValue[i].ConvertToChar()<<endl;
		}*/

		//查询WEBSERVICE获取搜选结果
		m_piDlg->_SearchResultML->ClearLine();
		m_piDlg->_TechnicalNoteDetailEditor->ClearLine();

		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(m_listStrSearchItemsValue,strListOfSearchResult);
		
		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//计算以3为倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-2)/3);

			if (cyclecount >= 1)
			{

				for (int i = 1; i <= cyclecount; i++)
				{
					m_strListOfSearchResult01.Append(strListOfSearchResult[i*3]);
					m_strListOfSearchResult02.Append(strListOfSearchResult[i*3 + 1]);

					CATUnicodeString strConvert = strListOfSearchResult[i*3 + 2];
					if (strConvert == "########")
					{
						strConvert = NULL;
						m_strListOfSearchResult03.Append(strConvert);
					}
					else
						m_strListOfSearchResult03.Append(strConvert);					

				}

			}

		}

		//填写结果项
		if (m_strListOfSearchResult01.Size() > 0)
		{

			for (int i = 1; i <= m_strListOfSearchResult01.Size();i++)
			{
				CATUnicodeString IndexNum;
				IndexNum.BuildFromNum(i);
				m_piDlg->_SearchResultML->SetColumnItem(0,IndexNum);
				m_piDlg->_SearchResultML->SetColumnItem(1,m_strListOfSearchResult01[i]);
				m_piDlg->_SearchResultML->SetColumnItem(2,m_strListOfSearchResult02[i]);
			}

		}

		//设置显示状态
		m_piSearchDlg->SetVisibility(CATDlgHide);
		m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);

	}
}

//[5/25/2011 ev5adm]
//修改该部分内容，添加右键更改功能
void MBDTechnicInfoCmd::SearchResultMLSelectedCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空备注信息
	m_piDlg->_TechnicalNoteDetailEditor->ClearLine();

	//获取所选信息
	int  iSize = m_piDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0 )
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_piDlg->_SearchResultML->GetSelect(ioTabRow,iSize);
		//cout<<"总共有"<<iSize<<"个数据，选中编号为："<<ioTabRow[0]<<endl;

		//显示备注信息
		if (m_strListOfSearchResult03[ioTabRow[0] + 1] != NULL)
		{
			m_piDlg->_TechnicalNoteDetailEditor->SetText(m_strListOfSearchResult03[ioTabRow[0] + 1]);
			m_selectResultLine = ioTabRow[0] + 1;
		}

		//对按钮状态的控制
		m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);
	}

	if (m_piSearchDlg != NULL_var)
	{
		if(m_ListSearchGSMToolSwitch[m_piSearchDlg->m_NodeLocate] == "true")
		{
			//对按钮状态的控制
			m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);
		}
	}

	//对用户填写的特殊信息框做处理！
	m_piDlg->_SpecialFeatureEditor->ClearLine();
	m_piDlg->_FlagNoteCombo->SetSelect(0);


	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_piDlg->_SearchResultML->GetSelect(ioTabRow,iSize);

		// 显示ContextualMenu菜单
		m_pResultContextMenu = new CATDlgContextualMenu (m_piDlg->_SearchResultML, "Context",CATDlgCtxEmpty);
		m_pResultPushItemModify = new CATDlgPushItem(m_pResultContextMenu,"Modify");

		// 添加对右键点击MBDNoteMultiList的CATDlgPushItem的消息响应机制
		AddAnalyseNotificationCB(m_pResultPushItemModify,
			m_pResultPushItemModify->GetMenuIActivateNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnResultMBDNoteModifyCB,
			NULL);
	}
}

// 当用户点击按钮后，有关参数的初始化工作
HRESULT MBDTechnicInfoCmd::GetInitialInfo()
{
	HRESULT hr = S_OK;
	
	// 得到当前文档中的pathElement
	//-------------------------------------------
	if (m_piEditor == NULL)
	{
		PrtService::ShowDlgNotify("MBD技术附注助手提示","当前状态无工作状态的文件，点击确定关闭！");
		RequestDelayedDestruction();
		
		return E_FAIL;
	}

	CATPathElement spPath = m_piEditor->GetUIActiveObject( );
	CATBaseUnknown* pcurrbase = spPath.CurrentElement( );

	CATIProduct *piProduct = NULL;
	CATIPrtPart *piPrtPart = NULL;

	//********************************************************************************
	// 当前文档为product工作环境时
	//********************************************************************************
	if (SUCCEEDED(pcurrbase->QueryInterface(IID_CATIProduct,(void**)& piProduct)))
	{
		//清空高亮
		m_piHSO->Empty();

		// [4/19/2011 ev5adm]
		// 得到当前选中装配件的名称
		CATUnicodeString StrPartNumber = piProduct->GetPartNumber();
		//cout<<"当前选中名称:"<<StrPartNumber.ConvertToChar()<<endl;
		m_strCurrentDocName = StrPartNumber;

		CATDocument *piCurrentDoc = NULL;
		hr = PrdService::GetInstPrdDoc(piProduct,piCurrentDoc);
		if (FAILED(hr))
		{
			PrtService::ShowDlgNotify("MBD技术附注助手提示","当前文档无法获取其Reference Doc，点击确定关闭！");
			RequestDelayedDestruction();
			return hr;
		}

		//获取当前文档的类型
		hr = PrdService::GetInstPrdType(piProduct,m_strCurrentDocType);
		if (FAILED(hr))
		{
			PrtService::ShowDlgNotify("MBD技术附注助手提示","当前文档无法获取其Reference Doc，点击确定关闭！");
			RequestDelayedDestruction();
			return hr;
		}

		//根据文档类型不同，分别处理
		if (m_strCurrentDocType == "CATPart")
		{
			// 需要判断这个PRT是否满足ARM命名规则
			int flagFind = m_strCurrentDocName.SearchSubString("R-",0,CATUnicodeString::CATSearchModeForward);
			if (flagFind == 0)
			{
				// 获得配置文件路径
				m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATProductEnv";
			}
			else
			{
				// 获得配置文件路径
				m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATPartEnv";								
			}

			// 获取当前零件模型文档的指针
			m_piCurrentDoc = piCurrentDoc;

			// 高亮显示
			CATIProduct_var spRefPrd = piProduct->GetReferenceProduct();
			PrtService::HighlightHSO(spRefPrd);
		} 
		else if (m_strCurrentDocType == "CATProduct")
		{
			//----------------------------------------------------------------------------
			// 1 获得PRD ROOT
			//----------------------------------------------------------------------------
			CATIProduct *piProductOnRoot = NULL;
			PrdService::GetRootProductFromDoc(piCurrentDoc,piProductOnRoot);

			//----------------------------------------------------------------------------
			// 2 查找该Product是否有MBD安装模板实例，如果有则得到该文档的指针
			// 如果没有则自动创建MBD安装模板实例
			//----------------------------------------------------------------------------
			CATListValCATBaseUnknown_var *ListChildren = piProductOnRoot->GetChildren();
			
			// 记录是否存在ARM模型
			CATBoolean flagCreateOrNot = FALSE;

			// 2.1 对节点信息进行搜索，并找到该节点下面的第一层所有子节点名称，进行相应的判断	
			if(NULL != ListChildren)
			{
				int nbOfDirectChidren = ListChildren->Size();
				cout <<" Number of direct children under the root = "<< nbOfDirectChidren << endl;
			
				// 获取该节点下面direct product的名称
				CATIProduct_var spChild = NULL_var;

				// 通过循环方式查询该节点下面的partNumber
				for (int i=1;i<=nbOfDirectChidren;i++)
				{
					spChild = (*ListChildren)[i];
					CATUnicodeString partNumber = spChild -> GetPartNumber();
					CATUnicodeString instanceName ("");
					hr = spChild -> GetPrdInstanceName ( instanceName );
					if  ( FAILED(hr) ) return hr;

					// 检验所有的节点名称，是否含有多个ARM模型
					int flagFind = partNumber.SearchSubString("R-",0,CATUnicodeString::CATSearchModeForward);
					if (flagFind == 0)
					{
						//查找到了开头含有“R-”标识号的文档，但是不能唯一确定，需要进一步做判断：有文档关联、关联文档必须为CATPart文件
						CATDocument* piPrdDoc = NULL;
						hr = PrdService::GetInstPrdDoc(spChild,piPrdDoc);
						if (SUCCEEDED(hr))
						{
							CATUnicodeString iostrPrdType("");
							hr = PrdService::GetInstPrdType(spChild,iostrPrdType);

							if (iostrPrdType == "CATPart")
							{
								//遍历出则添加到数组列表
								m_listARMInstancePrd.Append(spChild);
								flagCreateOrNot = TRUE;
							}
						}

					}

				}
				
			}
			// 内存清理工作
			delete ListChildren;
			ListChildren=NULL;

			//---------------------------------------------------------------------
			// 如果在该装配节点下发现多个ARM模板的话，显示选择提示信息对话框
			// [4/19/2011 ev5adm]
			//---------------------------------------------------------------------
			if (m_listARMInstancePrd.Size() >= 2)
			{
				for (int i = 1; i <= m_listARMInstancePrd.Size(); i ++)
				{
					// 获取第一个零件模型文档的指针
					CATIProduct_var spFirstPrd = m_listARMInstancePrd[i];
					//MBDGenService::GetInstPrdDoc(spFirstPrd,m_piCurrentDoc);

					// 高亮显示
					PrtService::HighlightHSO(spFirstPrd);
				}

				PrtService::ShowDlgNotify("MBD技术附注助手提示","当前装配节点存在多个ARM模型，请选择需要添加附注信息的ARM模型，点击确定关闭！");
				RequestDelayedDestruction();
				return hr;			
			} 
			else if (m_listARMInstancePrd.Size() == 1)
			{
				// 获得配置文件路径
				m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATProductEnv";

				// 获取第一个零件模型文档的指针
				CATIProduct_var spFirstPrd = m_listARMInstancePrd[1];
				PrdService::GetInstPrdDoc(spFirstPrd,m_piCurrentDoc);

				// 高亮显示
				PrtService::HighlightHSO(spFirstPrd);
			}


			//如果遍历之后未曾找到一个ARM模型，则自动创建
			//------------------------------------------------------------------
			// 3 自动创建MBD装配模板文档
			//------------------------------------------------------------------
			if (NULL == m_piCurrentDoc && flagCreateOrNot == FALSE)
			{
				PrtService::ShowDlgNotify("MBD技术附注助手提示","未在装配模型中找到ARM模型零件，程序将自动创建ARM文档挂载到该装配节点！");

				cout<<"未在装配模型中找到MBD零件，程序将自动创建ARM文档挂在于该节点下"<<endl;
				CATUnicodeString iDocumentType = "Part";
				CATUnicodeString strChangeARMName = m_strCurrentDocName;
				strChangeARMName.ReplaceSubString(m_strCurrentDocName.GetLengthInChar()-3,1,"9");

				strChangeARMName = "R-0" + strChangeARMName; //
				m_strCurrentDocName = strChangeARMName;
				CATIProduct* oNewProduct;

				// 自动创建MBD装配模型模板内容
				// 调用函数自动添加MBD零件模板
				CATUnicodeString  iDocumentPath ; 
				DirFileService::GetCurrentDataPath(iDocumentPath);
				iDocumentPath += "\\KTCustomConfig\\MBDSTDDoc\\ARM.CATPart";
				hr = PrdService::AddNewFromExternalComponent(piProductOnRoot,iDocumentPath,strChangeARMName, &oNewProduct,m_piCurrentDoc);

				piProductOnRoot->Release();
				piProductOnRoot=NULL;

				if (SUCCEEDED(hr))
				{
					// 高亮显示
					PrtService::HighlightHSO(oNewProduct);

					// 获得配置文件路径
					m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATProductEnv";

					// 高亮显示
					CATIProduct_var spRefPrd = oNewProduct->GetReferenceProduct();
					PrtService::HighlightHSO(spRefPrd);

					// 更新结构树显示添加的MBD零件模板
					PrdService::RedrawSpecTree(piProduct);

				} 
				else
				{
					RequestDelayedDestruction();
					return hr;
				}
				
				
			}

		}

		piProduct->Release();
		piProduct=NULL;
	}

	//********************************************************************************
	// 当前文档为part工作环境时
	//********************************************************************************
	else if (SUCCEEDED(pcurrbase->QueryInterface(IID_CATIPrtPart,(void**)& piPrtPart)))
	{
		//也需要判断文件类型，调用不同的XML配置路径
		//******************************************************************
		m_piHSO->Empty();

		// 需要判断这个PRT是否满足ARM命名规则
		CATUnicodeString strPartName;
		CATIProduct_var spProduct = piPrtPart->GetProduct( );
		strPartName = spProduct->GetPartNumber();
		m_strCurrentDocName = strPartName;
		int flagFind = m_strCurrentDocName.SearchSubString("R-",0,CATUnicodeString::CATSearchModeForward);
		if (flagFind == 0)
		{
			// 获得配置文件路径
			m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATProductEnv";
		}
		else
		{
			// 获得配置文件路径
			m_strXMLpath += "\\KTCustomConfig\\MBDTechnicalNote\\CATPartEnv";								
		}

		// 获取当前零件模型文档的指针
		CATILinkableObject *piLinkableObject = NULL;
		hr = pcurrbase->QueryInterface( IID_CATILinkableObject, (void**)& piLinkableObject );
		CATDocument * piCurrentDoc = NULL;
		piCurrentDoc = piLinkableObject->GetDocument();
		m_piCurrentDoc = piCurrentDoc;
		piLinkableObject->Release();
		piLinkableObject = NULL ;
		// 高亮显示
		PrtService::HighlightHSO(spProduct);

		piPrtPart->Release();
		piPrtPart=NULL;
	}

	// 其它任何工作环境均不工作
	else
	{
		PrtService::ShowDlgNotify("MBD技术附注助手提示","当前状态无工作状态装配件或者零件，点击确定关闭！");
		RequestDelayedDestruction();

		return E_FAIL;
	}
	
	return hr;
}

//添加对用户交互选择树形结构控件的响应
void MBDTechnicInfoCmd::OnTreeNodeSelect(CATCallbackEvent event, void * client, CATNotification * iNotification, CATSubscriberData data, CATCallback callback)
{
	int NodeLocate;
	CATBaseUnknown * pTreeNode = NULL;
	m_piDlg->m_piTreeCtrl -> GetSelectedTreeNode(&pTreeNode);
	m_piDlg->m_piTreeCtrl -> GetCertainRootTreeNodeLocate(NodeLocate,pTreeNode);

	CATUnicodeString strLocate;
	strLocate.BuildFromNum(NodeLocate);

	if (NULL_var == m_listTreeNodeSpec[NodeLocate])
	{
		if (m_spSpecGSMTool != NULL_var)
		{
			PrtService::RemoveHSO(m_spSpecGSMTool);
		}

		m_spSpecGSMTool = NULL_var;
		PrtService::ShowDlgNotify("CATIA结构树提示信息","CATIA对应该节点几何图形集为空！");
	}
	else
	{
		if (m_spSpecGSMTool != NULL_var)
		{
			PrtService::RemoveHSO(m_spSpecGSMTool);
		}
		
		m_spSpecGSMTool = m_listTreeNodeSpec[NodeLocate];
		PrtService::HighlightHSO(m_spSpecGSMTool);
	}

	if (pTreeNode != NULL)
	{
		pTreeNode -> Release();
		pTreeNode = NULL;
	}

	//显示各个几何集中存在的参数项
	// 1 清除列表中的元素
	m_ListStrName.RemoveAll();
	m_ListStrNameValue.RemoveAll();

	// 2 获取几何图形集中的参数项，并显示在用户交互界面上
	m_piDlg->_TreeGSMToolNotesML->ClearLine();
	PrtService::GetGSMToolsParameters(m_spSpecGSMTool,m_ListStrName,m_ListStrNameValue);

	//显示技术附注项到 ML对话框
	for (int i = 0; i < m_ListStrName.Size(); i ++)
	{
		CATUnicodeString IndexNum;
		IndexNum.BuildFromNum(i+1);
		m_piDlg->_TreeGSMToolNotesML->SetColumnItem(0,IndexNum);
		m_piDlg->_TreeGSMToolNotesML->SetColumnItem(1,m_ListStrName[i+1]);
		m_piDlg->_TreeGSMToolNotesML->SetColumnItem(2,m_ListStrNameValue[i+1]);
	}

	// 3 每当节点更改便初始化一些flag参数
	m_MBDNoteSelectNum = -1;
	//m_MBDNoteSelectedFlag = FALSE;
}

// 在_TreeGSMToolNotesML列表中点击右键的响应
// 对MBDNoteMLSelected
CATBoolean MBDTechnicInfoCmd::MBDNoteMLSelectedCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	int  iSize = m_piDlg->_TreeGSMToolNotesML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_piDlg->_TreeGSMToolNotesML->GetSelect(ioTabRow,iSize);
		//cout<<"总共有"<<iSize<<"个数据，选中的MBDNote编号为："<<ioTabRow[0]<<endl;

		m_MBDNoteSelectNum = ioTabRow[0];
		//m_MBDNoteSelectedFlag = TRUE;

		// 显示ContextualMenu菜单
		m_pContextMenu = new CATDlgContextualMenu (m_piDlg->_TreeGSMToolNotesML, "Context",CATDlgCtxEmpty);
		//m_pPushItemModify = new CATDlgPushItem(m_pContextMenu,"Modify");
		m_pPushItemDelete = new CATDlgPushItem(m_pContextMenu,"Delete");


		// 添加对右键点击MBDNoteMultiList的CATDlgPushItem的消息响应机制
		/*AddAnalyseNotificationCB(m_pPushItemModify,
			m_pPushItemModify->GetMenuIActivateNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDNoteModifyCB,
			NULL);*/

		AddAnalyseNotificationCB(m_pPushItemDelete,
			m_pPushItemDelete->GetMenuIActivateNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDNoteDeleteCB,
			NULL);

	}

	return TRUE;
}

CATBoolean MBDTechnicInfoCmd::OnMBDNoteDeleteCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	cout <<"MBDTechnicInfoCmd::OnMBDNoteDeleteCB"<<endl;

	//---------------------------------------------------
	// 点击“删除”按钮时的消息响应
	// 1 删除mutillist中显示的该行信息，并重新编号
    //---------------------------------------------------
	if (m_MBDNoteSelectNum != -1)
	{
		m_piDlg->_TreeGSMToolNotesML->ClearLine(m_MBDNoteSelectNum);

		//为列表中的信息项重新编号
		int LineCount = m_piDlg->_TreeGSMToolNotesML->GetLineCount();
		for (int i = 0; i < LineCount;i ++)
		{
			CATUnicodeString  iString;
			iString.BuildFromNum(i+1);

			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(0,iString,i,CATDlgDataModify);
		}
        
		//---------------------------------------------------
		// 2 更改后的MBD数据集信息发送到CATIA几何图形集中
		//---------------------------------------------------
		m_ListStrName.RemovePosition(m_MBDNoteSelectNum + 1);
		m_ListStrNameValue.RemovePosition(m_MBDNoteSelectNum + 1);

		PrtService::ModifyMBDParamToGSMTool(m_piCurrentDoc,m_ListStrName,m_ListStrNameValue,m_spSpecGSMTool);
	}
	
	return TRUE;
}

//********************************************************************************************************
//  [3/10/2010 ev5adm]
//  对MBD Note修改的消息响应
//********************************************************************************************************
CATBoolean MBDTechnicInfoCmd::OnMBDNoteModifyCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//cout <<"MBDTechnicInfoCmd::OnMBDNoteModifyCB"<<endl;

	if (m_MBDNoteSelectNum != -1)
	{
		//---------------------------------------------------
		// 1 初始化对话框
		//---------------------------------------------------
		m_piNoteModifyDlg = new MBDNoteModifyDlg();
		m_piNoteModifyDlg->Build();
		m_piNoteModifyDlg->SetVisibility(CATDlgShow);

		// 显示选中的MBD Note信息项
		m_piNoteModifyDlg->GetMBDNoteModifyNameEditor()->SetText(m_ListStrName[m_MBDNoteSelectNum+1]);
		m_piNoteModifyDlg->GetMBDNoteModifyValueEditor()->SetText(m_ListStrNameValue[m_MBDNoteSelectNum+1]);

		//---------------------------------------------------
		// 2 消息响应
		//---------------------------------------------------
		AddAnalyseNotificationCB(m_piNoteModifyDlg,m_piNoteModifyDlg->GetDiaOKNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDModifyOKAction,NULL);

		AddAnalyseNotificationCB(m_piNoteModifyDlg,m_piNoteModifyDlg->GetDiaCANCELNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDModifyCancelAction,NULL);

		AddAnalyseNotificationCB(m_piNoteModifyDlg,m_piNoteModifyDlg->GetWindCloseNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDModifyCancelAction,NULL);

	}

	return TRUE;
}

// 修改按钮点击ok后的消息响应
void MBDTechnicInfoCmd::OnMBDModifyOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	// 析构对话框
	if (m_piNoteModifyDlg != NULL)
	{
		// 更新mutillist显示和MBD几何图形集显示
		m_ListStrName[m_MBDNoteSelectNum+1] = m_piNoteModifyDlg->GetMBDNoteModifyNameEditor()->GetText();
		m_ListStrNameValue[m_MBDNoteSelectNum+1] = m_piNoteModifyDlg->GetMBDNoteModifyValueEditor()->GetText();

		m_piDlg->_TreeGSMToolNotesML->SetColumnItem(1,m_ListStrName[m_MBDNoteSelectNum+1],m_MBDNoteSelectNum,CATDlgDataModify);
		m_piDlg->_TreeGSMToolNotesML->SetColumnItem(2,m_ListStrNameValue[m_MBDNoteSelectNum+1],m_MBDNoteSelectNum,CATDlgDataModify);

		PrtService::ModifyMBDParamToGSMTool(m_piCurrentDoc,m_ListStrName,m_ListStrNameValue,m_spSpecGSMTool);

		//析构对话框
		m_piNoteModifyDlg->RequestDelayedDestruction();
	}

}

// 修改按钮点击cancel后的消息响应
void MBDTechnicInfoCmd::OnMBDModifyCancelAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (m_piNoteModifyDlg != NULL)
	{
		m_piNoteModifyDlg->RequestDelayedDestruction();
	}
}

//技术附注信息项排序算法
void MBDTechnicInfoCmd::SortMBDNotesInOrder(CATListValCATUnicodeString &listStrName,CATListValCATUnicodeString &listStrValue)
{
	int i, j;
	int length = listStrName.Size();

	CATUnicodeString strKey(""),strkeyValue("");
	for (i = 2; i <= length; i++)
	{
		strKey = listStrName[i];
		strkeyValue = listStrValue[i];
		// 把i之前大于array[i]的数据向后移动
		for (j = i - 1; j >= 1 && listStrName[j] > strKey; j--)
		{
		  listStrName[j + 1] = listStrName[j];
		  listStrValue[j +1] = listStrValue[j];

		}
		// 在合适位置安放当前元素
		listStrName[j + 1] = strKey;
		listStrValue[j +1] = strkeyValue;
	}
}

//插入新数据到CATIA GSMTOOL
void MBDTechnicInfoCmd::InsertTechItemPushButtonCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//确保在正确的几何图形集
	if (m_piSearchDlg != NULL)
	{
		int chooseBatabase = m_piSearchDlg->m_NodeLocate;
		CATUnicodeString strGSMToolName = m_ListSearchGSMTOOLName[chooseBatabase];

		//cout<<"选择的GSMTOOLNAME is："<<strGSMToolName<<endl;		

		//查询正确的几何图形集spec
		int iTreeNodeRank = -1;
		for (int i = 1; i <= m_listTreeNodeSpec.Size(); i ++)
		{
			if (m_listTreeNodeSpec[i] != NULL_var)
			{
				CATIAlias_var spAlias = m_listTreeNodeSpec[i];
				CATUnicodeString strName = spAlias->GetAlias();

				if (strGSMToolName == strName)
				{
					if (NULL_var != m_spSpecGSMTool)
					{
						PrtService::RemoveHSO(m_spSpecGSMTool);
					}

					m_spSpecGSMTool = m_listTreeNodeSpec[i];
					iTreeNodeRank = i;
					break;
				}
			}
			
		}

		//设置树形结果显示
		//设置为选中状态
		if (iTreeNodeRank != -1)
		{
			CATBaseUnknown *  opTreeNodeObject = new CATBaseUnknown();
			m_piDlg->m_piTreeCtrl->GetRootTreeNodeAt(iTreeNodeRank,&opTreeNodeObject);
			m_piDlg->m_piTreeCtrl->SelectTreeNode(opTreeNodeObject);

		}
		else
		{
			//提示并终止下面操作
			PrtService::ShowDlgNotify("MBD GSMTOOL信息提示","CATIA无法找到对应几何图形集");
			return;
		}

		//插入新的技术附注项条目，此处需要根据情况做调整
		CATUnicodeString strNewName = m_strListOfSearchResult01[m_selectResultLine];
		CATListValCATUnicodeString liststrPlus;
		CATUnicodeString strSpecFeature(""),strMatWeight(""),strFlagNote("");
		strSpecFeature = m_piDlg->_SpecialFeatureEditor->GetText();
		
		int selectComboItem = m_piDlg->_FlagNoteCombo->GetSelect();
		if (selectComboItem != 0)
		{
			m_piDlg->_FlagNoteCombo->GetLine(strFlagNote,selectComboItem);
		}

		liststrPlus.Append(strSpecFeature);
		liststrPlus.Append(strMatWeight);
		liststrPlus.Append(strFlagNote);

		if (strMatWeight != "")
		{
			strNewName = CATUnicodeString("W_") + strNewName;
		}

		CATUnicodeString strAddInfo = strNewName;
		for (int i = 1; i <= liststrPlus.Size(); i ++)
		{
			if (liststrPlus[i] != "")
			{
				strAddInfo += CATUnicodeString("|") + liststrPlus[i];
			}
		}
		strAddInfo += CATUnicodeString("|");

		CATUnicodeString strNewValue = strAddInfo + m_strListOfSearchResult02[m_selectResultLine];

		//判断是否有重复数据，终止操作
		for (int i = 1; i <= m_ListStrName.Size(); i++)
		{

			if (m_ListStrName[i] == strNewName /*&& m_ListStrNameValue[i] == strNewValue*/)
			{
				PrtService::ShowDlgNotify("MBD插入信息提示","CATIA技术附注几何集中已经存在该数据项，无法插入，点击确定关闭提示框！");
				return;
			}

		}

		m_ListStrName.Append(strNewName);
		m_ListStrNameValue.Append(strNewValue);

		//调用排序算法
		SortMBDNotesInOrder(m_ListStrName,m_ListStrNameValue);

		//显示并保存入GSMTOOL
		PrtService::ModifyMBDParamToGSMTool(m_piCurrentDoc,m_ListStrName,m_ListStrNameValue,m_spSpecGSMTool);
		m_piDlg->_TreeGSMToolNotesML->ClearLine();
		
		for (int i = 0; i < m_ListStrName.Size(); i ++)
		{
			CATUnicodeString IndexNum;
			IndexNum.BuildFromNum(i+1);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(0,IndexNum);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(1,m_ListStrName[i+1]);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(2,m_ListStrNameValue[i+1]);
		}

		//反馈引用次数通知到数据库
		CATListValCATUnicodeString astrKeyWords;
		astrKeyWords.Append(CATUnicodeString("########"));
		astrKeyWords.Append(m_piSearchDlg->GetDatabaseWBSItemInfo());
		astrKeyWords.Append(m_strListOfSearchResult01[m_selectResultLine]);
		MBDWebservice::InsertDataWebService(astrKeyWords);

	}	
}

//获取当前所有的FLAGNOTE
void MBDTechnicInfoCmd::GetAllFlagNoteInPrt(CATDocument * ipDoc)
{
	// 获得容器
	CATInit_var spInitOnDoc = ipDoc;
	if (NULL_var == spInitOnDoc)
	{
		cout << "Could not get init on doc.\n";
		return;
	}
	CATIContainer * piContainer = (CATIContainer*) spInitOnDoc->GetRootContainer("CATIContainer");

	//从文档容器中获取零件CATIPrtContainer容器
	CATIPrtContainer *piPrtCont = NULL;
	HRESULT rc = piContainer->QueryInterface(IID_CATIPrtContainer, (void **)&piPrtCont);
	if(FAILED(rc))return;
	CATIPrtPart_var spPrtPart = piPrtCont->GetPart();
	//释放无用的接口
	piContainer->Release();
	piContainer = NULL;
	piPrtCont->Release();
	piPrtCont = NULL;

	CATListValCATISpecObject_var  oLstFlagNote;
	CATIDescendants_var spDescendants=  spPrtPart;
	spDescendants->GetAllChildren ("CATITPSFlagNote",oLstFlagNote);

	m_piDlg->_FlagNoteCombo->SetLine("请选择：<Flag Note>");
	for (int i = 1; i <= oLstFlagNote.Size(); i++)
	{
		CATIAlias_var spAlias = oLstFlagNote[i];
		CATUnicodeString strNote = spAlias->GetAlias();
		m_piDlg->_FlagNoteCombo->SetLine(strNote);
	}

}

//  [5/25/2011 ev5adm]
//添加对特殊情况 参数变量技术注释的修改功能
//********************************************************************************************************
CATBoolean MBDTechnicInfoCmd::OnResultMBDNoteModifyCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//cout <<"MBDTechnicInfoCmd::OnMBDNoteModifyCB"<<endl;

	if (m_selectResultLine != -1 && m_ListSearchGSMToolSwitch[m_piSearchDlg->m_NodeLocate] == "true")
	{
		//---------------------------------------------------
		// 1 初始化对话框
		//---------------------------------------------------
		m_piResultNoteModifyDlg = new MBDNoteModifyDlg();
		m_piResultNoteModifyDlg->Build();
		m_piResultNoteModifyDlg->SetVisibility(CATDlgShow);

		// 显示选中的MBD Note信息项
		m_piResultNoteModifyDlg->GetMBDNoteModifyNameEditor()->SetText(m_strListOfSearchResult01[m_selectResultLine]);
		m_piResultNoteModifyDlg->GetMBDNoteModifyValueEditor()->SetText(m_strListOfSearchResult02[m_selectResultLine]);

		//---------------------------------------------------
		// 2 消息响应
		//---------------------------------------------------
		AddAnalyseNotificationCB(m_piResultNoteModifyDlg,m_piResultNoteModifyDlg->GetDiaOKNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDResultModifyOKAction,NULL);

		AddAnalyseNotificationCB(m_piResultNoteModifyDlg,m_piResultNoteModifyDlg->GetDiaCANCELNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDResultModifyCancelAction,NULL);

		AddAnalyseNotificationCB(m_piResultNoteModifyDlg,m_piResultNoteModifyDlg->GetWindCloseNotification(),
			(CATCommandMethod)&MBDTechnicInfoCmd::OnMBDResultModifyCancelAction,NULL);

	}

	return TRUE;
}

// 修改按钮点击ok后的消息响应
void MBDTechnicInfoCmd::OnMBDResultModifyOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//确保在正确的几何图形集
	if (m_piSearchDlg != NULL)
	{
		int chooseBatabase = m_piSearchDlg->m_NodeLocate;
		CATUnicodeString strGSMToolName = m_ListSearchGSMTOOLName[chooseBatabase];

		//查询正确的几何图形集spec
		int iTreeNodeRank = -1;
		for (int i = 1; i <= m_listTreeNodeSpec.Size(); i ++)
		{
			if (m_listTreeNodeSpec[i] != NULL_var)
			{
				CATIAlias_var spAlias = m_listTreeNodeSpec[i];
				CATUnicodeString strName = spAlias->GetAlias();

				if (strGSMToolName == strName)
				{
					if (NULL_var != m_spSpecGSMTool)
					{
						PrtService::RemoveHSO(m_spSpecGSMTool);
					}

					m_spSpecGSMTool = m_listTreeNodeSpec[i];
					iTreeNodeRank = i;
					break;
				}
			}			
		}

		//设置树形结果显示
		//设置为选中状态
		if (iTreeNodeRank != -1)
		{
			CATBaseUnknown *  opTreeNodeObject = new CATBaseUnknown();
			m_piDlg->m_piTreeCtrl->GetRootTreeNodeAt(iTreeNodeRank,&opTreeNodeObject);
			m_piDlg->m_piTreeCtrl->SelectTreeNode(opTreeNodeObject);

		}
		else
		{
			//提示并终止下面操作
			PrtService::ShowDlgNotify("MBD GSMTOOL信息提示","CATIA无法找到对应几何图形集");
			return;
		}

		//插入新的技术附注项条目，此处需要根据情况做调整
		CATUnicodeString strNewName = m_piResultNoteModifyDlg->GetMBDNoteModifyNameEditor()->GetText();
		CATListValCATUnicodeString liststrPlus;
		CATUnicodeString strSpecFeature(""),strMatWeight(""),strFlagNote("");
		strSpecFeature = m_piDlg->_SpecialFeatureEditor->GetText();

		int selectComboItem = m_piDlg->_FlagNoteCombo->GetSelect();
		if (selectComboItem != 0)
		{
			m_piDlg->_FlagNoteCombo->GetLine(strFlagNote,selectComboItem);
		}

		liststrPlus.Append(strSpecFeature);
		liststrPlus.Append(strFlagNote);

		//实现同一类型技术附注项，自动扩展后续编号
		CATListValCATUnicodeString liststrNodeName,liststrNodeValue;
		CATListValCATUnicodeString listGSMNoteName,listGSMNoteValue;
		for (int i = 1; i <= m_ListStrName.Size(); i++)
		{
			int flagFind = m_ListStrName[i].SearchSubString(strNewName,0,CATUnicodeString::CATSearchModeForward);
			if (flagFind == 0)
			{
				liststrNodeName.Append(m_ListStrName[i]);
				liststrNodeValue.Append(m_ListStrNameValue[i]);
			}
			else if (flagFind == -1)
			{
				listGSMNoteName.Append(m_ListStrName[i]);
				listGSMNoteValue.Append(m_ListStrNameValue[i]);
			}
		}

		//重新排列专业技术附注项编号
		for (int i = 1; i <= liststrNodeName.Size(); i ++)
		{
			CATUnicodeString strSub = liststrNodeName[i].SubString(strNewName.GetLengthInChar(),liststrNodeName[i].GetLengthInChar()-strNewName.GetLengthInChar());
			CATUnicodeString strSerial; strSerial.BuildFromNum(i);
			CATUnicodeString strRep = "-" + strSerial;
			liststrNodeName[i].ReplaceSubString(strSub,strRep);
			
			int valuePos = liststrNodeValue[i].SearchSubString("|",0,CATUnicodeString::CATSearchModeBackward);
			liststrNodeValue[i].ReplaceSubString(0,valuePos,liststrNodeName[i]);

		}

		//重新合并字符串列表
		m_ListStrName.RemoveAll();
		m_ListStrNameValue.RemoveAll();
		for (int i = 1; i <= liststrNodeName.Size(); i ++)
		{
			m_ListStrName.Append(liststrNodeName[i]);
			m_ListStrNameValue.Append(liststrNodeValue[i]);
		}
		for (int i = 1; i <= listGSMNoteName.Size(); i ++)
		{
			m_ListStrName.Append(listGSMNoteName[i]);
			m_ListStrNameValue.Append(listGSMNoteValue[i]);
		}

		//对新加技术附注项编号进行修改
		CATUnicodeString strAddNum; strAddNum.BuildFromNum(liststrNodeName.Size() + 1);
		strNewName += "-" + strAddNum;
		CATUnicodeString strAddInfo = strNewName;

		for (int i = 1; i <= liststrPlus.Size(); i ++)
		{
			if (liststrPlus[i] != "")
			{
				strAddInfo += CATUnicodeString("|") + liststrPlus[i];
			}
		}
		strAddInfo += CATUnicodeString("|");
		CATUnicodeString strNewValue = strAddInfo + m_piResultNoteModifyDlg->GetMBDNoteModifyValueEditor()->GetText();


		//判断是否有重复编号数据，终止操作
		for (int i = 1; i <= m_ListStrName.Size(); i++)
		{

			//编号判断
			if (m_ListStrName[i] == strNewName)
			{
				PrtService::ShowDlgNotify("MBD插入信息提示","CATIA技术附注几何集中已经存在该数据项，无法插入，点击确定关闭提示框！");

				if (m_piResultNoteModifyDlg != NULL)
				{
					m_piResultNoteModifyDlg->RequestDelayedDestruction();
					m_piResultNoteModifyDlg=NULL;
				}

				return;
			}
		}

		//判断是否有重复内容数据，终止操作
		int AddvaluePos = strNewValue.SearchSubString("|",0,CATUnicodeString::CATSearchModeBackward);
		CATUnicodeString strAddValue = strNewValue.SubString(AddvaluePos,strNewValue.GetLengthInChar()-AddvaluePos);
		for (int i = 1; i <= m_ListStrName.Size(); i ++)
		{
			//内容判断
			int valuePos = m_ListStrNameValue[i].SearchSubString("|",0,CATUnicodeString::CATSearchModeBackward);
			CATUnicodeString strValue = m_ListStrNameValue[i].SubString(valuePos,m_ListStrNameValue[i].GetLengthInChar()-valuePos);

			//cout<<"strValue"<<strValue.ConvertToChar()<<endl;
			//cout<<"strAddValue"<<strAddValue.ConvertToChar()<<endl;

			if (strValue == strAddValue)
			{
				PrtService::ShowDlgNotify("MBD插入信息提示","CATIA技术附注几何集中已经存在该数据项内容，无法插入，点击确定关闭提示框！");

				if (m_piResultNoteModifyDlg != NULL)
				{
					m_piResultNoteModifyDlg->RequestDelayedDestruction();
					m_piResultNoteModifyDlg=NULL;
				}

				return;
			}
		}
		
		//加入列表
		m_ListStrName.Append(strNewName);
		m_ListStrNameValue.Append(strNewValue);

		//调用排序算法
		SortMBDNotesInOrder(m_ListStrName,m_ListStrNameValue);

		//显示并保存入GSMTOOL
		PrtService::ModifyMBDParamToGSMTool(m_piCurrentDoc,m_ListStrName,m_ListStrNameValue,m_spSpecGSMTool);
		m_piDlg->_TreeGSMToolNotesML->ClearLine();

		for (int i = 0; i < m_ListStrName.Size(); i ++)
		{
			CATUnicodeString IndexNum;
			IndexNum.BuildFromNum(i+1);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(0,IndexNum);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(1,m_ListStrName[i+1]);
			m_piDlg->_TreeGSMToolNotesML->SetColumnItem(2,m_ListStrNameValue[i+1]);
		}

		//
		//反馈引用次数通知到数据库
		CATListValCATUnicodeString astrKeyWords;
		astrKeyWords.Append(CATUnicodeString("########"));
		astrKeyWords.Append(m_piSearchDlg->GetDatabaseWBSItemInfo());
		astrKeyWords.Append(m_piResultNoteModifyDlg->GetMBDNoteModifyNameEditor()->GetText());
		MBDWebservice::InsertDataWebService(astrKeyWords);

	}	

	// 析构对话框
	if (m_piResultNoteModifyDlg != NULL)
	{
		m_piResultNoteModifyDlg->RequestDelayedDestruction();
		m_piResultNoteModifyDlg=NULL;

	}

}

// 修改按钮点击cancel后的消息响应
void MBDTechnicInfoCmd::OnMBDResultModifyCancelAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (m_piResultNoteModifyDlg != NULL)
	{
		m_piResultNoteModifyDlg->RequestDelayedDestruction();
		m_piResultNoteModifyDlg=NULL;
	}
}


