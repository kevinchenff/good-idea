// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// MBDTechnicInfoNewAddinDlg.cpp
// The dialog : MBDTechnicInfoNewAddinDlg
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2011  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDTechnicInfoNewAddinDlg.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#ifdef MBDTechnicInfoNewAddinDlg_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif

const int MAXCOUNT = 16;

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDTechnicInfoNewAddinDlg::MBDTechnicInfoNewAddinDlg() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"MBDTechnicInfoNewAddinDlg",CATDlgWndModal|CATDlgWndNoResize|CATDlgWndBtnClose|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               ),m_NodeLocate(0),m_xmlPath("")
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _Frame001 = NULL;
 _Label005 = NULL;
 _DatabaseListCombo = NULL;
 _Frame002 = NULL;
 _TechnicalNoteCttEditor = NULL;
 _SearchItemsFrame = NULL;
 _Frame004 = NULL;
 _ApplyNoteToEditorPB = NULL;
 _ApplyNoteToDatabasePB = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDTechnicInfoNewAddinDlg::~MBDTechnicInfoNewAddinDlg()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _Frame001 = NULL;
 _Label005 = NULL;
 _DatabaseListCombo = NULL;
 _Frame002 = NULL;
 _TechnicalNoteCttEditor = NULL;
 _SearchItemsFrame = NULL;
 _Frame004 = NULL;
 _ApplyNoteToEditorPB = NULL;
 _ApplyNoteToDatabasePB = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION

}



void MBDTechnicInfoNewAddinDlg::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//获得配置文件路径
XMLService::ReadXMLInfoFromFile(m_xmlPath,ListDbName,ListDbWBSItem,countNode,ListComboName,ListWBSItem,ListGSMToolName,ListGSMToolSwitch);

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 _Frame001 = new CATDlgFrame(this, "Frame001", CATDlgFraNoTitle|CATDlgGridLayout);
_Frame001 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _Frame001 -> SetGridRowResizable(0,1);
 _Frame001 -> SetGridColumnResizable(0,1);
 _Frame001 -> SetGridColumnResizable(1,1);
 _Label005 = new CATDlgLabel(_Frame001, "Label005");
_Label005 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _DatabaseListCombo = new CATDlgCombo(_Frame001, "DatabaseListCombo", CATDlgCmbDropDown);
_DatabaseListCombo -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _Frame002 = new CATDlgFrame(this, "Frame002", CATDlgGridLayout);
_Frame002 -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _Frame002 -> SetGridRowResizable(0,1);
 _Frame002 -> SetGridColumnResizable(0,1);
 _TechnicalNoteCttEditor = new CATDlgEditor(_Frame002, "TechnicalNoteCttEditor", CATDlgEdtMultiline);
 _TechnicalNoteCttEditor -> SetVisibleTextHeight(6);
 _TechnicalNoteCttEditor -> SetVisibleTextWidth(25);
_TechnicalNoteCttEditor -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _SearchItemsFrame = new CATDlgFrame(this, "SearchItemsFrame", CATDlgGridLayout);
_SearchItemsFrame -> SetGridConstraints(2, 0, 1, 1, CATGRID_4SIDES);
 _Frame004 = new CATDlgFrame(this, "Frame004", CATDlgFraNoTitle|CATDlgGridLayout);
_Frame004 -> SetGridConstraints(3, 0, 1, 1, CATGRID_4SIDES);
 _Frame004 -> SetGridColumnResizable(1,1);
 _ApplyNoteToEditorPB = new CATDlgPushButton(_Frame004, "ApplyNoteToEditorPB");
_ApplyNoteToEditorPB -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _ApplyNoteToDatabasePB = new CATDlgPushButton(_Frame004, "ApplyNoteToDatabasePB");
_ApplyNoteToDatabasePB -> SetGridConstraints(0, 1, 1, 1, CATGRID_RIGHT|CATGRID_TOP|CATGRID_BOTTOM);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION

//设置初始显示状态
_ApplyNoteToEditorPB->SetSensitivity(CATDlgDisable);
_ApplyNoteToDatabasePB->SetSensitivity(CATDlgDisable);

//
_DatabaseListCombo -> SetVisibleTextHeight(20);


//控制mutillist显示长度
int  oHeight = 0,oWidth = 0; 
PrtService::GetWindowMaxSize(&oHeight,&oWidth );

//创建查询条件选项
for (int i = 0; i < MAXCOUNT; i ++)
{

	CATDlgCombo *ItemCombo = new CATDlgCombo(_SearchItemsFrame, "ItemCombo", CATDlgCmbDropDown);
	ItemCombo -> SetGridConstraints(i, 0, 1, 1, CATGRID_4SIDES);
	ItemCombo -> SetVisibility(CATDlgHide);
	ItemCombo -> SetVisibleTextWidth(int (0.03*oWidth));
	ItemCombo -> SetVisibleTextHeight(20);
	m_ItemComboList.Append(ItemCombo);

	CATDlgEditor*  ItemEditor = new CATDlgEditor(_SearchItemsFrame, "ItemEditor");
	ItemEditor -> SetGridConstraints(i, 1, 1, 1, CATGRID_4SIDES);
	ItemEditor -> SetVisibleTextWidth(int (0.032*oWidth));
	ItemEditor -> SetVisibility(CATDlgHide);
	m_ItemEditorList.Append(ItemEditor);

}

//调整显示情况
_SearchItemsFrame -> SetGridRowResizable(0,1);
_SearchItemsFrame -> SetGridColumnResizable(0,1);

//
//显示必要的控件
m_ShowItemComboList.RemoveAll();
m_ShowItemEditorList.RemoveAll();
int showcount = countNode[1] - 1;
for (int i = 1; i <= showcount; i ++)
{
	((CATDlgEditor*) m_ItemEditorList[i])->SetVisibility(CATDlgShow);
	((CATDlgCombo*) m_ItemComboList[i])->SetVisibility(CATDlgShow);
	CATUnicodeString strComboName = CATUnicodeString("请选择： < “") + ListComboName[i] + CATUnicodeString("” >");
	((CATDlgCombo*) m_ItemComboList[i])->SetLine(strComboName);

	m_ShowItemEditorList.Append(m_ItemEditorList[i]);
	m_ShowItemComboList.Append(m_ItemComboList[i]);
}

//设置第一个EDITOR为 READONLY
((CATDlgEditor*) m_ItemEditorList[1])->SetSensitivity(CATDlgDisable);

//注释内容搜索控件
m_ShowItemEditorList.Append(_TechnicalNoteCttEditor);

//获取当前控件存储的信息及WBSItem
int count = countNode[1];
for (int i = 1; i <= count; i ++)
{
	ListCurrentComboName.Append(ListComboName[i]);
	ListCurrentWBSItem.Append(ListWBSItem[i]);
}

//显示COMBO控件下拉框信息
for (int i = 1; i <= m_ShowItemComboList.Size(); i ++)
{
	CATListValCATUnicodeString astrKeyWords;

	CATUnicodeString strWBSItem = CATUnicodeString("MBD_Sys_DropdownList=") + ListCurrentWBSItem[i];
	astrKeyWords.Append(strWBSItem);

	SetSearchItemComboList(astrKeyWords,(CATDlgCombo*)m_ShowItemComboList[i]);
}

//获取顺序号编码数组
m_astrSerialNumValue.RemoveAll();
GetSerialNumberList();
for (int i = 1; i <= m_astrSerialNumValue.Size(); i ++)
{
	cout<<"序列编号为： "<<m_astrSerialNumValue[i]<<endl;
}

//初始化库选择Combo
for (int i = 1; i <= ListDbName.Size(); i ++)
{
	_DatabaseListCombo->SetLine(ListDbName[i]);
}

//CAA2 WIZARD CALLBACK DECLARATION SECTION
AddAnalyseNotificationCB (_DatabaseListCombo, 
						  _DatabaseListCombo->GetComboSelectNotification(),
						  (CATCommandMethod)&MBDTechnicInfoNewAddinDlg::ChangeDatabaseComboListCB,
						  NULL);

AddAnalyseNotificationCB (_ApplyNoteToEditorPB, 
						  _ApplyNoteToEditorPB->GetPushBActivateNotification(),
						  (CATCommandMethod)&MBDTechnicInfoNewAddinDlg::ApplyNoteToEditorPBCB,
						  NULL);

AddAnalyseNotificationCB (_ApplyNoteToDatabasePB, 
						  _ApplyNoteToDatabasePB->GetPushBActivateNotification(),
						  (CATCommandMethod)&MBDTechnicInfoNewAddinDlg::ApplyNoteToDatabasePBCB,
						  NULL);

//END CAA2 WIZARD CALLBACK DECLARATION SECTION

//
for (int i = 1; i <= MAXCOUNT; i ++)
{
	AddAnalyseNotificationCB ((CATDlgCombo*)m_ItemComboList[i],((CATDlgCombo*)m_ItemComboList[i])->GetComboSelectNotification(),
		(CATCommandMethod)&MBDTechnicInfoNewAddinDlg::ComboItemSearchCB,NULL);
}

}


//  [4/18/2011 ev5adm]
//  点击该Combo list 做相应的界面调整
void MBDTechnicInfoNewAddinDlg::ChangeDatabaseComboListCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//设置按钮状态
	_ApplyNoteToEditorPB->SetSensitivity(CATDlgDisable);
	_ApplyNoteToDatabasePB->SetSensitivity(CATDlgDisable);

	//获取所选库的编号
	m_NodeLocate = _DatabaseListCombo->GetSelect();

	//清除combo里面的内容
	for (int i = 1; i <= MAXCOUNT; i++)
	{
		((CATDlgCombo*) m_ItemComboList[i])->ClearLine();
		((CATDlgEditor*) m_ItemEditorList[i])->ClearLine();

	}
	_TechnicalNoteCttEditor->ClearLine();	

	//获取具体的XML配置信息
	int startLabel = 0;
	for (int i = 0; i < m_NodeLocate; i++)
	{
		startLabel += countNode[i+1];
	}

	ListCurrentComboName.RemoveAll();
	ListCurrentWBSItem.RemoveAll();

	int count = countNode[m_NodeLocate+1];
	for (int i = 1; i <= count; i ++)
	{
		ListCurrentComboName.Append(ListComboName[i+startLabel]);
		ListCurrentWBSItem.Append(ListWBSItem[i+startLabel]);
	}

	//隐藏查询条件选项
	for (int i = 1; i <= m_ItemEditorList.Size(); i ++)
	{
		((CATDlgEditor*) m_ItemEditorList[i])->SetVisibility(CATDlgHide);
		((CATDlgCombo*) m_ItemComboList[i])->SetVisibility(CATDlgHide);
	}

	//显示必要的控件
	m_ShowItemComboList.RemoveAll();
	m_ShowItemEditorList.RemoveAll();
	int showcount = count - 1;
	for (int i = 1; i <= showcount; i ++)
	{
		((CATDlgEditor*) m_ItemEditorList[i])->SetVisibility(CATDlgShow);
		CATUnicodeString strComboName = CATUnicodeString("请选择： < “") + ListCurrentComboName[i] + CATUnicodeString("” >");
		((CATDlgCombo*) m_ItemComboList[i])->SetVisibility(CATDlgShow);
		((CATDlgCombo*) m_ItemComboList[i])->SetLine(strComboName);

		m_ShowItemEditorList.Append(m_ItemEditorList[i]);
		m_ShowItemComboList.Append(m_ItemComboList[i]);
	}

	//设置第一个EDITOR为 READONLY
	((CATDlgEditor*) m_ItemEditorList[1])->SetSensitivity(CATDlgDisable);

	//注释内容搜索控件
	m_ShowItemEditorList.Append(_TechnicalNoteCttEditor);

	//显示COMBO控件下拉框信息
	for (int i = 1; i <= m_ShowItemComboList.Size(); i ++)
	{
		CATListValCATUnicodeString astrKeyWords;

		CATUnicodeString strWBSItem = CATUnicodeString("MBD_Sys_DropdownList=") + ListCurrentWBSItem[i];
		astrKeyWords.Append(strWBSItem);

		SetSearchItemComboList(astrKeyWords,(CATDlgCombo*)m_ShowItemComboList[i]);
	}

	//获取顺序号编码数组
	m_astrSerialNumValue.RemoveAll();
	GetSerialNumberList();
	for (int i = 1; i <= m_astrSerialNumValue.Size(); i ++)
	{
		//cout<<"序列编号为： "<<m_astrSerialNumValue[i]<<endl;
	}

}

//获取顺序号编码数组函数
HRESULT MBDTechnicInfoNewAddinDlg::GetSerialNumberList()
{
	HRESULT hr = S_OK;
	
	//永远是第一个COMBO
	CATListValCATUnicodeString astrKeyWords;


	//对第二个特殊处理下，只要它的CODE值
	CATUnicodeString strWBSItem = CATUnicodeString("MBD_Sys_DropdownList=") + ListCurrentWBSItem[1];
	int Pos = strWBSItem.SearchSubString("#NOSORT");
	if (Pos != -1)
	{
		CATUnicodeString strCodeResult = strWBSItem.SubString(0,strWBSItem.GetLengthInChar()-12) + "#NOSORT";
		astrKeyWords.Append(strCodeResult);
	} 
	else
	{
		CATUnicodeString strCodeResult = strWBSItem.SubString(0,strWBSItem.GetLengthInChar()-5);
		astrKeyWords.Append(strCodeResult);
	}	
	
	//cout<<"astrKeyWords为: "<<astrKeyWords[1].ConvertToChar()<<endl;
	//存储搜索得到的combo value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(astrKeyWords,strListOfSearchResult);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//计算以2为倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-2)/2);

		if (cyclecount >= 1)
		{

			for (int i = 1; i <= cyclecount; i++)
			{
				m_astrSerialNumValue.Append(strListOfSearchResult[i*2 + 1]);//用的是名称
			}

		}

	}
	return hr;
}

//============================================================
// [4/27/2011 ev5adm]
// 设置搜索条件combo下拉框的显示内容
//============================================================
HRESULT MBDTechnicInfoNewAddinDlg::SetSearchItemComboList(CATListValCATUnicodeString astrKeyWords,CATDlgCombo * piDlgCombo)
{
	HRESULT hr = S_OK;
	//清空
	//存储搜索得到的combo value 
	CATListValCATUnicodeString strListOfSearchResult;
	CATListValCATUnicodeString astrCombolistValue;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(astrKeyWords,strListOfSearchResult);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//计算以2为倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-2)/2);

		if (cyclecount >= 1)
		{

			for (int i = 1; i <= cyclecount; i++)
			{
				astrCombolistValue.Append(strListOfSearchResult[i*2 + 2]); //用的是数值
			}

		}

	}

	//////////////////////////////////////////////////////////////////////////
	//显示在combo下拉列表中
	for (int j = 1; j <= astrCombolistValue.Size(); j++)
	{
		piDlgCombo->SetLine(astrCombolistValue[j]);
	}

	return hr;
}

CATBoolean MBDTechnicInfoNewAddinDlg::ComboItemSearchCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//获得当前combo列表位置
	int comboIndex = m_ShowItemComboList.Locate(cmd);

	//选择的COMBO信息，显示到EDITOR上
	int CurrentIndex;
	CurrentIndex = ((CATDlgCombo*)m_ShowItemComboList[comboIndex])->GetSelect();

	if (CurrentIndex != 0)
	{
		//如果是第一个序列号COMBO的时候，特殊处理
		if (comboIndex == 1)
		{
			_ApplyNoteToEditorPB->SetSensitivity(CATDlgEnable);
			_ApplyNoteToDatabasePB->SetSensitivity(CATDlgEnable);

			((CATDlgEditor*) m_ShowItemEditorList[comboIndex])->SetText (m_astrSerialNumValue[CurrentIndex]);
		}
		else
		{
			CATUnicodeString strTempIndexItem ;
			((CATDlgCombo*)m_ShowItemComboList[comboIndex])->GetLine(strTempIndexItem,CurrentIndex);

			((CATDlgEditor*) m_ShowItemEditorList[comboIndex])->SetText (strTempIndexItem);
		}

	}
	else //未选择条目的时候
	{
		((CATDlgEditor*) m_ShowItemEditorList[comboIndex])->ClearLine();

		//对于第一个COMBO，由于用于标识编号规则，由它控制PB状态
		if (comboIndex == 1)
		{
			_ApplyNoteToEditorPB->SetSensitivity(CATDlgDisable);
			_ApplyNoteToDatabasePB->SetSensitivity(CATDlgDisable);
		}
	}

	//搜索关键字列表
	CATLISTV(CATUnicodeString) aStrComboItemSelected;
	aStrComboItemSelected.Append(""); //添加一个空字符，占住位置，后面再修改它

	//获取搜索之前的COMBO的所有选择参数
	//采用循环方式
	for (int i = 1; i <= comboIndex; i++)
	{
		int tempIndex;
		tempIndex = ((CATDlgCombo*)m_ShowItemComboList[i])->GetSelect();

		if (tempIndex != 0)
		{
			CATUnicodeString strTempIndexItem ;
			((CATDlgCombo*)m_ShowItemComboList[i])->GetLine(strTempIndexItem,tempIndex);

			//构造赋值形式的字符串
			CATUnicodeString strTemp = ListCurrentWBSItem[i] + "=" + strTempIndexItem;
			aStrComboItemSelected.Append(strTemp);
		}

	}

	//更新选择该COMBO之后的COMBO的显示情况
	for (int j = comboIndex+1; j <= m_ShowItemComboList.Size(); j++)
	{
		CATUnicodeString strSearch = CATUnicodeString("MBD_Sys_DropdownList=") + ListCurrentWBSItem[j];
		aStrComboItemSelected[1] = strSearch;

		//调用函数清除并添加新内容
		((CATDlgCombo*) m_ShowItemComboList[j])->ClearLine();
		CATUnicodeString strComboName = CATUnicodeString("请选择： < “") + ListCurrentComboName[j] + CATUnicodeString("” >");
		((CATDlgCombo*) m_ShowItemComboList[j])->SetLine(strComboName);
		HRESULT hr = SetSearchItemComboList(aStrComboItemSelected,(CATDlgCombo*)m_ShowItemComboList[j]);

		//清空EDITOR对应的内容
		((CATDlgEditor*) m_ShowItemEditorList[j])->ClearLine();
	}

	return TRUE;
}

void MBDTechnicInfoNewAddinDlg::GetAllWBSItemInfo(CATLISTV(CATUnicodeString) &listStrSearchItems)
{
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("MBD_Sys_DatabaseName") + "=" + ListDbWBSItem[m_NodeLocate+1]; 
	listStrSearchItems.Append(strDatabase);

	//获取所有设置信息
	int count = m_ShowItemEditorList.Size();

	for (int i = 1; i <= count-1; i ++)
	{
		CATUnicodeString strEditorValue("");
		strEditorValue = ((CATDlgEditor*) m_ShowItemEditorList[i])->GetText();

		if (strEditorValue != "")
		{
			CATUnicodeString strValue("");
			strValue = ListCurrentWBSItem[i] + "=" + strEditorValue;
			listStrSearchItems.Append(strValue);
		} 
		else
		{
			CATUnicodeString strValue("");
			strValue = ListCurrentWBSItem[i] + "=――";
			listStrSearchItems.Append(strValue);
		}
		
	}

	//对第二个特殊处理下，只要它的CODE值
	int Pos = ListCurrentWBSItem[1].SearchSubString("#NOSORT");
	if (Pos != -1)
	{
		CATUnicodeString strCodeResult = ListCurrentWBSItem[1].SubString(0,ListCurrentWBSItem[1].GetLengthInChar()-12) + "#NOSORT";
		listStrSearchItems[2].ReplaceSubString(ListCurrentWBSItem[1],strCodeResult);
	} 
	else
	{
		CATUnicodeString strCodeResult = ListCurrentWBSItem[1].SubString(0,ListCurrentWBSItem[1].GetLengthInChar()-5);
		listStrSearchItems[2].ReplaceSubString(ListCurrentWBSItem[1],strCodeResult);
	}	

	// Append Editor Value
	CATUnicodeString strEditorValue("");
	strEditorValue = ((CATDlgEditor*) m_ShowItemEditorList[count])->GetText();
	if (strEditorValue != "")
	{
		strEditorValue = ListCurrentWBSItem[count] + "=" + strEditorValue;
		listStrSearchItems.Append(strEditorValue);
	}
	else
	{
		strEditorValue = ListCurrentWBSItem[count] + "=――";
		listStrSearchItems.Append(strEditorValue);
	}

	//添加用户电脑信息
	CATUnicodeString strUserHostname,strUserIpaddress;
	MBDWebservice::GetUserComputerInfo(strUserHostname,strUserIpaddress);

	strUserHostname = CATUnicodeString("MBD_Sys_UserHostname=") + strUserHostname;
	strUserIpaddress = CATUnicodeString("MBD_Sys_UserIpaddress=") + strUserIpaddress;

	cout<<"strUserHostname: "<<strUserHostname.ConvertToChar()<<endl;
	cout<<"strUserIpaddress: "<<strUserIpaddress.ConvertToChar()<<endl;

	listStrSearchItems.Append(strUserHostname);
	listStrSearchItems.Append(strUserIpaddress);
}

//点击提交所填写属性信息到标注内容EDITOR
void MBDTechnicInfoNewAddinDlg::ApplyNoteToEditorPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	int count = m_ShowItemEditorList.Size();
	CATUnicodeString strCttEditorValue("");
	//第一个
	//选择的COMBO信息，显示到EDITOR上
	int CurrentIndex = ((CATDlgCombo*)m_ShowItemComboList[1])->GetSelect();
	CATUnicodeString strTempIndexItem ;
	((CATDlgCombo*)m_ShowItemComboList[1])->GetLine(strTempIndexItem,CurrentIndex);
	strCttEditorValue += strTempIndexItem + "\n";
	
	//第二个
	for (int i = 2; i <= count-1; i ++)
	{
		CATUnicodeString strEditorValue("");
		strEditorValue = ((CATDlgEditor*) m_ShowItemEditorList[i])->GetText();
		if (strEditorValue != "")
		{
			strCttEditorValue += strEditorValue + "\n";
		}	
		
	}

	((CATDlgEditor*) m_ShowItemEditorList[count])->SetText(strCttEditorValue);
}

void MBDTechnicInfoNewAddinDlg::ApplyNoteToDatabasePBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	CATLISTV(CATUnicodeString) listStrSearchItems;
	GetAllWBSItemInfo(listStrSearchItems);

	HRESULT rc = MBDWebservice::InsertDataWebService(listStrSearchItems);
	if (SUCCEEDED(rc))
	{
		PrtService::ShowDlgNotify("MBD技术附注助手提示","新添加技术附注数据已成功发送数据库等待审核！");
	}
	else
	{
		PrtService::ShowDlgNotify("MBD技术附注助手提示","新添加技术附注数据失败！");
	}
}
