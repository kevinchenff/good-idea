// COPYRIGHT Dassault Systemes 2012
//===================================================================
//
// PrtFstDeleteCmd.cpp
// The state chart based command: PrtFstDeleteCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2012  Creation: Code generated by the CAA wizard  xyuser
//===================================================================
#include "PrtFstDeleteCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"
#include "CATSO.h"

#include "CATCreateExternalObject.h"
CATCreateClass( PrtFstDeleteCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
PrtFstDeleteCmd::PrtFstDeleteCmd() :
  CATStateCommand ("PrtFstDeleteCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
 ,m_pDlg(NULL),m_piDoc(NULL),m_piEditor(NULL),m_piHSO(NULL),m_piISO(NULL),m_piFstLineAgt(NULL)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	m_piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != m_piEditor)
	{
		m_piHSO = m_piEditor->GetHSO();
		m_piHSO->Empty();

		m_piISO = m_piEditor->GetISO();
		m_piISO->Empty();
	}

	//判断是否为ZP模型;
	if (!IsThisZPPrt(m_strDocName))
	{
		PrtService::ShowDlgNotify("提示","该功能仅在装配ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
PrtFstDeleteCmd::~PrtFstDeleteCmd()
{
   if (m_pDlg != NULL) 
   {
      m_pDlg->RequestDelayedDestruction();
	  m_pDlg=NULL;
   }

   if (NULL!=m_piFstLineAgt)
   {
	   m_piFstLineAgt->RequestDelayedDestruction();
	   m_piFstLineAgt=NULL;
   }

   //高亮点清空
   m_piHSO->Empty();
   m_piISO->Empty();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void PrtFstDeleteCmd::BuildGraph()
{
	//
	m_pDlg = new PrtFstDeleteDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow); 

	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&PrtFstDeleteCmd::OkDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&PrtFstDeleteCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&PrtFstDeleteCmd::CloseDlgCB,
		NULL);

	//增加对 紧固件线列表的响应控制
	AddAnalyseNotificationCB (m_pDlg->_FSTLineSL, 
		m_pDlg->_FSTLineSL->GetListSelectNotification(),
		(CATCommandMethod)&PrtFstDeleteCmd::GetSeletedFSTLine,
		NULL);

	//
	//定义代理选择机制
	//创建安装点代理
	m_piFstLineAgt = new CATPathElementAgent("选择紧固件线");
	m_piFstLineAgt->SetBehavior( CATDlgEngWithPSOHSO | CATDlgEngWithPrevaluation | CATDlgEngMultiAcquisitionUserCtrl | CATDlgEngRepeat);
	m_piFstLineAgt->AddElementType(IID_CATIGSMLine);
	CATAcquisitionFilter * pFilterForFSTLine = Filter((FilterMethod) & PrtFstDeleteCmd::SeletedIsFSTLine,(void*)NULL);
	m_piFstLineAgt->SetFilter(pFilterForFSTLine);

	//
	//Define the StateChart
	CATDialogState * StSelectFSTLine = GetInitialState("选择紧固件线");
	StSelectFSTLine -> AddDialogAgent (m_piFstLineAgt);

	//
	//转换关系 点到点
	AddTransition(StSelectFSTLine, StSelectFSTLine, 
		IsLastModifiedAgentCondition(m_piFstLineAgt),
		Action ((ActionMethod) &PrtFstDeleteCmd::ActiveFSTLineSL));
}

//判断是否为ZP模型
BOOL PrtFstDeleteCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart != -1)
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

void PrtFstDeleteCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	RequestDelayedDestruction();
}

void PrtFstDeleteCmd::OkDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	// 删除紧固件几何，并更新参数信息，所选列表

	//RequestDelayedDestruction();
}

//
//过滤函数
CATBoolean PrtFstDeleteCmd::SeletedIsFSTLine(CATDialogAgent * iAgent, void * iUsefulData)
{
	CATBoolean rc = FALSE ;
	if ( NULL == iAgent ) return rc ;

	//定义集群
	CATSO * pSO = NULL ;
	pSO = m_piFstLineAgt->GetListOfValues();
	if ( NULL != pSO )
	{
		int lg = pSO->GetSize();
		for ( int i=0 ; i < lg ; i++)
		{
			CATPathElement * pPath = (CATPathElement*) (*pSO)[i];
			CATPathElement * pSubPath = NULL;

			CATBaseUnknown * pLeaf =NULL ;
			if ( NULL != pPath )
				pSubPath = pPath->GetSubPath("CATISpecObject");
			pLeaf = (*pSubPath)[pSubPath->GetSize()-1];

			CATISpecObject_var spLeaf = pLeaf;

			if (spLeaf != NULL_var)
			{
				CATISpecObject_var spChoosedLine = spLeaf;
				//校验是否为 主紧固件
				BOOL bIsExistKey = false;
				CATUnicodeString strFSTMainKey("F_ATTEX_SIGN");
				CATUnicodeString strFSTMainKeyValue;
				PrtService::GetSepcObjectAttrEx(bIsExistKey,strFSTMainKeyValue,strFSTMainKey,spChoosedLine);
				//

				if (bIsExistKey && strFSTMainKeyValue=="YES")
				{
					return TRUE;
				}

			}
		}
	}
	

	return rc;
}

//各种转换消息响应函数
CATBoolean PrtFstDeleteCmd::ActiveFSTLineSL( void *UsefulData)
{
	return TRUE;
}

CATBoolean PrtFstDeleteCmd::ChooseFSTLines( void *UsefulData)
{
	return TRUE;
}

//
void PrtFstDeleteCmd::GetSeletedFSTLine(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	
}