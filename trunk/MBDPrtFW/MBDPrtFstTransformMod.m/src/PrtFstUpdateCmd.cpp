// COPYRIGHT Dassault Systemes 2012
//===================================================================
//
// PrtFstUpdateCmd.cpp
// The state chart based command: PrtFstUpdateCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2012  Creation: Code generated by the CAA wizard  xyuser
//===================================================================
#include "PrtFstUpdateCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

//
#include "CATListOfDouble.h"
#include "CATIMfMonoDimResult.h"
//

#include "CATCreateExternalObject.h"
CATCreateClass( PrtFstUpdateCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
PrtFstUpdateCmd::PrtFstUpdateCmd() :
  CATStateCommand ("PrtFstUpdateCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,m_pDlg(NULL),m_piDoc(NULL),m_piEditor(NULL),m_piHSO(NULL),m_piISO(NULL)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	m_piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != m_piEditor)
	{
		m_piHSO = m_piEditor->GetHSO();
		m_piHSO->Empty();

		m_piISO = m_piEditor->GetISO();
		m_piISO->Empty();
	}

	//判断是否为ZP模型;
	if (!IsThisZPPrt(m_strDocName))
	{
		PrtService::ShowDlgNotify("提示","该功能仅在装配ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
PrtFstUpdateCmd::~PrtFstUpdateCmd()
{
   if (m_pDlg != NULL) 
   {
      m_pDlg->RequestDelayedDestruction();
	  m_pDlg=NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void PrtFstUpdateCmd::BuildGraph()
{
	//
	m_pDlg = new PrtFstUpdateDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow); 

	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&PrtFstUpdateCmd::OkDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&PrtFstUpdateCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&PrtFstUpdateCmd::CloseDlgCB,
		NULL);
}


//判断是否为ZP模型
BOOL PrtFstUpdateCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart != -1)
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

void PrtFstUpdateCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	RequestDelayedDestruction();
}

void PrtFstUpdateCmd::OkDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//更新ZP模型
	CATIPrtContainer *opiRootContainer = NULL;
	PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
	//获得part
	CATISpecObject_var spPart = opiRootContainer->GetPart();
	PrtService::ObjectUpdate(spPart);

	// 获取当前“紧固件连接”几何图形集，获得所有紧固件
	// 获取所有该几何集下面所有的二级子集
	CATISpecObject_var spLineDefGSMTool = NULL_var;
	PrtService::ObtainGSMTool(m_piDoc,"连接定义",spLineDefGSMTool);
	if (spLineDefGSMTool == NULL_var)
	{
		//输出错误信息
		PrtService::ShowDlgNotify("错误提示","未能找到“连接定义”几何图形集！");
		return;
	}

	//获取第二层 连接组件定义 Prd01|Prd02|Prd03
	CATListValCATISpecObject_var iolstspFoundResult02;
	PrtService::SearchALLSonFromRootGSMTool(spLineDefGSMTool,iolstspFoundResult02);
	
	//
	for (int i = 1; i <= iolstspFoundResult02.Size(); i++)
	{
		//1 获得“紧固件描述”参数集
		CATISpecObject_var spJstDescripParmSet=NULL_var;
		PrtService::GetParmSetFromSpeObjt(iolstspFoundResult02[i],spJstDescripParmSet,"紧固件描述");
		//1.1 获得紧固件描述
		CATListValCATISpecObject_var iolstspParmSet;
		if (NULL_var != spJstDescripParmSet)
		{
			//检查是否存在
			PrtService::GetParmSetFromSpeObjt(spJstDescripParmSet,iolstspParmSet);
		}

		//2 获得 紧固件集合 第三层 XXX紧固件集合
		CATListValCATISpecObject_var iolstspFoundResult03;
		PrtService::SearchALLSonFromRootGSMTool(iolstspFoundResult02[i],iolstspFoundResult03);
		//
		CATListValCATUnicodeString alistStrFstName;
		CATListOfDouble alistDFstCount;
		
		// 
		for (int j = 1; j <= iolstspFoundResult03.Size(); j++)
		{
			//2.1 获得单个紧固件几何图形集，内部可能包含 一条线，多个圈模型
			CATListValCATISpecObject_var iolstspFoundResult04;
			PrtService::SearchALLSonFromRootGSMTool(iolstspFoundResult03[j],iolstspFoundResult04);

			//2.2 获得内部含有的线圈模型，得到其数量信息
			for (int m = 1; m <= iolstspFoundResult04.Size(); m++)
			{
				CATListValCATISpecObject_var iolstspFoundResult05;
				PrtService::SearchALLSonFromRootGSMTool(iolstspFoundResult04[m],iolstspFoundResult05,"CATISpecObject");
				//
				//判断模型类型：线圈？对其进行处理，获得名称
				for (int n=1; n <= iolstspFoundResult05.Size(); n++)
				{
					//
					CATIMfMonoDimResult *piMonoDim = NULL;
					HRESULT rc = iolstspFoundResult05[n]->QueryInterface(IID_CATIMfMonoDimResult, (void**)&piMonoDim);

					//成功获取其为一维线圈信息，第一对个数进行重新统计，第二对线的长度信息进行重新计算统计
					if (SUCCEEDED(rc))
					{
						//
						CATIAlias_var spAlias = iolstspFoundResult05[n];
						CATUnicodeString strFstName = spAlias->GetAlias();
						//
						CATBoolean existFlag = FALSE;
						int dCount;
						for (int k=1; k<=alistStrFstName.Size(); k++)
						{
							//
							if (alistStrFstName[k] == strFstName)
							{
								dCount = k;
								existFlag = TRUE;
								//
								break;
							}							
						}

						//如果存在
						if (existFlag == TRUE)
						{
							alistDFstCount[dCount]++;
							cout<<"数量为："<<alistDFstCount[dCount]<<endl;
						}
						else
						{
							alistStrFstName.Append(strFstName);
							alistDFstCount.Append(1.0);
						}

						//				
						piMonoDim->Release();
						piMonoDim = NULL;
					}
					
				}
			}
		}

		//对比参数列表中的内容 和 重新统计后的内容
		CATListValCATISpecObject_var alistDeleteFstParam;
		for (int m=1; m<=iolstspParmSet.Size(); m++)
		{	
			//
			CATListValCATUnicodeString lststrResult;
			CATUnicodeString strExistName = PrtService::GetAlias(iolstspParmSet[m]);
			CHandleString::StringToVector(strExistName,"|",lststrResult);
			//
			CATBoolean existFlag = FALSE;
			//
			for (int n=1; n<=alistStrFstName.Size(); n++)
			{
				if (lststrResult[1] == alistStrFstName[n])
				{
					//更改名字
					CATUnicodeString stridCount;stridCount.BuildFromNum(alistDFstCount[n]);
					CATUnicodeString strJstSetName = alistStrFstName[n] + "|" + stridCount;
					//
					PrtService::SetAlias(iolstspParmSet[m],strJstSetName);
					existFlag = TRUE;
				}
			}

			//如果更新后已经不存在，则放入删除列表
			if (existFlag == FALSE)
			{
				alistDeleteFstParam.Append(iolstspParmSet[m]);
			}

		}

		//删除已经不存在紧固件的属性描述
		for (int m=1; m <= alistDeleteFstParam.Size(); m++)
		{
			alistDeleteFstParam[m]->GetFather()->Remove(alistDeleteFstParam[m]);
		}
	}

	//更新ZP模型
	PrtService::ObjectUpdate(spPart);

	//RequestDelayedDestruction();
}