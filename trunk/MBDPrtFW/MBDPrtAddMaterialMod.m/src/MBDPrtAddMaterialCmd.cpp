// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// MBDPrtAddMaterialCmd.cpp
// The state chart based command: MBDPrtAddMaterialCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Feb 2011  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDPrtAddMaterialCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDPrtAddMaterialCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::MBDPrtAddMaterialCmd() :
  CATStateCommand ("MBDPrtAddMaterialCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::~MBDPrtAddMaterialCmd()
{
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDPrtAddMaterialCmd::BuildGraph()
{
	CreateMaterialCatalog();
	RequestDelayedDestruction();
}

HRESULT MBDPrtAddMaterialCmd::CreateMaterialCatalog()
{
	HRESULT hr = S_OK;

	//-------------------------------
	//2- Opens the material document 
	//-------------------------------

	CATDocument * pMaterialDocument = NULL ;

	// Opens the user material document
	CATUnicodeString StrODataPath;
	DirFileService::GetCurrentDataPath(StrODataPath);
	CATUnicodeString strCustomMBDMaterial = StrODataPath + "\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial";

	//char * NameMaterial = strCustomMBDMaterial.CastToCharPtr();
	hr = CATDocumentServices::OpenDocument(strCustomMBDMaterial, pMaterialDocument);

	if (SUCCEEDED(hr) )
	{ 
		cout << "Document "<< strCustomMBDMaterial <<" opened OK" << endl ;
	}
	else
	{ 
		PrtService::ShowDlgNotify("错误提示","路径\\intel_a\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial 不存在！");
		cout << "ERROR in opening the document= "<< strCustomMBDMaterial << endl ;
		return hr;
	}

	// Retrieves the CATIMaterialDocument interface
	CATIMaterialDocument *pIMaterialDoc = NULL ;
	hr = pMaterialDocument->QueryInterface(IID_CATIMaterialDocument,(void **) &pIMaterialDoc);
	if ( FAILED(hr) )
	{
		cout << "No material document"<< endl << endl;
		return hr;
	}

	//---------------------------------------------------
	// 5- Retrieves the material to apply to the part
	//---------------------------------------------------

	//---------------------------------------------------
	// 5-1 Retrieves the library of families 
	//---------------------------------------------------
	CATILibraryFeature  *pILibraryFeature = NULL ;
	hr = pIMaterialDoc->GetMaterialLibrary(&pILibraryFeature);

	if ( FAILED(hr) )
	{
		cout << "Pb with the GetMaterialLibrary method "<< endl;
		return hr ;
	}

	// No more need of this interface pointer
	pIMaterialDoc->Release();
	pIMaterialDoc= NULL ;

	// Prints the count of material's family in the library
	int NbFamily = pILibraryFeature->GetFamilyCount();
	cout << "The count of family is="<< NbFamily << endl ;

	if ( 0 == NbFamily )
	{
		// This case must be impossible, because there is
		// always at least one family in the library.
		cout << "There is no family in this catalog"<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 5-2 Retrieves the first family 
	//---------------------------------------------------

	CATIFamilyFeature * pIFamilyFeature = NULL ;
	pIFamilyFeature = pILibraryFeature->GetFamily(1);

	if ( NULL == pIFamilyFeature )
	{
		cout << " The library has no family" << endl ;
		return hr ;
	}

	//No more need of the library feature
	pILibraryFeature->Release();
	pILibraryFeature = NULL ;

	//Prints the name of the first family
	CATUnicodeString NameOfTheFamily ;
	NameOfTheFamily = pIFamilyFeature->GetLabel() ;
	cout << "The name of the first family is ="<< NameOfTheFamily.ConvertToChar() << endl;

	//Prints the count of material is this family
	int NbMaterial = pIFamilyFeature->GetMaterialCount();
	cout << "The count of material is="<< NbMaterial << endl ;

	if ( 0 == NbMaterial )
	{
		// This case can be possible 
		// a family can be empty
		cout << "There is no material in this catalog"<< endl;
		return hr ;
	}
	//---------------------------------------------------
	// 5-3 Retrieves the last material in this family
	//---------------------------------------------------

	CATIMaterialFeature * pIMaterialFeature = NULL ;
	pIMaterialFeature= pIFamilyFeature->GetMaterial(NbMaterial);

	if ( NULL == pIMaterialFeature )
	{
		cout << " The Family has no material" << endl ;
		return hr ;
	}

	// No more need of the family feature
	pIFamilyFeature->Release();
	pIFamilyFeature = NULL ;

	//Prints the name of the last material
	CATUnicodeString NameOfTheMaterial ;
	NameOfTheMaterial = pIMaterialFeature->GetLabel() ;
	cout << "The name of the last material is ="<< NameOfTheMaterial.ConvertToChar() << endl;

	//  [2/20/2011 ev5adm]
	// 添加材料属性信息
	hr = SetMaterialProperty(pIMaterialFeature);


    //  [2/22/2011 ev5adm]
	// 向part文件中part body添加材质 
	hr = ApplyMaterial(pIMaterialFeature);


	// No more need of this pointer
	pIMaterialFeature->Release();
	pIMaterialFeature = NULL ;

	// Remove The Material Document , implicite Open in the step
	hr = CATDocumentServices::Remove (*pMaterialDocument);
	if (SUCCEEDED(hr)) 
	{
		cout << "The material document is closed " << endl ;
	}
	else
	{
		cout << "ERROR in closing material document " << endl ;
		return hr;
	}

	pMaterialDocument = NULL ;

	return hr;
}


HRESULT MBDPrtAddMaterialCmd::ApplyMaterial(CATIMaterialFeature *pIMaterialFeature)
{
	HRESULT hr = S_OK;
	//---------------------------------------------------
	// 1- Retrieves the Part of the document
	//---------------------------------------------------
	CATInit *pInit = NULL ;
	CATDocument *pPartDocument = PrtService::GetPrtDocument();

	hr = pPartDocument->QueryInterface(IID_CATInit,(void **) &pInit);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATInit interface"<< endl;
		return hr ;
	}

	CATIPrtContainer *pIPrtCont = NULL ;
	pIPrtCont = (CATIPrtContainer*) pInit->GetRootContainer("CATIPrtContainer");

	if ( NULL == pIPrtCont )
	{
		cout << "The root container is NULL"<< endl;
		return hr ;
	}

	// No more need of this interface
	pInit->Release();
	pInit = NULL ;

	CATISpecObject_var spPart = pIPrtCont->GetPart();

	if ( NULL_var == spPart )
	{
		cout << "The part is NULL"<< endl;
		return hr ;
	}

	// 获取PartBody
	/*CATIPartRequest_var spPrtRequst = spPart;
	CATBaseUnknown_var  oPartBody;
	spPrtRequst->GetMainBody("MfDefault3DView",oPartBody );*/
	// No more need of this interface
	pIPrtCont->Release();
	pIPrtCont = NULL ;

	//---------------------------------------------------
	// 2- Retrieves the material support of the part 
	//---------------------------------------------------
	CATIMaterialSupport * pIMaterialSupportOnPart = NULL ;
	hr = spPart->QueryInterface(IID_CATIMaterialSupport,(void**) &pIMaterialSupportOnPart);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATIMaterialSupport interface "<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 3- Applies the material on the part: 
	//    The document has only a link on the material
	//---------------------------------------------------
	CATBoolean ApplyWithLink = FALSE ;
	int val1 = ::ApplyMaterialOnSupport(pIMaterialFeature, pIMaterialSupportOnPart,ApplyWithLink);

	if ( 0 != val1 )
	{
		cout << "ApplyMaterialOnSupport with link has the problem="<< val1 << endl;
		return hr;
	}

	return hr;
}

HRESULT MBDPrtAddMaterialCmd::SetMaterialProperty(CATIMaterialFeature * &pIMaterialFeature)
{

	HRESULT hr = S_OK;

	CATISpecObject* piSpecMat = NULL; 
	const CATUnicodeString  iIdentifier = "Analysis";
	piSpecMat = pIMaterialFeature->GetApplicativeSpec( iIdentifier ) ;

	CATIParmPublisher_var spParmPublisher (piSpecMat);
	piSpecMat->Release();
	piSpecMat = NULL;

	CATListValCATISpecObject_var listSpecAttrParm;
	spParmPublisher->GetAllChildren("CATICkeParm",listSpecAttrParm);

    //循环
	for (int i = 1; i <= listSpecAttrParm.Size(); i ++)
	{
		CATICkeParm_var spConverter = listSpecAttrParm[i];
		CATUnicodeString strName = spConverter->Name();

		CATUnicodeString  strShow = spConverter->Show( ); 
		cout <<"Name: "<<strName<<" "<<"Value: "<<strShow<<endl;
	}

	CATIAlias_var spAlias = pIMaterialFeature;
	spAlias->SetAlias("MBDMaterial");

	return hr;
}