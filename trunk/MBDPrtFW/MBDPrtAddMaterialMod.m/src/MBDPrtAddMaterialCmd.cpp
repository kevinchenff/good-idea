// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// MBDPrtAddMaterialCmd.cpp
// The state chart based command: MBDPrtAddMaterialCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Feb 2011  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDPrtAddMaterialCmd.h"
#include "MBDWebservice.h"
#include "CATVisPropertiesValues.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDPrtAddMaterialCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::MBDPrtAddMaterialCmd() :
  CATStateCommand ("MBDPrtAddMaterialCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,m_piDoc(NULL),m_pDlg(NULL),m_pMatParamDlg(NULL)
,m_dDensity(0),m_dPoissonRatio(0),m_dYieldStrength(0),m_iSelectedIndex(-1)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	//判断是否为ZP模型;
	if (IsThisZPPrt(m_strDocName))
	{
		PrtService::ShowDlgNotify("提示","该功能仅能在零件模型中操作，不能在ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}

	//
	m_iValuePrtColor[0]=0;
	m_iValuePrtColor[0]=0;
	m_iValuePrtColor[0]=0;

	//
	m_alsStrMatInfoCATIAName.Append("材料类别");
	m_alsStrMatInfoCATIAName.Append("材料牌号");
	m_alsStrMatInfoCATIAName.Append("材料规格");
	m_alsStrMatInfoCATIAName.Append("材料技术条件");
	m_alsStrMatInfoCATIAName.Append("毛料尺寸");

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::~MBDPrtAddMaterialCmd()
{
	if (m_pDlg != NULL)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg=NULL;
	}

	if (NULL!=m_pMatParamDlg)
	{
		m_pMatParamDlg->RequestDelayedDestruction();
		m_pMatParamDlg=NULL;
	}

	//
	ClearListStrMaterialDetailInfo();
}


void MBDPrtAddMaterialCmd::ClearListStrMaterialDetailInfo()
{
	//
	for (int k=1;k<=m_pListStrMaterialDetailInfo.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrMaterialDetailInfo[k];
		delete TempLstStr;
	}
	//
	m_pListStrMaterialDetailInfo.RemoveAll();
}


//判断是否为ZP模型
BOOL MBDPrtAddMaterialCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart != -1)
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDPrtAddMaterialCmd::BuildGraph()
{
	//
	m_pDlg = new MBDPrtAddMaterialDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow);
	//
	m_pDlg->_AddMainMaterialPB->SetSensitivity(CATDlgDisable);
	m_pDlg->_AddAuxiliaryMaterialPB->SetSensitivity(CATDlgDisable);

	//
	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseDlgCB,
		NULL);
	//
	// 主对话框按钮消息响应
	AddAnalyseNotificationCB (m_pDlg->_SearchPB, 
		m_pDlg->_SearchPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::SearchMaterialCB,
		NULL);
	
	//用户点击添加主材、添加辅材按钮
	// 
	AddAnalyseNotificationCB (m_pDlg->_AddMainMaterialPB, 
		m_pDlg->_AddMainMaterialPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::AddMainMaterialCB,
		NULL);
	// 
	AddAnalyseNotificationCB (m_pDlg->_AddAuxiliaryMaterialPB, 
		m_pDlg->_AddAuxiliaryMaterialPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::AddAuxiliaryMaterialCB,
		NULL);

	//
	//用户点击搜索结果mutillist
	AddAnalyseNotificationCB (m_pDlg->_ResultML, 
		m_pDlg->_ResultML->GetListSelectNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::SearchResultMLSelectedCB,
		NULL);
}

//
void MBDPrtAddMaterialCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	RequestDelayedDestruction();
}

//
HRESULT MBDPrtAddMaterialCmd::CreateMaterialCatalog(CATUnicodeString istrMatTypeName,CATUnicodeString istrMatIdenCode,double idDensity,double idPoissonRatio,double idYieldStrength)
{
	HRESULT hr = S_OK;

	//-------------------------------
	//2- Opens the material document 
	//-------------------------------

	CATDocument * pMaterialDocument = NULL ;

	// Opens the user material document
	CATUnicodeString StrODataPath;
	DirFileService::GetCurrentDataPath(StrODataPath);
	CATUnicodeString strCustomMBDMaterial = StrODataPath + "\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial";

	//char * NameMaterial = strCustomMBDMaterial.CastToCharPtr();
	hr = CATDocumentServices::OpenDocument(strCustomMBDMaterial, pMaterialDocument);

	if (SUCCEEDED(hr) )
	{ 
		cout << "Document "<< strCustomMBDMaterial <<" opened OK" << endl ;
	}
	else
	{ 
		PrtService::ShowDlgNotify("错误提示","路径\\intel_a\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial 不存在！");
		cout << "ERROR in opening the document= "<< strCustomMBDMaterial << endl ;
		return hr;
	}

	// Retrieves the CATIMaterialDocument interface
	CATIMaterialDocument *pIMaterialDoc = NULL ;
	hr = pMaterialDocument->QueryInterface(IID_CATIMaterialDocument,(void **) &pIMaterialDoc);
	if ( FAILED(hr) )
	{
		cout << "No material document"<< endl << endl;
		return hr;
	}

	//---------------------------------------------------
	// 5- Retrieves the material to apply to the part
	//---------------------------------------------------

	//---------------------------------------------------
	// 5-1 Retrieves the library of families 
	//---------------------------------------------------
	CATILibraryFeature  *pILibraryFeature = NULL ;
	hr = pIMaterialDoc->GetMaterialLibrary(&pILibraryFeature);

	if ( FAILED(hr) )
	{
		cout << "Pb with the GetMaterialLibrary method "<< endl;
		return hr ;
	}

	// No more need of this interface pointer
	pIMaterialDoc->Release();
	pIMaterialDoc= NULL ;

	// Prints the count of material's family in the library
	int NbFamily = pILibraryFeature->GetFamilyCount();
	cout << "The count of family is="<< NbFamily << endl ;

	if ( 0 == NbFamily )
	{
		// This case must be impossible, because there is
		// always at least one family in the library.
		cout << "There is no family in this catalog"<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 5-2 Retrieves the first family 
	//---------------------------------------------------

	CATIFamilyFeature * pIFamilyFeature = NULL ;
	pIFamilyFeature = pILibraryFeature->GetFamily(1);

	if ( NULL == pIFamilyFeature )
	{
		cout << " The library has no family" << endl ;
		return hr ;
	}

	//No more need of the library feature
	pILibraryFeature->Release();
	pILibraryFeature = NULL ;

	//Prints the name of the first family
	CATUnicodeString NameOfTheFamily ;
	NameOfTheFamily = pIFamilyFeature->GetLabel() ;
	cout << "The name of the first family is ="<< NameOfTheFamily.ConvertToChar() << endl;

	//Prints the count of material is this family
	int NbMaterial = pIFamilyFeature->GetMaterialCount();
	cout << "The count of material is="<< NbMaterial << endl ;

	if ( 0 == NbMaterial )
	{
		// This case can be possible 
		// a family can be empty
		cout << "There is no material in this catalog"<< endl;
		return hr ;
	}
	//---------------------------------------------------
	// 5-3 Retrieves the right name of material in this family
	//---------------------------------------------------
	CATBoolean existFlag = FALSE;
	CATIMaterialFeature * pIMaterialFeature = NULL ;
	for (int i=1; i<= NbMaterial; i++)
	{
		CATIMaterialFeature * pIMaterialFeaIndex = NULL ;
		pIMaterialFeaIndex= pIFamilyFeature->GetMaterial(i);
		//
		//Prints the name of the last material
		CATUnicodeString NameOfTheMaterial ;
		NameOfTheMaterial = pIMaterialFeaIndex->GetLabel() ;
		//
		if (NameOfTheMaterial==istrMatTypeName)
		{
			pIMaterialFeature = pIMaterialFeaIndex;
			pIMaterialFeaIndex->Release();
			pIMaterialFeaIndex=NULL;
			//
			existFlag = TRUE;
			break;
		}
	}
	//
	if (existFlag == FALSE)
	{
		PrtService::ShowDlgNotify("错误信息","文件"+strCustomMBDMaterial+"不存在名称为" + istrMatTypeName + "材质，请联系系统管理员！");
		PrtService::ShowDlgNotify("提示信息","系统默认采用第一个材质球作为替代材质赋予材料属性！");
		//
		pIMaterialFeature = pIFamilyFeature->GetMaterial(1);
	}

	//
	if ( NULL == pIMaterialFeature )
	{
		cout << " The Family has no material" << endl ;
		return hr ;
	}

	// No more need of the family feature
	pIFamilyFeature->Release();
	pIFamilyFeature = NULL ;

	

	//  [2/20/2011 ev5adm]
	// 添加材料属性信息
	hr = SetMaterialProperty(pIMaterialFeature,istrMatIdenCode,idDensity,idPoissonRatio,idYieldStrength);


    //  [2/22/2011 ev5adm]
	// 向part文件中part body添加材质 
	hr = ApplyMaterial(pIMaterialFeature);


	// No more need of this pointer
	pIMaterialFeature->Release();
	pIMaterialFeature = NULL ;

	// Remove The Material Document , implicite Open in the step
	hr = CATDocumentServices::Remove (*pMaterialDocument);
	if (SUCCEEDED(hr)) 
	{
		cout << "The material document is closed " << endl ;
	}
	else
	{
		cout << "ERROR in closing material document " << endl ;
		return hr;
	}

	pMaterialDocument = NULL ;

	return hr;
}


HRESULT MBDPrtAddMaterialCmd::ApplyMaterial(CATIMaterialFeature *pIMaterialFeature)
{
	HRESULT hr = S_OK;
	//---------------------------------------------------
	// 1- Retrieves the Part of the document
	//---------------------------------------------------
	CATInit *pInit = NULL ;
	CATDocument *pPartDocument = PrtService::GetPrtDocument();

	hr = pPartDocument->QueryInterface(IID_CATInit,(void **) &pInit);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATInit interface"<< endl;
		return hr ;
	}

	CATIPrtContainer *pIPrtCont = NULL ;
	pIPrtCont = (CATIPrtContainer*) pInit->GetRootContainer("CATIPrtContainer");

	if ( NULL == pIPrtCont )
	{
		cout << "The root container is NULL"<< endl;
		return hr ;
	}

	// No more need of this interface
	pInit->Release();
	pInit = NULL ;

	CATISpecObject_var spPart = pIPrtCont->GetPart();

	if ( NULL_var == spPart )
	{
		cout << "The part is NULL"<< endl;
		return hr ;
	}

	// 获取PartBody
	CATIPartRequest_var spPrtRequst = spPart;
	CATBaseUnknown_var  oPartBody;
	spPrtRequst->GetMainBody("MfDefault3DView",oPartBody );
	// No more need of this interface
	pIPrtCont->Release();
	pIPrtCont = NULL ;

	//---------------------------------------------------
	// 2- Retrieves the material support of the part 
	//---------------------------------------------------
	CATIMaterialSupport * pIMaterialSupportOnPart = NULL ;
	hr = oPartBody->QueryInterface(IID_CATIMaterialSupport,(void**) &pIMaterialSupportOnPart);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATIMaterialSupport interface "<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 3- Applies the material on the part: 
	//    The document has only a link on the material
	//---------------------------------------------------
	CATBoolean ApplyWithLink = FALSE ;
	int val1 = ::ApplyMaterialOnSupport(pIMaterialFeature, pIMaterialSupportOnPart,ApplyWithLink);

	if ( 0 != val1 )
	{
		cout << "ApplyMaterialOnSupport with link has the problem="<< val1 << endl;
		return hr;
	}

	return hr;
}

HRESULT MBDPrtAddMaterialCmd::SetMaterialProperty(CATIMaterialFeature * &pIMaterialFeature,CATUnicodeString istrMatIdenCode,double idDensity,double idPoissonRatio,double idYieldStrength)
{

	HRESULT hr = S_OK;

	CATISpecObject* piSpecMat = NULL; 
	const CATUnicodeString  iIdentifier = "Analysis";
	piSpecMat = pIMaterialFeature->GetApplicativeSpec( iIdentifier ) ;

	CATIParmPublisher_var spParmPublisher (piSpecMat);
	piSpecMat->Release();
	piSpecMat = NULL;

	CATListValCATISpecObject_var listSpecAttrParm;
	spParmPublisher->GetAllChildren("CATICkeParm",listSpecAttrParm);

    //循环
	for (int i = 1; i <= listSpecAttrParm.Size(); i ++)
	{
		CATICkeParm_var spConverter = listSpecAttrParm[i];
		CATUnicodeString strName = spConverter->Name();

		int BenginNum = strName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
		int StrLength = strName.GetLengthInChar();
		CATUnicodeString StrParaName = strName.SubString(BenginNum+1,StrLength-BenginNum-1);

		CATUnicodeString  strShow = spConverter->Show( ); 
		cout <<"Name: "<<StrParaName<<" "<<"Value: "<<strShow<<endl;

		//
		if (StrParaName == "Density")
		{
			spConverter->Valuate(idDensity);
		}
		//
		if (StrParaName == "Poisson Ratio")
		{
			spConverter->Valuate(idPoissonRatio);
		}
		//
		if (StrParaName == "Yield Strength")
		{
			spConverter->Valuate(idYieldStrength);
		}
	}

	CATIAlias_var spAlias = pIMaterialFeature;
	spAlias->SetAlias(istrMatIdenCode);

	return hr;
}


//点击所选ML行的响应函数
void MBDPrtAddMaterialCmd::SearchResultMLSelectedCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空备注信息
	m_pDlg->_ResultDetailEditor->ClearLine();

	//获取所选信息
	int  iSize = m_pDlg->_ResultML->GetSelectCount();
	if (iSize != 0 )
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pDlg->_ResultML->GetSelect(ioTabRow,iSize);
		//cout<<"总共有"<<iSize<<"个数据，选中编号为："<<ioTabRow[0]<<endl;

		for (int i=0; i< MAXPROPERTYINDEX; i++)
		{
			CATUnicodeString strContent;
			m_pDlg->_ResultML->GetColumnItem(i,strContent,ioTabRow[0]);
			CATUnicodeString strTemp = m_pDlg->m_lstStrPropertyName[i] + " = " + strContent /*+ "\\n"*/;

			//
			m_pDlg->_ResultDetailEditor->SetLine(strTemp);
		}

		//获取所选行号	
		m_iSelectedIndex = ioTabRow[0];


		//对按钮状态的控制
		m_pDlg->_AddMainMaterialPB->SetSensitivity(CATDlgEnable);
		m_pDlg->_AddAuxiliaryMaterialPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pDlg->_AddMainMaterialPB->SetSensitivity(CATDlgDisable);
		m_pDlg->_AddAuxiliaryMaterialPB->SetSensitivity(CATDlgDisable);
	}
}

HRESULT MBDPrtAddMaterialCmd::GetSelectedMaterialInfo()
{
	HRESULT rc=E_FAIL;
	//获取所需材料信息，对于毛料尺寸，最后选主材时构建
	CATUnicodeString strContent;
	m_pDlg->_ResultML->GetColumnItem(2,strContent,m_iSelectedIndex);
	m_alsStrMatInfoCATIAValue.Append(strContent);
	m_pDlg->_ResultML->GetColumnItem(4,strContent,m_iSelectedIndex);
	m_alsStrMatInfoCATIAValue.Append(strContent);
	m_pDlg->_ResultML->GetColumnItem(9,strContent,m_iSelectedIndex);
	m_alsStrMatInfoCATIAValue.Append(strContent);
	m_pDlg->_ResultML->GetColumnItem(5,strContent,m_iSelectedIndex);
	m_alsStrMatInfoCATIAValue.Append(strContent);

	//获取颜色
	m_pDlg->_ResultML->GetColumnItem(17,strContent,m_iSelectedIndex);
	CATListValCATUnicodeString alsStrColor;
	CHandleString::StringToVector(strContent,",",alsStrColor);
	if (alsStrColor.Size()==3)
	{
		for (int i=1; i<=3; i++)
		{
			alsStrColor[i].ConvertToNum(m_iValuePrtColor + i-1);
		}

		//
		cout<<"m_iValuePrtColor[0] "<<m_iValuePrtColor[0]<<endl;
		cout<<"m_iValuePrtColor[1] "<<m_iValuePrtColor[1]<<endl;
		cout<<"m_iValuePrtColor[2] "<<m_iValuePrtColor[2]<<endl;
	}	
	else
	{
		PrtService:ShowDlgNotify("错误信息","该行数据颜色信息格式错误，请修正！");
		return rc;
	}

	//获取密度
	m_pDlg->_ResultML->GetColumnItem(16,strContent,m_iSelectedIndex);
	strContent.ConvertToNum(&m_dDensity);

	//伸长率
	m_pDlg->_ResultML->GetColumnItem(13,strContent,m_iSelectedIndex);
	strContent.ConvertToNum(&m_dPoissonRatio);

	//抗拉强度
	m_pDlg->_ResultML->GetColumnItem(12,strContent,m_iSelectedIndex);
	strContent.ConvertToNum(&m_dYieldStrength); 

	return S_OK;
}

//
void MBDPrtAddMaterialCmd::SearchMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//初始化状态
	ClearListStrMaterialDetailInfo();
	//
	m_pDlg->_ResultDetailEditor->ClearLine();
	m_pDlg->_ResultML->ClearLine();
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= m_listStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<m_listStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);

		//计算以3为倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);									
				}

				//
				for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
				{
					m_pDlg->_ResultML->SetColumnItem(i-1,(*LstStrAtrrValue01)[k]);
				}
			}

		}

		//			
	}

	//设置显示状态
	m_pDlg->_AddMainMaterialPB->SetSensitivity(CATDlgDisable);
	m_pDlg->_AddAuxiliaryMaterialPB->SetSensitivity(CATDlgDisable);
}

void MBDPrtAddMaterialCmd::AddAuxiliaryMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	CATUnicodeString strAuxiliaryMaterialValue;
	m_pDlg->_ResultML->GetColumnItem(0,strAuxiliaryMaterialValue,m_iSelectedIndex);
	//
	CATISpecObject_var spGSMTool = NULL_var;
	PrtService::ObtainGSMTool(m_piDoc,"消耗辅助材料",spGSMTool);
	if (spGSMTool != NULL_var)
	{
		//
		CATListValCATUnicodeString lststrJstTypeInfoName,lststrJstTypeInfoValue;
		lststrJstTypeInfoName.Append("消耗辅助材料");
		//
		PrtService::GetSpecObjCertainParams(spGSMTool,lststrJstTypeInfoName,lststrJstTypeInfoValue);
		//
		CATUnicodeString strValue = lststrJstTypeInfoValue[1];
		CATListValCATUnicodeString lststrResult;
		CHandleString::StringToVector(strValue,"|",lststrResult);
		//
		CATBoolean existFlag = FALSE;
		for (int i=1; i<= lststrResult.Size(); i++)
		{
			if (strAuxiliaryMaterialValue == lststrResult[i])
			{
				existFlag=TRUE;
				break;
			}
		}

		if (existFlag==FALSE)
		{
			lststrResult.Append(strAuxiliaryMaterialValue);
		}

		//
		CATUnicodeString strNewValue;
		for (int i1=1; i1 <= lststrResult.Size(); i1++)
		{
			strNewValue += lststrResult[i1];
			if (i1 != lststrResult.Size())
			{
				strNewValue += "|";
			}
		}
		//
		lststrJstTypeInfoValue[1]=strNewValue;
		//挂载测试参数
		PrtService::ModifySpecObjCertainParams(m_piDoc,spGSMTool,lststrJstTypeInfoName,lststrJstTypeInfoValue);
	}
	else
	{
		PrtService::ShowDlgNotify("错误信息","未能找到“消耗辅助材料”几何图形集！");
	}
}


//添加主材信息
void MBDPrtAddMaterialCmd::AddMainMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//
	if (m_pMatParamDlg == NULL)
	{
		m_pMatParamDlg = new MBDPrtMainMaterialParamDlg();
		m_pMatParamDlg->Build();
		m_pMatParamDlg->SetVisibility(CATDlgShow);
	}
	else
	{
		m_pMatParamDlg->SetVisibility(CATDlgShow);
	}
	//

	// 消息响应
	AddAnalyseNotificationCB (m_pMatParamDlg, 
		m_pMatParamDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseMatParamDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pMatParamDlg, 
		m_pMatParamDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseMatParamDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pMatParamDlg, 
		m_pMatParamDlg->GetDiaOKNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::OkMatParamDlgCB,
		NULL);
	//
}


//辅助框响应函数
void MBDPrtAddMaterialCmd::CloseMatParamDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pMatParamDlg->SetVisibility(CATDlgHide);
}

void MBDPrtAddMaterialCmd::OkMatParamDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//获取材料信息
	HRESULT rc = GetSelectedMaterialInfo();	
	//
	if (SUCCEEDED(rc))
	{
		//获得尺寸参数
		double dLength = m_pMatParamDlg->_HeigthSpinner->GetValue();
		dLength *= 1000;
		double dWidth = m_pMatParamDlg->_WidthSpinner->GetValue();
		dWidth *= 1000;
		double dHeight = m_pMatParamDlg->_HeigthSpinner->GetValue();
		dHeight *= 1000;
		//
		CATUnicodeString strSize,strTemp01,strTemp02,strTemp03;
		strTemp01.BuildFromNum(dLength);
		strTemp02.BuildFromNum(dWidth);
		strTemp03.BuildFromNum(dHeight);
		strSize = strTemp01+"mm"+"x"+strTemp02+"mm"+"x"+strTemp03 +"mm";
		//
		m_alsStrMatInfoCATIAValue.Append(strSize);
		//
		//获取材料描述几何图形集
		CATISpecObject_var spGSMTool = NULL_var;
		PrtService::ObtainGSMTool(m_piDoc,"材料描述",spGSMTool);
		if (spGSMTool != NULL_var)
		{
			//挂载测试参数
			PrtService::ModifySpecObjCertainParams(m_piDoc,spGSMTool,m_alsStrMatInfoCATIAName,m_alsStrMatInfoCATIAValue);
			//赋值材质球
			CATUnicodeString strMaterialCode;
			m_pDlg->_ResultML->GetColumnItem(0,strMaterialCode,m_iSelectedIndex);
			CreateMaterialCatalog(m_alsStrMatInfoCATIAValue[1],strMaterialCode,m_dDensity,m_dPoissonRatio,m_dYieldStrength);
			//赋值颜色属性
			CATIPrtContainer *opiRootContainer = NULL;
			PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
			//获取PART
			CATISpecObject_var spPart = opiRootContainer->GetPart();
			if (spPart != NULL_var)
			{
				CATIPartRequest_var spPrtRequest(spPart);

				//获取main body
				CATISpecObject_var spMainBody ;
				spPrtRequest->GetMainBody("MfDefault3DView",spMainBody);
				//更改MAINBODY颜色
				CATVisPropertiesValues Attribut;
				Attribut.SetColor(m_iValuePrtColor[0],m_iValuePrtColor[1],m_iValuePrtColor[2]);
				//
				PrtService::SetSpecGraphProperty(spMainBody,Attribut,CATVPColor,CATVPMesh);
			}
			//
			RequestDelayedDestruction();
		}
		else
		{
			PrtService::ShowDlgNotify("错误信息","未能找到“材料描述”几何图形集！");
			m_pMatParamDlg->SetVisibility(CATDlgHide);
		}
	}
	else
	{
		m_pMatParamDlg->SetVisibility(CATDlgHide);		
	}
}