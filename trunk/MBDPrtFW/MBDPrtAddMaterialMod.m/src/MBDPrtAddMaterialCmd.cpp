// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// MBDPrtAddMaterialCmd.cpp
// The state chart based command: MBDPrtAddMaterialCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Feb 2011  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDPrtAddMaterialCmd.h"
#include "MBDWebservice.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDPrtAddMaterialCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::MBDPrtAddMaterialCmd() :
  CATStateCommand ("MBDPrtAddMaterialCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
,m_piDoc(NULL),m_pDlg(NULL)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	//判断是否为ZP模型;
	if (IsThisZPPrt(m_strDocName))
	{
		PrtService::ShowDlgNotify("提示","该功能仅能在零件模型中操作，不能在ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDPrtAddMaterialCmd::~MBDPrtAddMaterialCmd()
{
	if (m_pDlg != NULL)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg=NULL;
	}
}


//判断是否为ZP模型
BOOL MBDPrtAddMaterialCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart != -1)
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDPrtAddMaterialCmd::BuildGraph()
{
	//
	m_pDlg = new MBDPrtAddMaterialDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow);
	//
	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::CloseDlgCB,
		NULL);
	//
	// 主对话框按钮消息响应
	AddAnalyseNotificationCB (m_pDlg->_SearchPB, 
		m_pDlg->_SearchPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::SearchMaterialCB,
		NULL);
	// 
	AddAnalyseNotificationCB (m_pDlg->_AddMainMaterialPB, 
		m_pDlg->_AddMainMaterialPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::AddMainMaterialCB,
		NULL);
	// 
	AddAnalyseNotificationCB (m_pDlg->_AddAuxiliaryMaterialPB, 
		m_pDlg->_AddAuxiliaryMaterialPB->GetPushBActivateNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::AddAuxiliaryMaterialCB,
		NULL);

	//
	//用户点击搜索结果mutillist
	AddAnalyseNotificationCB (m_pDlg->_ResultML, 
		m_pDlg->_ResultML->GetListSelectNotification(),
		(CATCommandMethod)&MBDPrtAddMaterialCmd::SearchResultMLSelectedCB,
		NULL);


}

//
void MBDPrtAddMaterialCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	RequestDelayedDestruction();
}

//
HRESULT MBDPrtAddMaterialCmd::CreateMaterialCatalog()
{
	HRESULT hr = S_OK;

	//-------------------------------
	//2- Opens the material document 
	//-------------------------------

	CATDocument * pMaterialDocument = NULL ;

	// Opens the user material document
	CATUnicodeString StrODataPath;
	DirFileService::GetCurrentDataPath(StrODataPath);
	CATUnicodeString strCustomMBDMaterial = StrODataPath + "\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial";

	//char * NameMaterial = strCustomMBDMaterial.CastToCharPtr();
	hr = CATDocumentServices::OpenDocument(strCustomMBDMaterial, pMaterialDocument);

	if (SUCCEEDED(hr) )
	{ 
		cout << "Document "<< strCustomMBDMaterial <<" opened OK" << endl ;
	}
	else
	{ 
		PrtService::ShowDlgNotify("错误提示","路径\\intel_a\\KTCustomConfig\\MBDMaterial\\MBDMaterial.CATMaterial 不存在！");
		cout << "ERROR in opening the document= "<< strCustomMBDMaterial << endl ;
		return hr;
	}

	// Retrieves the CATIMaterialDocument interface
	CATIMaterialDocument *pIMaterialDoc = NULL ;
	hr = pMaterialDocument->QueryInterface(IID_CATIMaterialDocument,(void **) &pIMaterialDoc);
	if ( FAILED(hr) )
	{
		cout << "No material document"<< endl << endl;
		return hr;
	}

	//---------------------------------------------------
	// 5- Retrieves the material to apply to the part
	//---------------------------------------------------

	//---------------------------------------------------
	// 5-1 Retrieves the library of families 
	//---------------------------------------------------
	CATILibraryFeature  *pILibraryFeature = NULL ;
	hr = pIMaterialDoc->GetMaterialLibrary(&pILibraryFeature);

	if ( FAILED(hr) )
	{
		cout << "Pb with the GetMaterialLibrary method "<< endl;
		return hr ;
	}

	// No more need of this interface pointer
	pIMaterialDoc->Release();
	pIMaterialDoc= NULL ;

	// Prints the count of material's family in the library
	int NbFamily = pILibraryFeature->GetFamilyCount();
	cout << "The count of family is="<< NbFamily << endl ;

	if ( 0 == NbFamily )
	{
		// This case must be impossible, because there is
		// always at least one family in the library.
		cout << "There is no family in this catalog"<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 5-2 Retrieves the first family 
	//---------------------------------------------------

	CATIFamilyFeature * pIFamilyFeature = NULL ;
	pIFamilyFeature = pILibraryFeature->GetFamily(1);

	if ( NULL == pIFamilyFeature )
	{
		cout << " The library has no family" << endl ;
		return hr ;
	}

	//No more need of the library feature
	pILibraryFeature->Release();
	pILibraryFeature = NULL ;

	//Prints the name of the first family
	CATUnicodeString NameOfTheFamily ;
	NameOfTheFamily = pIFamilyFeature->GetLabel() ;
	cout << "The name of the first family is ="<< NameOfTheFamily.ConvertToChar() << endl;

	//Prints the count of material is this family
	int NbMaterial = pIFamilyFeature->GetMaterialCount();
	cout << "The count of material is="<< NbMaterial << endl ;

	if ( 0 == NbMaterial )
	{
		// This case can be possible 
		// a family can be empty
		cout << "There is no material in this catalog"<< endl;
		return hr ;
	}
	//---------------------------------------------------
	// 5-3 Retrieves the last material in this family
	//---------------------------------------------------

	CATIMaterialFeature * pIMaterialFeature = NULL ;
	pIMaterialFeature= pIFamilyFeature->GetMaterial(NbMaterial);

	if ( NULL == pIMaterialFeature )
	{
		cout << " The Family has no material" << endl ;
		return hr ;
	}

	// No more need of the family feature
	pIFamilyFeature->Release();
	pIFamilyFeature = NULL ;

	//Prints the name of the last material
	CATUnicodeString NameOfTheMaterial ;
	NameOfTheMaterial = pIMaterialFeature->GetLabel() ;
	cout << "The name of the last material is ="<< NameOfTheMaterial.ConvertToChar() << endl;

	//  [2/20/2011 ev5adm]
	// 添加材料属性信息
	hr = SetMaterialProperty(pIMaterialFeature);


    //  [2/22/2011 ev5adm]
	// 向part文件中part body添加材质 
	hr = ApplyMaterial(pIMaterialFeature);


	// No more need of this pointer
	pIMaterialFeature->Release();
	pIMaterialFeature = NULL ;

	// Remove The Material Document , implicite Open in the step
	hr = CATDocumentServices::Remove (*pMaterialDocument);
	if (SUCCEEDED(hr)) 
	{
		cout << "The material document is closed " << endl ;
	}
	else
	{
		cout << "ERROR in closing material document " << endl ;
		return hr;
	}

	pMaterialDocument = NULL ;

	return hr;
}


HRESULT MBDPrtAddMaterialCmd::ApplyMaterial(CATIMaterialFeature *pIMaterialFeature)
{
	HRESULT hr = S_OK;
	//---------------------------------------------------
	// 1- Retrieves the Part of the document
	//---------------------------------------------------
	CATInit *pInit = NULL ;
	CATDocument *pPartDocument = PrtService::GetPrtDocument();

	hr = pPartDocument->QueryInterface(IID_CATInit,(void **) &pInit);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATInit interface"<< endl;
		return hr ;
	}

	CATIPrtContainer *pIPrtCont = NULL ;
	pIPrtCont = (CATIPrtContainer*) pInit->GetRootContainer("CATIPrtContainer");

	if ( NULL == pIPrtCont )
	{
		cout << "The root container is NULL"<< endl;
		return hr ;
	}

	// No more need of this interface
	pInit->Release();
	pInit = NULL ;

	CATISpecObject_var spPart = pIPrtCont->GetPart();

	if ( NULL_var == spPart )
	{
		cout << "The part is NULL"<< endl;
		return hr ;
	}

	// 获取PartBody
	CATIPartRequest_var spPrtRequst = spPart;
	CATBaseUnknown_var  oPartBody;
	spPrtRequst->GetMainBody("MfDefault3DView",oPartBody );
	// No more need of this interface
	pIPrtCont->Release();
	pIPrtCont = NULL ;

	//---------------------------------------------------
	// 2- Retrieves the material support of the part 
	//---------------------------------------------------
	CATIMaterialSupport * pIMaterialSupportOnPart = NULL ;
	hr = oPartBody->QueryInterface(IID_CATIMaterialSupport,(void**) &pIMaterialSupportOnPart);
	if ( FAILED(hr) )
	{
		cout << "Pb with the CATIMaterialSupport interface "<< endl;
		return hr ;
	}

	//---------------------------------------------------
	// 3- Applies the material on the part: 
	//    The document has only a link on the material
	//---------------------------------------------------
	CATBoolean ApplyWithLink = FALSE ;
	int val1 = ::ApplyMaterialOnSupport(pIMaterialFeature, pIMaterialSupportOnPart,ApplyWithLink);

	if ( 0 != val1 )
	{
		cout << "ApplyMaterialOnSupport with link has the problem="<< val1 << endl;
		return hr;
	}

	return hr;
}

HRESULT MBDPrtAddMaterialCmd::SetMaterialProperty(CATIMaterialFeature * &pIMaterialFeature)
{

	HRESULT hr = S_OK;

	CATISpecObject* piSpecMat = NULL; 
	const CATUnicodeString  iIdentifier = "Analysis";
	piSpecMat = pIMaterialFeature->GetApplicativeSpec( iIdentifier ) ;

	CATIParmPublisher_var spParmPublisher (piSpecMat);
	piSpecMat->Release();
	piSpecMat = NULL;

	CATListValCATISpecObject_var listSpecAttrParm;
	spParmPublisher->GetAllChildren("CATICkeParm",listSpecAttrParm);

    //循环
	for (int i = 1; i <= listSpecAttrParm.Size(); i ++)
	{
		CATICkeParm_var spConverter = listSpecAttrParm[i];
		CATUnicodeString strName = spConverter->Name();

		int BenginNum = strName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward); 
		int StrLength = strName.GetLengthInChar();
		CATUnicodeString StrParaName = strName.SubString(BenginNum+1,StrLength-BenginNum-1);

		CATUnicodeString  strShow = spConverter->Show( ); 
		cout <<"Name: "<<StrParaName<<" "<<"Value: "<<strShow<<endl;

		if (StrParaName == "Density")
		{
			spConverter->Valuate(1111);
		}
	}

	CATIAlias_var spAlias = pIMaterialFeature;
	spAlias->SetAlias("MBDMaterial");

	return hr;
}


//修改该部分内容，添加右键更改功能
void MBDPrtAddMaterialCmd::SearchResultMLSelectedCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空备注信息
	m_pDlg->_ResultDetailEditor->ClearLine();

	//获取所选信息
	int  iSize = m_pDlg->_ResultML->GetSelectCount();
	if (iSize != 0 )
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pDlg->_ResultML->GetSelect(ioTabRow,iSize);
		//cout<<"总共有"<<iSize<<"个数据，选中编号为："<<ioTabRow[0]<<endl;

		//显示备注信息
		/*if (m_strListOfSearchResult03[ioTabRow[0] + 1] != NULL)
		{
			m_pDlg->_ResultDetailEditor->SetText(m_strListOfSearchResult03[ioTabRow[0] + 1]);
			m_selectResultLine = ioTabRow[0] + 1;
		}*/

		//对按钮状态的控制
		//m_piDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		//m_pDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);
	}
}

//
void MBDPrtAddMaterialCmd::SearchMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//存在BUG问题，如果不判断对话框显示状态，会出现多次运行的可能.
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= m_listStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<m_listStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/

	//查询WEBSERVICE获取搜选结果
	m_pDlg->_ResultML->ClearLine();
	m_pDlg->_ResultDetailEditor->ClearLine();

	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//计算以3为倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-2)/3);

		if (cyclecount >= 1)
		{

			for (int i = 1; i <= cyclecount; i++)
			{
				/*m_strListOfSearchResult01.Append(strListOfSearchResult[i*3]);
				m_strListOfSearchResult02.Append(strListOfSearchResult[i*3 + 1]);

				CATUnicodeString strConvert = strListOfSearchResult[i*3 + 2];
				if (strConvert == "########")
				{
					strConvert = NULL;
					m_strListOfSearchResult03.Append(strConvert);
				}
				else
					m_strListOfSearchResult03.Append(strConvert);*/					

			}

		}

	}

	//填写结果项
	//if (m_strListOfSearchResult01.Size() > 0)
	//{

	//	for (int i = 1; i <= m_strListOfSearchResult01.Size();i++)
	//	{
	//		CATUnicodeString IndexNum;
	//		IndexNum.BuildFromNum(i);
	//		/*m_piDlg->_SearchResultML->SetColumnItem(0,IndexNum);
	//		m_piDlg->_SearchResultML->SetColumnItem(1,m_strListOfSearchResult01[i]);
	//		m_piDlg->_SearchResultML->SetColumnItem(2,m_strListOfSearchResult02[i]);*/
	//	}

	//}

	//设置显示状态
	//m_pDlg->_InsertToGSMToolPB->SetSensitivity(CATDlgDisable);
}

void MBDPrtAddMaterialCmd::AddMainMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

}
void MBDPrtAddMaterialCmd::AddAuxiliaryMaterialCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

}

