// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// PrtFstPointsCmd.h
// The state chart based command: PrtFstPointsCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   STATECOMMAND
//End CAA2 Wizard Generation Report
//
//  Nov 2011  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef PrtFstPointsCmd_H
#define PrtFstPointsCmd_H

#include "ktPubHeaders.h"
#include "CATStateCommand.h"
#include "CATBoolean.h"
#include "PrtFstPointsDlg.h"
#include "CATFeatureImportAgent.h"
#include "PrtFstPointRepeatPanelDlg.h"


//----------------------------------------------------------------------

/**
 * Describe your command here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 * <p>
 * refer to programming resources of Dialog engine framework.
 * (consult base class description).
 */
class PrtFstPointsCmd: public CATStateCommand
{
  // Allows customization/internationalization of command's messages
  // ---------------------------------------------------------------
  DeclareResource( PrtFstPointsCmd, CATStateCommand )

  public:

  PrtFstPointsCmd();
  virtual ~PrtFstPointsCmd();

    /**
     * Defines the command automata.
     * <br>
     * <i>(states, transitions and agents)</i>
     */
  virtual void     BuildGraph();

  //消息框响应函数
  void OkDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data);
  void CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data);
  //
  void OnPREVIEWCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data);
  void OnReverseDirePBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data);  
  //

  CATBoolean ChooseCurve( void *UsefulData);
  CATBoolean ChooseSurf( void *UsefulData);
  //
  CATBoolean ActiveCurveSL( void *UsefulData);
  CATBoolean ActiveSurfSL( void *UsefulData);
  //
  BOOL IsThisZPPrt(CATUnicodeString istrDocName);
  //
  void CreatePoints();
  
  private:

	  PrtFstPointsDlg *m_pDlg;
	  PrtFstPointRepeatPanelDlg *m_pRepeatPanelDlg;

	  //文档指针
	  CATDocument *m_piDoc;
	  CATUnicodeString m_strDocName;

	  //定义代理
	  CATFeatureImportAgent *m_pCurveAgt,*m_pSurfAgt;
	  CATDialogAgent *m_pCurveSLAgt,*m_pSurfSLAgt;

	  //定义数据列表环境变量
	  CATListValCATISpecObject_var m_lstSpecCurves;
	  CATISpecObject_var m_SpecSurfs;

	  //
	  CATISpecObject_var m_spPointGSMTool;
	  CATISpecObject_var m_spCurvePar;
	  CATListValCATISpecObject_var m_alstSpecPoint;

	  //用户所选值
	  double m_dCurveOffsetValue,m_dPointsCount,m_dPointDistance,m_dType;

};

//----------------------------------------------------------------------

#endif
