// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// PrtFstDesignCmd.cpp
// The state chart based command: PrtFstDesignCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2011  Creation: Code generated by the CAA wizard  xyuser
//===================================================================
#include "PrtFstDesignCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"
#include "CATFace.h"
#include "CATSurface.h"
#include "CATTopLineOperator.h"
#include "CATIMeasurableLine.h"
#include "CATIGSMCircleCenterAxis.h"
#include "CATIBodyRequest.h"

//拓扑计算时，最大线长
const double DTOPLOGLENGTH = 100.0;

#include "CATCreateExternalObject.h"
CATCreateClass( PrtFstDesignCmd);

//全局变量，定义线形 和 点形状
const double LINEWIDTH=3;
const double POINTSYMBOL=7;

const double LOWERMIN=0.8;
const double UPPERMAX=1.2;
const double LOWERBOLTMIN = 0.5;


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
PrtFstDesignCmd::PrtFstDesignCmd() :
  CATStateCommand ("PrtFstDesignCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,m_pDlg(NULL),m_piDoc(NULL),m_piFirstSurfSLAgt(NULL),m_piSecSurfSLAgt(NULL),m_piPointSLAgt(NULL)
  ,m_piFirstSurfAgt(NULL),m_piSecSurfAgt(NULL),m_piPointsAgt(NULL),m_piPrdSLAgt(NULL),m_piPointGSMPBAgt(NULL),m_piPrdAgt(NULL)
  ,m_piPointGSMAgt(NULL),m_piISO(NULL),m_dJstThickMax(0),m_dJstThickMin(0),m_dFirstPrdThickMin(0),m_dFirstPrdThickMax(0),m_userChoosedFlag(FALSE)
  ,m_dFstMaxIndex(0),m_pFstAccessDlg(NULL),m_pFstFreeStyleDlg(NULL),m_pFstKnowledgeBasedDlg(NULL)
  ,m_pFstFreeStyleMainBoltDlg(NULL),m_pFstFreeStyleNutDlg(NULL),m_pFstFreeStyleWasherDlg(NULL)
  ,m_pFstKnowledgeMainBoltDlg(NULL),m_pFstKnowledgeNutDlg(NULL),m_pFstKnowledgeWasherDlg(NULL)
  ,m_pContextMenu(NULL),m_pPushItemSelect(NULL),m_IndexChoosedWasher(-1),m_dHeadThickness(0),m_dFstDiameterValue(0)
  ,m_dNutFstThickValue(0),m_dSearchedWasherThick(0),m_dChoosedWasherThick(0),m_dWasherFstThickValueStart(0),m_dWasherFstThickValueEnd(0)
  ,m_pFstFreeStyleShelterDlg(NULL),m_pShelterContextMenu(NULL),m_pShelterPushItemSelect(NULL),m_pFstKnowledgeShelterDlg(NULL)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	//
	m_piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != m_piEditor)
	{
		m_piHSO = m_piEditor->GetHSO();
		m_piHSO->Empty();

		m_piISO = m_piEditor->GetISO();
		m_piISO->Empty();
	}

	//判断是否为ZP模型;
	if ((!IsThisZPPrt(m_strDocName))||(!PrdService::IsContextualPrd()))
	{
		PrtService::ShowDlgNotify("提示","该功能仅在装配上下文环境且ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
PrtFstDesignCmd::~PrtFstDesignCmd()
{
	if (m_pDlg != NULL)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}

	if (NULL!=m_piPointsAgt)
	{
		m_piPointsAgt->RequestDelayedDestruction();
		m_piPointsAgt=NULL;
	}

	if (NULL!=m_piFirstSurfAgt)
	{
		m_piFirstSurfAgt->RequestDelayedDestruction();
		m_piFirstSurfAgt=NULL;
	}

	if (NULL!=m_piSecSurfAgt)
	{
		m_piSecSurfAgt->RequestDelayedDestruction();
		m_piSecSurfAgt=NULL;
	}

	if (NULL!=m_piFirstSurfSLAgt)
	{
		m_piFirstSurfSLAgt->RequestDelayedDestruction();
		m_piFirstSurfSLAgt=NULL;
	}
	if (NULL!=m_piSecSurfSLAgt)
	{
		m_piSecSurfSLAgt->RequestDelayedDestruction();
		m_piSecSurfSLAgt=NULL;
	}
	if (NULL!=m_piPointSLAgt)
	{
		m_piPointSLAgt->RequestDelayedDestruction();
		m_piPointSLAgt=NULL;
	}	

	if (NULL!=m_piPrdSLAgt)
	{
		m_piPrdSLAgt->RequestDelayedDestruction();
		m_piPrdSLAgt=NULL;
	}	

	if (NULL!=m_piPointGSMPBAgt)
	{
		m_piPointGSMPBAgt->RequestDelayedDestruction();
		m_piPointGSMPBAgt=NULL;
	}	

	if (NULL!=m_piPointGSMAgt)
	{
		m_piPointGSMAgt->RequestDelayedDestruction();
		m_piPointGSMAgt=NULL;
	}	

	if (NULL!=m_piPrdAgt)
	{
		m_piPrdAgt->RequestDelayedDestruction();
		m_piPrdAgt=NULL;
	}

	//清除紧固件属性信息参数内存
	for (int k=1;k<=m_pListStrPropertyName.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrPropertyName[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrSpecialName.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrSpecialName[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrPropertyValue.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrPropertyValue[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrSpecialValue.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrSpecialValue[k];
		delete TempLstStr;
	}

	//
	for (int k=1;k<=m_plstMainFstResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults01[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_plstMainFstResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
		delete TempLstStr;
	}

	//
	for (int k=1;k<=m_plstWasherFstResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults01[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_plstWasherFstResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults02[k];
		delete TempLstStr;
	}

	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles02.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults02.RemoveAll();

	//清除已有的指针信息
	for (int k=1;k<=m_plstKnowledgeFstResults.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstKnowledgeFstResults[k];
		delete TempLstStr;
	}
	m_plstKnowledgeFstResults.RemoveAll();

	

	//高亮点清空
	m_piHSO->Empty();
	m_piISO->Empty();

	//----------------------------
	if (m_pFstAccessDlg != NULL)
	{
		m_pFstAccessDlg->RequestDelayedDestruction();
		m_pFstAccessDlg=NULL;
	}

	if (m_pFstFreeStyleDlg != NULL)
	{
		m_pFstFreeStyleDlg->RequestDelayedDestruction();
		m_pFstFreeStyleDlg=NULL;
	}

	//
	if (m_pFstFreeStyleMainBoltDlg != NULL)
	{
		m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
		m_pFstFreeStyleMainBoltDlg=NULL;
	}

	if (m_pFstFreeStyleNutDlg != NULL)
	{
		m_pFstFreeStyleNutDlg->RequestDelayedDestruction();
		m_pFstFreeStyleNutDlg=NULL;
	}

	if (m_pFstFreeStyleWasherDlg != NULL)
	{
		m_pFstFreeStyleWasherDlg->RequestDelayedDestruction();
		m_pFstFreeStyleWasherDlg=NULL;
	}

	if (m_pFstFreeStyleShelterDlg != NULL)
	{
		m_pFstFreeStyleShelterDlg->RequestDelayedDestruction();
		m_pFstFreeStyleShelterDlg=NULL;
	}

	//
	if (m_pFstKnowledgeBasedDlg != NULL)
	{
		m_pFstKnowledgeBasedDlg->RequestDelayedDestruction();
		m_pFstKnowledgeBasedDlg=NULL;
	}

	if (m_pFstKnowledgeMainBoltDlg != NULL)
	{
		m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
		m_pFstKnowledgeMainBoltDlg=NULL;
	}

	if (m_pFstKnowledgeNutDlg != NULL)
	{
		m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
		m_pFstKnowledgeNutDlg=NULL;
	}

	if (m_pFstKnowledgeWasherDlg != NULL)
	{
		m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
		m_pFstKnowledgeWasherDlg=NULL;
	}

	if (m_pFstKnowledgeShelterDlg != NULL)
	{
		m_pFstKnowledgeShelterDlg->RequestDelayedDestruction();
		m_pFstKnowledgeShelterDlg=NULL;
	}	
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void PrtFstDesignCmd::BuildGraph()
{
	m_pDlg = new PrtFstDesignDlg();
	m_pDlg->Build();
	m_pDlg->SetVisibility(CATDlgShow);
	m_pDlg->_ChooseFstPB->SetSensitivity(CATDlgDisable);

	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaOKNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::OkDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaAPPLYNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::ApplyDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetWindCloseNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pDlg, 
		m_pDlg->GetDiaCLOSENotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseDlgCB,
		NULL);

	//删除所有点
	AddAnalyseNotificationCB (m_pDlg->_DeletePointPB, 
		m_pDlg->_DeletePointPB->GetPushBActivateNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::DeleteAllPointsCB,
		NULL);
	//转换安装方向
	AddAnalyseNotificationCB (m_pDlg->_DirectionPB, 
		m_pDlg->_DirectionPB->GetPushBActivateNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::ReverseDirCB,
		NULL);
	//选择紧固件类型，调用DLL
	AddAnalyseNotificationCB (m_pDlg->_ChooseFstPB, 
		m_pDlg->_ChooseFstPB->GetPushBActivateNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::ChooseFstCB,
		NULL);

	//选择紧固件信息列表，查看具体信息
	//选择紧固件类型，调用DLL
	AddAnalyseNotificationCB (m_pDlg->_ChoosedFstNormalInfoML, 
		m_pDlg->_ChoosedFstNormalInfoML->GetListSelectNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::ChoosedFstNormalInfoMLCB,
		NULL);
	
	//创建安装点代理
	m_piPointsAgt = new CATFeatureImportAgent("选择安装点");
	m_piPointsAgt->SetBehavior( CATDlgEngWithPSOHSO | CATDlgEngWithPrevaluation | CATDlgEngMultiAcquisitionUserCtrl | CATDlgEngRepeat);
	m_piPointsAgt->SetAgentBehavior(MfRelimitedFeaturization|MfPermanentBody); 
	m_piPointsAgt->AddElementType(IID_CATIMfZeroDimResult);

	//创建第一安装面代理
	m_piFirstSurfAgt = new CATFeatureImportAgent("选择第一安装面");
	m_piFirstSurfAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat );
	m_piFirstSurfAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piFirstSurfAgt -> AddElementType (IID_CATIMfBiDimResult);
	m_piFirstSurfAgt -> AddElementType (IID_CATSurface);

	//创建第二安装面代理
	m_piSecSurfAgt = new CATFeatureImportAgent("选择第二安装面");
	m_piSecSurfAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat  );
	m_piSecSurfAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piSecSurfAgt -> AddElementType (IID_CATIMfBiDimResult);
	m_piSecSurfAgt -> AddElementType (IID_CATSurface);

	//创建prd代理
	m_piPrdAgt = new CATPathElementAgent("选择连接零件");
	m_piPrdAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSOHSO | CATDlgEngRepeat  );
	m_piPrdAgt -> AddElementType (IID_CATIProduct);
	CATAcquisitionFilter * pFilterForPrt = Filter((FilterMethod) & PrtFstDesignCmd::SeletedIsPart,(void*)NULL);
	m_piPrdAgt->SetFilter(pFilterForPrt);

	//创建GSM代理
	m_piPointGSMAgt = new CATFeatureImportAgent("选择点几何图形集");
	m_piPointGSMAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat  );
	m_piPointGSMAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piPointGSMAgt -> AddElementType (IID_CATIGSMTool);

	//points SL
	m_piPointSLAgt = new CATDialogAgent("选择安装点");
	m_piPointSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piPointSLAgt->AcceptOnNotify(m_pDlg->_PointsSL,m_pDlg->_PointsSL->GetListSelectNotification());

	//first Surf SL
	m_piFirstSurfSLAgt = new CATDialogAgent("选择第一安装面");
	m_piFirstSurfSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piFirstSurfSLAgt->AcceptOnNotify(m_pDlg->_FirstSurfSL,m_pDlg->_FirstSurfSL->GetListSelectNotification());

	//second Surf SL
	m_piSecSurfSLAgt = new CATDialogAgent("选择第二安装面");
	m_piSecSurfSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piSecSurfSLAgt->AcceptOnNotify(m_pDlg->_SecondSurfSL,m_pDlg->_SecondSurfSL->GetListSelectNotification());

	//Prd SL
	m_piPrdSLAgt = new CATDialogAgent("选择连接零件");
	m_piPrdSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piPrdSLAgt->AcceptOnNotify(m_pDlg->_PrdSL,m_pDlg->_PrdSL->GetListSelectNotification());

	//Choose Point GSM PB
	m_piPointGSMPBAgt = new CATDialogAgent("选择点几何图形集");
	m_piPointGSMPBAgt->SetBehavior(CATDlgEngRepeat);
	m_piPointGSMPBAgt->AcceptOnNotify(m_pDlg->_ChoosePointGSMToolPB,m_pDlg->_ChoosePointGSMToolPB->GetPushBActivateNotification());


	//Define the StateChart
	CATDialogState * StSelectPrds = GetInitialState("选择连接零件");
	StSelectPrds -> AddDialogAgent (m_piPrdAgt);
	StSelectPrds -> AddDialogAgent (m_piPointSLAgt);
	StSelectPrds -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPrds -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectPoints = AddDialogState("选择安装点");
	StSelectPoints -> AddDialogAgent (m_piPointsAgt);
	StSelectPoints -> AddDialogAgent (m_piPointSLAgt);
	StSelectPoints -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPoints -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPoints -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPoints -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectPointGSM = AddDialogState("选择点几何图形集");
	StSelectPointGSM -> AddDialogAgent (m_piPointGSMAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPointSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectFirstSurf = AddDialogState("选择第一安装面");
	StSelectFirstSurf -> AddDialogAgent (m_piFirstSurfAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPointSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPrdSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectSecSurf = AddDialogState("选择第二安装面");
	StSelectSecSurf -> AddDialogAgent (m_piSecSurfAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPointSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPrdSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPointGSMPBAgt);

	//转换关系 点到点
	AddTransition(StSelectPoints, StSelectPoints, 
		IsLastModifiedAgentCondition(m_piPointsAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePoints));

	//转换关系 点到点
	AddTransition(StSelectPoints, StSelectPoints, 
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 点到面1
	AddTransition(StSelectPoints, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	//转换关系 点到面2
	AddTransition(StSelectPoints, StSelectSecSurf, 
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面1到点
	AddTransition(StSelectFirstSurf,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 面2到点
	AddTransition(StSelectSecSurf,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 面1到面1
	AddTransition(StSelectFirstSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChooseFirstSurfs));

	//转换关系 面1到面1
	AddTransition(StSelectFirstSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	//转换关系 面2到面2
	AddTransition(StSelectSecSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChooseSecSurfs));

	//转换关系 面2到面2
	AddTransition(StSelectSecSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面1到面2
	AddTransition(StSelectFirstSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面2到面1
	AddTransition(StSelectSecSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 Prd Prd
	AddTransition(StSelectPrds,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePrds));
	//转换关系 Prd Prd
	AddTransition(StSelectPrds,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 GSM GSM
	AddTransition(StSelectPointGSM,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePointGSM));

	//转换关系 GSM GSM
	AddTransition(StSelectPointGSM,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 Prd GSM
	AddTransition(StSelectPrds,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 GSM Prd
	AddTransition(StSelectPointGSM,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 Prd 点
	AddTransition(StSelectPrds,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));
	//转换关系 点 Prd 
	AddTransition(StSelectPoints,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 Prd 面1
	AddTransition(StSelectPrds, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));
	//转换关系 面1 Prd 
	AddTransition(StSelectFirstSurf,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 Prd 面2
	AddTransition(StSelectPrds,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));
	//转换关系 面2 Prd 
	AddTransition(StSelectSecSurf,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 GSM 点
	AddTransition(StSelectPointGSM,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));
	//转换关系 点 GSM 
	AddTransition(StSelectPoints,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));
	
	//转换关系 GSM 面1
	AddTransition(StSelectPointGSM, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));
	//转换关系 面1 GSM 
	AddTransition(StSelectFirstSurf,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 GSM 面2
	AddTransition(StSelectPointGSM,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));
	//转换关系 面2 GSM 
	AddTransition(StSelectSecSurf,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));
}

//转变OK APPLY按钮的显示状态
void PrtFstDesignCmd::ChangeOKApplyState()
{
	//控制APPLY&OK状态
	if (m_lstSpecPoints.Size()!=0 && m_lstSpecPrds.Size()!=0 && m_lstSpecFirstSurfs.Size()!=0 && m_lstSpecSecSurfs.Size()!=0 && m_userChoosedFlag!=FALSE)
	{
		m_pDlg->SetOKSensitivity(CATDlgEnable);
		m_pDlg->SetAPPLYSensitivity(CATDlgEnable);
	}
	else
	{
		m_pDlg->SetOKSensitivity(CATDlgDisable);
		m_pDlg->SetAPPLYSensitivity(CATDlgDisable);
	}

	//控制紧固件选择按钮状态
	if (m_lstSpecPoints.Size()!=0 && m_lstSpecPrds.Size()!=0 && m_lstSpecFirstSurfs.Size()!=0 && m_lstSpecSecSurfs.Size()!=0)
	{
		m_pDlg->_ChooseFstPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		m_pDlg->_ChooseFstPB->SetSensitivity(CATDlgDisable);
	}
}


void PrtFstDesignCmd::OkDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (NULL != m_pDlg)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}	

	//当选择信息健全的时候，创建点线模型
	if (m_lstSpecPoints.Size()!=0 && m_lstSpecPrds.Size()!=0 && m_lstSpecFirstSurfs.Size()!=0 && m_lstSpecSecSurfs.Size()!=0)
	{
		//
		CreateFstLineAndCircle();
	}
	
	//隐藏第一安装面
	for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecFirstSurfs[i],"Hide");
	}

	//隐藏第二安装面
	for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecSecSurfs[i],"Hide");
	}

	RequestDelayedDestruction();

}

//
void PrtFstDesignCmd::ApplyDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//当选择信息健全的时候，创建点线模型
	if (m_lstSpecPoints.Size()!=0 && m_lstSpecPrds.Size()!=0 && m_lstSpecFirstSurfs.Size()!=0 && m_lstSpecSecSurfs.Size()!=0)
	{
		//创建点线模型
		CreateFstLineAndCircle();
	}
	
	//隐藏第一安装面
	for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecFirstSurfs[i],"Hide");
	}

	//隐藏第二安装面
	for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecSecSurfs[i],"Hide");
	}

	//清空除了“设计上下文”之外的选择
	m_pDlg->_PointsSL->ClearLine();
	m_pDlg->_FirstSurfSL->ClearLine();
	m_pDlg->_SecondSurfSL->ClearLine();
	m_lstSpecPoints.RemoveAll();
	m_lstSpecFirstSurfs.RemoveAll();
	m_lstSpecSecSurfs.RemoveAll();
	//初始化界面
	m_pDlg->_FirstSurfSL->SetLine("未选择");
	m_pDlg->_SecondSurfSL->SetLine("未选择");
	m_pDlg->_PointsSL->SetLine("请选择安装点");
	m_pDlg->_PointCountEditor->SetText("0 个");
	//清空高亮，HSO and ISO
	m_piHSO->Empty();
	m_piISO->Empty();
	//
	//测试代码，显示最大距离和最小距离
	/*PrtService::ktErrorMsgBox(m_dJstThickMin);
	PrtService::ktErrorMsgBox(m_dJstThickMax);

	PrtService::ktErrorMsgBox(m_dFirstPrdThickMin);
	PrtService::ktErrorMsgBox(m_dFirstPrdThickMax);*/
	//

	//调用清空紧固件信息数组函数
	ClearFstInfoLst();

	//调整按钮显示状态
	ChangeOKApplyState();
}

//
void PrtFstDesignCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	if (NULL != m_pDlg)
	{
		m_pDlg->RequestDelayedDestruction();
		m_pDlg = NULL;
	}	

	//隐藏第一安装面
	for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecFirstSurfs[i],"Hide");
	}

	//隐藏第二安装面
	for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecSecSurfs[i],"Hide");
	}

	RequestDelayedDestruction();
}

//判断是否为ZP模型
BOOL PrtFstDesignCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart != -1)
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

CATBoolean PrtFstDesignCmd::SeletedIsPart(CATDialogAgent * iAgent, void * iUsefulData)
{
	CATBoolean rc = FALSE ;
	if ( NULL == iAgent ) return rc ;

	CATBaseUnknown* piSelectElement =m_piPrdAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		CATIProduct_var spPrd = NULL_var;
		spPrd = piSelectElement;

		CATUnicodeString strDocType("");
		PrdService::GetInstPrdType(spPrd,strDocType);

		if (strDocType == "CATPart")
		{
			return TRUE;
		}
	}

	return rc;
}

//各种转换消息响应函数
CATBoolean PrtFstDesignCmd::ChoosePoints( void *UsefulData)
{
	//定义集群
	CATSO * pSO = NULL ;
	pSO = m_piPointsAgt->GetListOfValues();
	if ( NULL != pSO )
	{
		int lg = pSO->GetSize();
		for ( int i=0 ; i < lg ; i++)
		{
			CATPathElement * pPath = (CATPathElement*) (*pSO)[i];
			CATPathElement * pSubPath = NULL;

			CATBaseUnknown * pLeaf =NULL ;
			if ( NULL != pPath )
				pSubPath = pPath->GetSubPath("CATISpecObject");
			pLeaf = (*pSubPath)[pSubPath->GetSize()-1];

			CATISpecObject_var spLeaf = pLeaf;
			BOOL existFlag = FALSE;
			for (int j = 1; j <= m_lstSpecPoints.Size(); j++)
			{
				if (m_lstSpecPoints[j] == spLeaf)
				{
					if (m_pDlg->_SeleDeleteCheckB->GetState() == CATDlgCheck)
					{
						m_lstSpecPoints.RemoveValue(spLeaf);
						PrtService::RemoveHSO(spLeaf);
						
						//列表更新
						m_pDlg->_PointsSL->ClearLine();
						for (int i = 1; i <= m_lstSpecPoints.Size(); i ++)
						{
							CATUnicodeString strShowPath("");
							CATPathElement *piPath = NULL;
							PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPoints[i],NULL);
							PrtService::PathElementString(piPath,strShowPath,TRUE);
							m_pDlg->_PointsSL->SetLine(strShowPath);

							piPath->Release();
							piPath=NULL;
						}
						if (m_lstSpecPoints.Size()==0)
						{
							m_pDlg->_PointsSL->SetLine("请选择安装点",0,CATDlgDataModify);
						}
					}

					existFlag = TRUE;
					break;
				}
			}

			//如果为移除模式情况下，移除HSO
			if (!existFlag && (m_pDlg->_SeleDeleteCheckB->GetState() == CATDlgCheck)) //不存在放入
			{
				PrtService::RemoveHSO(spLeaf);
			}


			//如果为增加模式情况下
			if (!existFlag && (m_pDlg->_SeleDeleteCheckB->GetState() == CATDlgUncheck)) //不存在放入
			{
				//先清空列表
				if (m_lstSpecPoints.Size() == 0)
				{
					m_pDlg->_PointsSL->ClearLine();
				}
				//
				m_lstSpecPoints.Append(spLeaf);

				//
				CATUnicodeString strShowPath("");
				strShowPath = spLeaf->GetDisplayName();
				PrtService::PathElementString(pSubPath,strShowPath,TRUE);
				m_pDlg->_PointsSL->SetLine(strShowPath);
			}

		}
	}

	//显示安装点个数
	CATUnicodeString strCount("");
	strCount.BuildFromNum(m_lstSpecPoints.Size());
	strCount += " 个";
	m_pDlg->_PointCountEditor->SetText(strCount);

	//清空列表选择状态
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	//
	ChangeOKApplyState();
	m_piPointsAgt->InitializeAcquisition();
	return TRUE;

}

CATBoolean PrtFstDesignCmd::ChooseFirstSurfs( void *UsefulData)
{
	HRESULT hr = E_FAIL;
	
	CATBaseUnknown* piSelectElement =m_piFirstSurfAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATIMfBRep *piBrep = NULL;
		hr = piSelectElement->QueryInterface(IID_CATIMfBRep,(void**)&piBrep);
		//
		CATISpecObject_var spSpecOnSelection =NULL_var;
		if (SUCCEEDED(hr)&&(piBrep!=NULL))
		{
			spSpecOnSelection = piBrep->GetSupport();
			piBrep->Release();
			piBrep=NULL;
		}
		else
		{
			spSpecOnSelection = piSelectElement;
		}
		

		//根据情况判断
		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i ++)
			{
				if (m_lstSpecFirstSurfs[i] == spSpecOnSelection)
				{
					m_lstSpecFirstSurfs.RemoveValue(spSpecOnSelection);
					PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Hide");
					PrtService::RemoveHSO(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				//判断是否在另一个曲面数组中
				if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecSecSurfs))
				{
					PrtService::ktWarningMsgBox("您不能选择与终止面相同的面，请重新选择！");
				}
				else
				{
					//判断确定所引用的曲面所在零件必须在定义上下文中
					CATIProduct_var spRefPrd;
					GetLinkImportPrd(spSpecOnSelection,spRefPrd);
					if (m_lstSpecPrds.Size() >= 2)
					{
						if (IsTheSpecInLstSpec(spRefPrd,m_lstSpecPrds))
						{
							PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Show");
							m_lstSpecFirstSurfs.Append(spSpecOnSelection);
							PrtService::HighlightHSO(spSpecOnSelection);
						}
						else
						{
							PrtService::ktErrorMsgBox("当前所选元素所在零件不在“设计上下文”列表中，请重新选择！");
						}
					}
					else //当前“设计上下文”元素小于二个
					{
						PrtService::ktWarningMsgBox("“设计上下文”零件列表必须大于等于2，请首先选择设计上下文零件！");
					}
				}
				
			}

			if (m_lstSpecFirstSurfs.Size()>=1)
			{
				CATUnicodeString strLineShow("共选择");
				CATUnicodeString strNumber;
				strNumber.BuildFromNum(m_lstSpecFirstSurfs.Size());
				strLineShow += strNumber + "个面";
				m_pDlg->_FirstSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
			}
			if (m_lstSpecFirstSurfs.Size()==0)
			{
				m_pDlg->_FirstSurfSL->SetLine("未选择",0,CATDlgDataModify);
			}
		}

		//显示安装方向，计算夹持厚度，计算第一安装面厚度
		CalculateJoinThickInTop(m_lstSpecFirstSurfs,m_lstSpecSecSurfs,m_lstSpecPoints);
	}

	//
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();
	int firstRom = 0;
	m_pDlg->_FirstSurfSL->SetSelect(&firstRom,1,0);

	//
	ChangeOKApplyState();
	m_piFirstSurfAgt->InitializeAcquisition();
	return TRUE;	
}

CATBoolean PrtFstDesignCmd::ChooseSecSurfs( void *UsefulData)
{
	HRESULT hr = E_FAIL;
	CATBaseUnknown* piSelectElement =m_piSecSurfAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATIMfBRep *piBrep = NULL;
		hr = piSelectElement->QueryInterface(IID_CATIMfBRep,(void**)&piBrep);
		//
		CATISpecObject_var spSpecOnSelection =NULL_var;
		if (SUCCEEDED(hr)&&(piBrep!=NULL))
		{
			spSpecOnSelection = piBrep->GetSupport();
			piBrep->Release();
			piBrep=NULL;
		}
		else
		{
			spSpecOnSelection = piSelectElement;
		}

		//
		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i ++)
			{
				if (m_lstSpecSecSurfs[i] == spSpecOnSelection)
				{
					m_lstSpecSecSurfs.RemoveValue(spSpecOnSelection);
					PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Hide");
					PrtService::RemoveHSO(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				//判断是否在另一个曲面数组中
				if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecFirstSurfs))
				{
					PrtService::ktWarningMsgBox("您不能选择与起始面相同的面，请重新选择！");
				}
				else
				{
					//判断是否在另一个曲面数组中
					if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecSecSurfs))
					{
						PrtService::ktWarningMsgBox("您不能选择与终止面相同的面，请重新选择！");
					}
					else
					{
						//判断确定所引用的曲面所在零件必须在定义上下文中
						CATIProduct_var spRefPrd;
						GetLinkImportPrd(spSpecOnSelection,spRefPrd);
						if (m_lstSpecPrds.Size() >= 2)
						{
							if (IsTheSpecInLstSpec(spRefPrd,m_lstSpecPrds))
							{
								PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Show");
								m_lstSpecSecSurfs.Append(spSpecOnSelection);
								PrtService::HighlightHSO(spSpecOnSelection);
							}
							else
							{
								PrtService::ktErrorMsgBox("当前所选元素所在零件不在“设计上下文”列表中，请重新选择！");
							}
						}
						else //当前“设计上下文”元素小于二个
						{
							PrtService::ktWarningMsgBox("“设计上下文”零件列表必须大于等于2，请首先选择设计上下文零件！");
						}
					}
				}
			}
			
			if (m_lstSpecSecSurfs.Size()>=1)
			{
				CATUnicodeString strLineShow("共选择");
				CATUnicodeString strNumber;
				strNumber.BuildFromNum(m_lstSpecSecSurfs.Size());
				strLineShow += strNumber + "个面";
				m_pDlg->_SecondSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
			}
			if (m_lstSpecSecSurfs.Size()==0)
			{
				m_pDlg->_SecondSurfSL->SetLine("未选择",0,CATDlgDataModify);
			}
		}
		//显示安装方向
		CalculateJoinThickInTop(m_lstSpecFirstSurfs,m_lstSpecSecSurfs,m_lstSpecPoints);
	}

	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	int firstRom = 0;
	m_pDlg->_SecondSurfSL->SetSelect(&firstRom,1,0);

	//
	ChangeOKApplyState();
	//重新初始化代理
	m_piSecSurfAgt->InitializeAcquisition();
	return TRUE;	

}

//响应
CATBoolean PrtFstDesignCmd::ChoosePrds( void *UsefulData)
{
	HRESULT hr = E_FAIL;

	CATPathElement* piSelectElement =m_piPrdAgt->GetValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATBaseUnknown * pLeaf =NULL ;
		//获得路径下第一个特征spec类型
		pLeaf = (*piSelectElement)[piSelectElement->GetSize()-1];
		CATISpecObject_var spSpecOnSelection = NULL_var;
		spSpecOnSelection = pLeaf;

		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecPrds.Size(); i ++)
			{
				if (m_lstSpecPrds[i] == spSpecOnSelection)
				{
					m_lstSpecPrds.RemoveValue(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				CATDocument* opiPrdDoc = NULL;
				PrdService::GetInstPrdDoc(spSpecOnSelection,opiPrdDoc);
				CATUnicodeString strPrdName;
				PrtService::GetPrdNumberFormDoc(opiPrdDoc,strPrdName);
				
				if (IsThisZPPrt(strPrdName))
				{
					PrtService::ktWarningMsgBox("不能选择ZP模型为安装零件，请重新选择！");
					PrtService::RemoveHSO(spSpecOnSelection);
				}
				else
					m_lstSpecPrds.Append(spSpecOnSelection);				
			}

			m_pDlg->_PrdSL->ClearLine();
			for (int i = 1; i <= m_lstSpecPrds.Size(); i ++)
			{
				//
				CATUnicodeString strShowPath("");
				CATPathElement *piPath = NULL;
				PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPrds[i],NULL);
				PrtService::PathElementString(piPath,strShowPath,TRUE);
				m_pDlg->_PrdSL->SetLine(strShowPath);

				piPath->Release();
				piPath=NULL;
			}

			if (m_lstSpecPrds.Size()==0)
			{
				m_pDlg->_PrdSL->SetLine("请选择连接零件（需确保所选第一个为第一安装零件）");
			}
		}
	}

	//
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();

	//
	PrtService::ClearHSO();
	PrtService::HighLightObjLst(m_lstSpecPrds);

	//
	ChangeOKApplyState();
	m_piPrdAgt->InitializeAcquisition();
	return TRUE;	
}


//激活相关代理
CATBoolean PrtFstDesignCmd::ActivePointsSL( void *UsefulData)
{
	//清除选择
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecPoints);
	//显示ISO POINTS
	ShowPointInfoInISO(m_pDlg->_PointsSL,m_lstSpecPoints);

	m_piPointsAgt->InitializeAcquisition();
	return TRUE;	
}
CATBoolean PrtFstDesignCmd::ActiveFirstSurfSL( void *UsefulData)
{
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecFirstSurfs);
	//
	//显示安装方向
	CalculateJoinThickInTop(m_lstSpecFirstSurfs,m_lstSpecSecSurfs,m_lstSpecPoints);
	//
	m_piFirstSurfAgt->InitializeAcquisition();
	return TRUE;
}
CATBoolean PrtFstDesignCmd::ActiveSecSurfSL( void *UsefulData)
{
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecSecSurfs);
	//
	//显示安装方向
	CalculateJoinThickInTop(m_lstSpecFirstSurfs,m_lstSpecSecSurfs,m_lstSpecPoints);
	//
	m_piSecSurfAgt->InitializeAcquisition();
	return TRUE;
}

CATBoolean PrtFstDesignCmd::ActivePrdSL( void *UsefulData)
{
	m_pDlg->_PointsSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	ShowSeletedLine(m_pDlg->_PrdSL,m_lstSpecPrds);

	m_piPrdAgt->InitializeAcquisition();
	return TRUE;
}
CATBoolean PrtFstDesignCmd::ActivePointGSMPB( void *UsefulData)
{
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();
	m_pDlg->_PrdSL->ClearSelect();

	m_piPointGSMAgt->InitializeAcquisition();
	return TRUE;
}

CATBoolean PrtFstDesignCmd::ChoosePointGSM( void *UsefulData)
{
	CATPathElement* piSelectElement =m_piPointGSMAgt->GetValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATBaseUnknown * pLeaf =NULL ;
		//获得路径下第一个特征spec类型
		pLeaf = (*piSelectElement)[piSelectElement->GetSize()-1];
		CATISpecObject_var spSpecOnSelection = NULL_var;
		spSpecOnSelection = pLeaf;
		//
		if ( spSpecOnSelection != NULL_var )
		{
			//获得几何图形集下面所有的点
			PrtService::GetContentSpecsByNameFromGSMTool(spSpecOnSelection,"CATIMfZeroDimResult",m_lstSpecPoints);

			m_pDlg->_PointsSL->ClearLine();
			for (int i = 1; i <= m_lstSpecPoints.Size(); i ++)
			{
				//
				CATUnicodeString strShowPath("");
				CATPathElement *piPath = NULL;
				PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPoints[i],NULL);
				PrtService::PathElementString(piPath,strShowPath,TRUE);
				m_pDlg->_PointsSL->SetLine(strShowPath);

				piPath->Release();
				piPath=NULL;

				PrtService::HighlightHSO(m_lstSpecPoints[i]);
			}

			if (m_lstSpecPoints.Size()==0)
			{
				m_pDlg->_PointsSL->SetLine("请选择安装点");
			}

			//显示安装点个数
			CATUnicodeString strCount("");
			strCount.BuildFromNum(m_lstSpecPoints.Size());
			strCount += " 个";
			m_pDlg->_PointCountEditor->SetText(strCount);
		}
	}
	
	m_pDlg->_PrdSL->ClearSelect();
	m_pDlg->_FirstSurfSL->ClearSelect();
	m_pDlg->_SecondSurfSL->ClearSelect();

	//
	ChangeOKApplyState();
	m_piPointGSMAgt->InitializeAcquisition();
	return TRUE;
}


//高亮显示当前所选行
void PrtFstDesignCmd::ShowSeletedLine(CATDlgSelectorList* opiSL,CATListValCATISpecObject_var olstSpecs)
{
	//如果为空，直接退出
	if (olstSpecs.Size() == 0)
	{
		return;
	}
	//获取所选行
	int NumberOfRowsSelected;
	NumberOfRowsSelected = opiSL->GetSelectCount();

	int *iSelectedRows = new int[NumberOfRowsSelected];
	opiSL->GetSelect(iSelectedRows,NumberOfRowsSelected);

	//重新添加高亮
	for (int i = 0; i < NumberOfRowsSelected; i ++)
	{
		PrtService::HighlightHSO(olstSpecs[iSelectedRows[i]+1]);
	}
}


//删除所有点
void PrtFstDesignCmd::DeleteAllPointsCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	PrtService::ClearHSO();
	m_lstSpecPoints.RemoveAll();
	m_pDlg->_PointsSL->ClearLine();
	m_pDlg->_PointsSL->SetLine("请选择安装点");

	//显示安装点个数
	CATUnicodeString strCount("");
	strCount.BuildFromNum(m_lstSpecPoints.Size());
	strCount += " 个";
	m_pDlg->_PointCountEditor->SetText(strCount);

	//获得并清空ISO
	m_piISO->Empty();
	//
	ChangeOKApplyState();
}

//反向安装方向
void PrtFstDesignCmd::ReverseDirCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (m_lstSpecFirstSurfs.Size() != 0 && m_lstSpecSecSurfs.Size() != 0)
	{
		//两个数组互相调换
		CATListValCATISpecObject_var lstSpecTemp;
		lstSpecTemp = m_lstSpecFirstSurfs;
		m_lstSpecFirstSurfs = m_lstSpecSecSurfs;
		m_lstSpecSecSurfs = lstSpecTemp;

		//DLG显示转换
		if (m_lstSpecFirstSurfs.Size()>=1)
		{
			CATUnicodeString strLineShow("共选择");
			CATUnicodeString strNumber;
			strNumber.BuildFromNum(m_lstSpecFirstSurfs.Size());
			strLineShow += strNumber + "个面";
			m_pDlg->_FirstSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
		}
		if (m_lstSpecFirstSurfs.Size()==0)
		{
			m_pDlg->_FirstSurfSL->SetLine("未选择",0,CATDlgDataModify);
		}

		//
		if (m_lstSpecSecSurfs.Size()>=1)
		{
			CATUnicodeString strLineShow("共选择");
			CATUnicodeString strNumber;
			strNumber.BuildFromNum(m_lstSpecSecSurfs.Size());
			strLineShow += strNumber + "个面";
			m_pDlg->_SecondSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
		}
		if (m_lstSpecSecSurfs.Size()==0)
		{
			m_pDlg->_SecondSurfSL->SetLine("未选择",0,CATDlgDataModify);
		}

		//显示安装方向
		CalculateJoinThickInTop(m_lstSpecFirstSurfs,m_lstSpecSecSurfs,m_lstSpecPoints);
		m_piHSO->Empty();
	}
	
}

//在IOS中显示标记点
void PrtFstDesignCmd::ShowPointInfoInISO(CATDlgSelectorList* opiSL,CATListValCATISpecObject_var olstSpecs)
{
	//如果为空，直接退出
	if (olstSpecs.Size() == 0)
	{
		return;
	}
	//获取所选行
	int NumberOfRowsSelected;
	NumberOfRowsSelected = opiSL->GetSelectCount();

	int *iSelectedRows = new int[NumberOfRowsSelected];
	opiSL->GetSelect(iSelectedRows,NumberOfRowsSelected);

	//获得并清空ISO
	m_piISO->Empty();

	//重新添加高亮
	for (int i = 0; i < NumberOfRowsSelected; i ++)
	{
		CATIMeasurablePoint_var spMeasurablePt = olstSpecs[iSelectedRows[i]+1];
		if (spMeasurablePt==NULL_var)
		{
			return ;
		}
		CATMathPoint mPrjPt;
		spMeasurablePt->GetPoint(mPrjPt);

		CATIAlias_var spAliasOnPt = olstSpecs[iSelectedRows[i]+1];
		CATUnicodeString StrTextValue = spAliasOnPt->GetAlias();
		
		CATMathPointf TextPosNode;
		TextPosNode.x = (float)(mPrjPt.GetX());
		TextPosNode.y = (float)(mPrjPt.GetY());
		TextPosNode.z = (float)(mPrjPt.GetZ());

		CAT3DCustomRep * pRepForTextStart= new CAT3DCustomRep();
		CATGraphicAttributeSet   TextGaNode ;
		TextGaNode.SetColor(BLUE);
		CAT3DAnnotationTextGP   *pTextGPSrart = new CAT3DAnnotationTextGP(TextPosNode,StrTextValue);
		pRepForTextStart->AddGP(pTextGPSrart,TextGaNode);
		CATModelForRep3D *piRepPtAlias = new CATModelForRep3D() ;
		piRepPtAlias->SetRep(pRepForTextStart) ;
		m_piISO->AddElement(piRepPtAlias);

		piRepPtAlias->Release();
		piRepPtAlias=NULL;
	}
}

//判断一个曲面特征是否在另一个数组中
BOOL PrtFstDesignCmd::IsTheSpecInLstSpec(CATISpecObject_var iSpec, CATListValCATISpecObject_var iLstSpec)
{
	for (int i = 1; i <= iLstSpec.Size(); i ++)
	{
		if (iSpec == iLstSpec[i])
		{
			return TRUE;
		}
	}

	return FALSE;		
}

//获得传入特征的的父级节点
HRESULT PrtFstDesignCmd::GetLinkImportPrd(CATISpecObject_var& ispFeature,CATIProduct_var &ospSourcePrd)
{
	HRESULT rc = S_OK;
	ospSourcePrd=NULL_var;
	CATIMmiMechanicalImportApplicative* piLinkImport = NULL;
	//
	rc = ispFeature->QueryInterface(IID_CATIMmiMechanicalImportApplicative,(void**)&piLinkImport);
	//
	if (SUCCEEDED(rc) && (piLinkImport!=NULL))
	{
		CATIProduct_var spSourcePrd = NULL_var;
		piLinkImport->GetSourceProduct(ospSourcePrd);
		//
		piLinkImport->Release();
		piLinkImport=NULL;
		
		//输出路径测试
		/*if (ospSourcePrd!=NULL_var)
		{
			CATUnicodeString strShowPath("");
			CATPathElement *piPath = NULL;
			PrtService::GetPathElementFromSpecObject(piPath,ospSourcePrd,NULL);
			PrtService::PathElementString(piPath,strShowPath,TRUE);
			PrtService::ktInfoMsgBox(strShowPath);
		}*/
	}
	
	return rc;
}

// [2/26/2012 xyuser]
void PrtFstDesignCmd::CreateFstLineAndCircle()
{
	if (m_alistStrFSTName.Size()==0)
	{
		return;
	}
	
	//---------------------------------------------
	//1 合并选择的第一第二曲面片
	//---------------------------------------------
	CATIGSMFactory_var spGSMFac = NULL_var;
	PrtService::GetGSMFactory(m_piDoc,spGSMFac);
	//
	CATISpecObject_var spGSMTool = NULL_var;
	PrtService::ObtainGSMTool(m_piDoc,"过程元素",spGSMTool);
	//创建几何图形集放置点集合
	CATIPrtContainer *opiRootContainer = NULL;
	PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
	//获取PART
	CATISpecObject_var spPart = opiRootContainer->GetPart();
	
	//从当前PRT中获取紧固件计数器，以最大值模式递增
	CATUnicodeString strIndexKey("F_ATTEX_MAXIndex");
	BOOL bIsExistKey;
	PrtService::GetSepcObjectAttrEx(bIsExistKey,m_dFstMaxIndex,strIndexKey,spPart);
	if (!bIsExistKey)
	{
		m_dFstMaxIndex=0;
		PrtService::SetSepcObjectAttrEx(m_dFstMaxIndex,strIndexKey,spPart);
	}
	
	//
	CATISpecObject_var spFSTAssGSMTool = NULL_var;
	int oDiag = 0 ;
	PrtService::CAAGsiCreateGeometricFeatureSets(opiRootContainer,"紧固件辅助元素",spGSMTool,spFSTAssGSMTool,oDiag,0,0);
	//
	PrtService::SetSpecObjShowAttr(spFSTAssGSMTool,"Hide");
	//
	CATISpecObject_var spFirstSURF,spSecSURF;
	//
	if (m_lstSpecFirstSurfs.Size() >= 2)
	{
		spFirstSURF = spGSMFac->CreateAssemble(m_lstSpecFirstSurfs);
		PrtService::CAAGsiInsertInProceduralView(spFirstSURF,spFSTAssGSMTool);
		PrtService::ObjectUpdate(spFirstSURF);
	} 
	else
	{
		spFirstSURF = m_lstSpecFirstSurfs[1];
	}
	//
	if (m_lstSpecSecSurfs.Size() >= 2)
	{
		spSecSURF = spGSMFac->CreateAssemble(m_lstSpecSecSurfs);
		CATISpecObject_var spGSMTool = NULL_var;
		PrtService::CAAGsiInsertInProceduralView(spSecSURF,spFSTAssGSMTool);
		PrtService::ObjectUpdate(spSecSURF);
	} 
	else
	{
		spSecSURF = m_lstSpecSecSurfs[1];
	}

	//
	CATISpecObject_var iospJointGSMTool = NULL_var;
	CATListValCATUnicodeString ilstStrPartsInstName;
	for (int i =1; i <= m_lstSpecPrds.Size(); i++)
	{
		CATIProduct_var spInsPrd = m_lstSpecPrds[i];
		CATIProduct_var spRefPrd = spInsPrd->GetReferenceProduct();

		CATUnicodeString strPrtName;
		strPrtName = spRefPrd->GetPartNumber();
		ilstStrPartsInstName.Append(strPrtName);
	}
	
	//找到正确的几何图形集放置点线模型
	GetPartsJointGSMTool(iospJointGSMTool,ilstStrPartsInstName);
	//
	//把连接零件的PRD指针数组放入该几何图形集，确保关联性
	CATUnicodeString strKey("F_ATTEX_LINK_PRT");
	if (!PrtService::IsExistSpecObjectAttEx(strKey,iospJointGSMTool))
	{
		PrtService::SetSepcObjectAttrEx(m_lstSpecPrds,strKey,iospJointGSMTool);
	}
	
	//记录是否有点未能创建成功
	double dCountResult = 0;
	CATBoolean flagwarning = FALSE;

	//采用循环模式，对每个点创建点线模型
	for (int i=1; i <= m_lstSpecPoints.Size(); i++)
	{
		//---------------------------------------------
		//2 创建直线获取交点
		//---------------------------------------------
		//计算法线方向
		double iLength1 = 100.0;
		double iLength2 = -100.0;
		CATICkeParm_var spCkeParm1 = PrtService::LocalInstLitteral(&iLength1, 1, "Length","Length"); 
		CATICkeParm_var spCkeParm2 = PrtService::LocalInstLitteral(&iLength2, 1, "Length", "Length"); 
		CATISpecObject_var spNormalLine = spGSMFac->CreateLineNormal(spFirstSURF,m_lstSpecPoints[i],spCkeParm1,spCkeParm2,CATGSMSameOrientation);

		if (spNormalLine != NULL_var)
		{
			//得到两个交点
			CATISpecObject_var spIntersect01 = spGSMFac->CreateIntersect(spNormalLine,spFirstSURF); 
			CATISpecObject_var spIntersect02 = spGSMFac->CreateIntersect(spNormalLine,spSecSURF);
			
			CATTry{
				PrtService::CAAGsiInsertInProceduralView(spIntersect01,spFSTAssGSMTool);
				spIntersect01->Update();
			}

			// This block is specific for Update Errors
			CATCatch( CATMfErrUpdate, pError ){	
				// cerr << " Update Error: " << (pError-> GetDiagnostic()).ConvertToChar() << endl; 
				Flush(pError) ; 
				// When error happens, what to do 
				spIntersect01->GetFather()->Remove(spIntersect01);
				spIntersect01 = NULL_var;
			}
			CATEndTry;  	

			CATTry{
				PrtService::CAAGsiInsertInProceduralView(spIntersect02,spFSTAssGSMTool);
				spIntersect02->Update();
			}

			// This block is specific for Update Errors
			CATCatch( CATMfErrUpdate, pError ){	
				// cerr << " Update Error: " << (pError-> GetDiagnostic()).ConvertToChar() << endl; 
				Flush(pError) ; 
				// When error happens, what to do 
				spIntersect02->GetFather()->Remove(spIntersect02);
				spIntersect02 = NULL_var;
			}
			CATEndTry; 
			
			//判断交线集中是否存在多个点的情况
			CATBoolean rightFlag = FALSE;
			if (spIntersect01!=NULL_var && spIntersect02!=NULL_var)
			{
				//
				CATIGeometricalElement_var spGeomElePoint01 = spIntersect01;
				CATBody_var spBody01 = spGeomElePoint01->GetBodyResult();
				CATIGeometricalElement_var spGeomElePoint02 = spIntersect02;
				CATBody_var spBody02 = spGeomElePoint02->GetBodyResult();
				//
				CATLISTP(CATCell) ioResult01,ioResult02;
				//
				spBody01->GetAllCells(ioResult01,0);
				spBody02->GetAllCells(ioResult02,0);
				//
				if (ioResult01.Size() == 1 && ioResult02.Size() == 1)
				{
					rightFlag = TRUE;
				}
				else
				{
					//
					spIntersect01->GetFather()->Remove(spIntersect01);
					spIntersect01 = NULL_var;
					spIntersect02->GetFather()->Remove(spIntersect02);
					spIntersect02 = NULL_var;
					//
					flagwarning = TRUE; 
				}
			}
			
			//如果两个都不为空，创建线模型
			if (spIntersect01!=NULL_var && spIntersect02!=NULL_var && rightFlag == TRUE)
			{
				//隐藏能够成功创建的安装点
				PrtService::SetSpecObjShowAttr(m_lstSpecPoints[i],"Hide");

				//创建点线模型
				CATISpecObject_var spFstTypeGSMTool=NULL_var;
				CATBoolean Fstflag = FALSE;

				//获取对应紧固件牌号的几何图形集
				CATListValCATISpecObject_var iolstspFoundResult;
				PrtService::SearchALLSonFromRootGSMTool(iospJointGSMTool,iolstspFoundResult);
				for (int j=1; j<= iolstspFoundResult.Size(); j++)
				{
					CATUnicodeString strAlias = PrtService::GetAlias(iolstspFoundResult[j]);
					CATUnicodeString strEnd = strAlias.SubString(strAlias.GetLengthInChar()-2,2);
					if (strEnd == "集合")
					{
						CATUnicodeString strFstType = strAlias.SubString(0,strAlias.GetLengthInChar()-2);
						if (strFstType == m_alistStrFSTName[1])
						{
							spFstTypeGSMTool = iolstspFoundResult[j];
							Fstflag = TRUE;
							break;
						}
					}
				}

				//如果未能获取到正确的紧固件集合，则创建
				if (Fstflag == FALSE)
				{
					//获得文档指针
					CATIPrtContainer *opiRootContainer = NULL;
					PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
					//不存在则创建
					int oDiag = 0;
					PrtService::CAAGsiCreateGeometricFeatureSets(opiRootContainer,m_alistStrFSTName[1]+"集合",iospJointGSMTool,spFstTypeGSMTool,oDiag,0,0);
				}

				//计数创建成功的点线模型数量
				dCountResult++;
				//调用函数，按照参数信息创建点线模型
				CreateFstLinesAndCircles(spIntersect01,spIntersect02,spFstTypeGSMTool,m_lstSpecPoints[i]);

				//收起几何图形集节点结构树显示
				PrtService::CollapseAllNode(spFstTypeGSMTool);
			}
		}
	}

	//设置主紧固件计数及信息属性
	for (int i=1; i <= m_pListStrPropertyName.Size(); i++)
	{
		//
		CATListValCATUnicodeString lststrJstTypeInfoName,lststrJstTypeInfoValue;
		//属性信息
		GetStrlistFromListPV(i,m_pListStrPropertyName,lststrJstTypeInfoName);
		GetStrlistFromListPV(i,m_pListStrPropertyValue,lststrJstTypeInfoValue);
		//参数信息
		GetStrlistFromListPV(i,m_pListStrSpecialName,lststrJstTypeInfoName);
		GetStrlistFromListPV(i,m_pListStrSpecialValue,lststrJstTypeInfoValue);
		//
		CATListValCATUnicodeString alsstrInfoName,alsstrInfoValue;
		alsstrInfoName.Append("紧固件标准号");
		alsstrInfoName.Append("紧固件名称");
		alsstrInfoName.Append("重量（kg）");
		//
		for (int m=1; m<=alsstrInfoName.Size(); m++)
		{
			for (int n=1; n<=lststrJstTypeInfoName.Size(); n++)
			{
				if (alsstrInfoName[m] == lststrJstTypeInfoName[n])
				{
					alsstrInfoValue.Append(lststrJstTypeInfoValue[n]);
					break;
				}

			}
		}
		//
		SetOrChangeJstTypeInfo(iospJointGSMTool,m_alistStrFSTName[i],dCountResult, alsstrInfoName, alsstrInfoValue);
	}

	//提示信息
	if (flagwarning == TRUE)
	{
		PrtService::ShowDlgNotify("错误信息提示","所选模型第一安装曲面与第二安装曲面在安装方向存在叠加情况，请手动处理！");
	}

	//反写ID Index到PART文件中
	PrtService::SetSepcObjectAttrEx(m_dFstMaxIndex,strIndexKey,spPart);

	//更新整个PART
	PrtService::ObjectUpdate(spPart);
}

//按照参数信息创建点线模型
void PrtFstDesignCmd::CreateFstLinesAndCircles(CATISpecObject_var ispPoint01,CATISpecObject_var ispPoint02,CATISpecObject_var ispJointTypeGSMTool,CATISpecObject_var ispPosPoint)
{
	//
	//获得文档指针
	CATIPrtContainer *opiRootContainer = NULL;
	PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
	//创建几何图形集，以紧固件名称命名
	CATISpecObject_var spFstGSMTool=NULL_var;
	int oDiag = 0 ;
	PrtService::CAAGsiCreateGeometricFeatureSets(opiRootContainer,m_alistStrFSTName[1],ispJointTypeGSMTool,spFstGSMTool,oDiag,0,0);
	//
	//创建连接线
	CATIGSMFactory_var spGSMFac = NULL_var;
	PrtService::GetGSMFactory(m_piDoc,spGSMFac);
	CATISpecObject_var spIntersectLine = spGSMFac->CreateLine(ispPoint01,ispPoint02);
	PrtService::SetAlias(spIntersectLine,"夹持线");
	//
	//创建点在连接线上
	double iDistance=0;
	CATICkeParm_var spCkeParmDis = PrtService::LocalInstLitteral(&iDistance, 1, "Length","iDistance");
	spCkeParmDis->SetUserAccess(CATICkeParm::ReadOnly);
	CATISpecObject_var spStartPoint = spGSMFac->CreatePoint(spIntersectLine,NULL_var,spCkeParmDis,CATGSMOrientation::CATGSMSameOrientation);
	PrtService::SetAlias(spStartPoint,"顶点");
	//拷贝链接顶点模型
	CATISpecObject_var spSpecCopyResult=NULL_var;
	PrtService::CopyFeatureToPartDocument(spSpecCopyResult,spStartPoint,spFstGSMTool,NULL,NULL, TRUE,3);
	//设置颜色及类型
	PrtService::SetAlias(spSpecCopyResult,"顶点");
	PrtService::ObjectUpdate(spSpecCopyResult);
	PrtService::SetSpecObjColor(spSpecCopyResult,3,POINTSYMBOL,0);

	//创建点线模型中的线
	double dstart = 0;
	CATICkeParm_var spCkeParmStart = PrtService::LocalInstLitteral(&dstart, 1, "Length","Start");
	CATICkeParm_var spCkeParmLength = PrtService::LocalInstLitteral(&m_dMainFstLength, 1, "Length","总长度");
	spCkeParmStart->SetUserAccess(CATICkeParm::ReadOnly);
	spCkeParmLength->SetUserAccess(CATICkeParm::ReadOnly);
	CATIGSMDirection_var spDirection = spGSMFac->CreateDirection(spIntersectLine);
	CATISpecObject_var spResultLine = spGSMFac->CreateLine(spStartPoint,spDirection,spCkeParmStart,spCkeParmLength,CATGSMOrientation::CATGSMSameOrientation);
	PrtService::CAAGsiInsertInProceduralView(spResultLine,spFstGSMTool);
	PrtService::SetAlias(spResultLine,m_alistStrFSTName[1]);
	//计算夹层厚度
	double dJstLength = 0;
	CATIMeasurableLine_var spMeasLine = spIntersectLine;
	spMeasLine->GetLength(dJstLength);
	CATUnicodeString strdJstLength;
	strdJstLength.BuildFromNum(dJstLength);
	//挂载夹层厚度参数
	CATListValCATUnicodeString lststrParmName,lststrParmValue;
	lststrParmName.Append("夹持厚度");
	CATUnicodeString strdJstThickLimit;
	strdJstThickLimit.BuildFromNum(m_dMainFstThickLimit);
	lststrParmValue.Append(strdJstThickLimit);

	lststrParmName.Append("夹层厚度");
	lststrParmValue.Append(strdJstLength);
	//ID Index号
	lststrParmName.Append("ID");
	m_dFstMaxIndex++;
	CATUnicodeString strMaxIndex;
	strMaxIndex.BuildFromNum(m_dFstMaxIndex);
	lststrParmValue.Append(strMaxIndex);
	//挂载更改时间参数
	char str[20];
	CHandleString::myGetTime(str);
	lststrParmName.Append("更改时间");
	lststrParmValue.Append(str);
	PrtService::AddSpecObjParams(m_piDoc,spResultLine,lststrParmName,lststrParmValue);
	//----------------------------------------------------------------------------------------------
	//写入属性信息
	//
	//标准号信息
	CATListValCATUnicodeString lststrJstPropertyName,lststrJstPropertyValue;
	GetStrlistFromListPV(1,m_pListStrPropertyName,lststrJstPropertyName);
	GetStrlistFromListPV(1,m_pListStrPropertyValue,lststrJstPropertyValue);
	CATUnicodeString strProNameKey("F_ATTEX_PropertyNameList");
	CATUnicodeString strProValueKey("F_ATTEX_PropertyValueList");
	PrtService::SetSepcObjectAttrEx(lststrJstPropertyName,strProNameKey,spResultLine);
	PrtService::SetSepcObjectAttrEx(lststrJstPropertyValue,strProValueKey,spResultLine);

	//规格信息
	CATListValCATUnicodeString lststrJstSpecialName,lststrJstSpecialValue;
	GetStrlistFromListPV(1,m_pListStrSpecialName,lststrJstSpecialName);
	GetStrlistFromListPV(1,m_pListStrSpecialValue,lststrJstSpecialValue);
	CATUnicodeString strSpecialNameKey("F_ATTEX_SpecialNameList");
	CATUnicodeString strSpecialValueKey("F_ATTEX_SpecialValueList");
	PrtService::SetSepcObjectAttrEx(lststrJstSpecialName,strSpecialNameKey,spResultLine);
	PrtService::SetSepcObjectAttrEx(lststrJstSpecialValue,strSpecialValueKey,spResultLine);

	//写入紧固件类型：螺栓、螺钉、铆钉，将在判断失效计算方法是用
	CATUnicodeString strFSTTypeKey("F_ATTEX_FSTTYPE");
	PrtService::SetSepcObjectAttrEx(m_alistStrFSTType[1],strFSTTypeKey,spResultLine);

	//写入是否为 主紧固件
	CATUnicodeString strFSTMainKey("F_ATTEX_SIGN");
	PrtService::SetSepcObjectAttrEx("YES",strFSTMainKey,spResultLine);

	//写入顶点特征，用于以后直接输出安装定位信息，方向信息可以通过线直接输出
	CATUnicodeString strFSTTopPointKey("F_ATTEX_TopPoint");
	PrtService::SetSepcObjectAttrEx(spStartPoint,strFSTTopPointKey,spResultLine);

	//写入安装点特征，当删除特征时，可直接把该点恢复显示状态
	CATUnicodeString strFSTPosPointKey("F_ATTEX_Point");
	PrtService::SetSepcObjectAttrEx(ispPosPoint,strFSTPosPointKey,spResultLine);

	//写入连接零件列表特征
	CATUnicodeString strPrdLinkKey("F_ATTEX_LINK_PRT");
	PrtService::SetSepcObjectAttrEx(m_lstSpecPrds,strPrdLinkKey,spResultLine);

	//写入紧固件辅助元素，删除的时候直接获取后删除该辅助元素
	CATUnicodeString strProcessPointKey("F_ATTEX_ProcessPoint");
	CATListValCATISpecObject_var alstProcessPoint;
	alstProcessPoint.Append(ispPoint02);
	alstProcessPoint.Append(ispPoint01);
	PrtService::SetSepcObjectAttrEx(alstProcessPoint,strProcessPointKey,spResultLine);

	//
	PrtService::ObjectUpdate(spResultLine);
	PrtService::SetSpecObjColor(spResultLine,8,LINEWIDTH,1);

	if (m_alistStrFSTName.Size() >= 2)
	{
		//根据输入条件确定是否创建圈信息
		//定义两个变量，叠加厚度信息
		double dStartThick=0,dEndThick=0;
		//
		for (int i=1; i<=m_alistStrFSTName.Size()-1; i++)
		{
			//
			//挂载夹层厚度参数
			lststrParmName.RemoveAll();
			lststrParmValue.RemoveAll();
			CATUnicodeString strdCirlceThick;
			strdCirlceThick.BuildFromNum(m_lstCircleThicks[i]);
			lststrParmName.Append("厚度值");
			lststrParmValue.Append(strdCirlceThick);
			lststrParmName.Append("更改时间");
			lststrParmValue.Append(str);
			//
			if (m_lststrCirclePositions[i] == "START")
			{
				//创建位置点,圈
				CATICkeParm_var  spiDistance = PrtService::LocalInstLitteral(&dStartThick, 1, "Length","iDistance");
				spiDistance->SetUserAccess(CATICkeParm::ReadOnly);
				CATISpecObject_var spPosPoint = spGSMFac->CreatePoint(spResultLine,ispPoint01,spiDistance,CATGSMOrientation::CATGSMSameOrientation);
				PrtService::SetAlias(spPosPoint,"安装位置点");
				double dradius = m_lstCircleRadiusValues[i]*0.5;
				CATICkeParm_var  spidCircleValue = PrtService::LocalInstLitteral(&dradius, 1, "Length","半径");
				spidCircleValue->SetUserAccess(CATICkeParm::ReadOnly);
				CATISpecObject_var spCircle = spGSMFac->CreateCircle(spResultLine,spPosPoint,spidCircleValue,FALSE);
				//挂载，改名
				PrtService::CAAGsiInsertInProceduralView(spCircle,spFstGSMTool);
				PrtService::SetAlias(spCircle,m_alistStrFSTName[i+1]);
				PrtService::AddSpecObjParams(m_piDoc,spCircle,lststrParmName,lststrParmValue);
				//-----------------------
				//标准号信息
				CATListValCATUnicodeString lststrJstPropertyName,lststrJstPropertyValue;
				GetStrlistFromListPV(i+1,m_pListStrPropertyName,lststrJstPropertyName);
				GetStrlistFromListPV(i+1,m_pListStrPropertyValue,lststrJstPropertyValue);
				CATUnicodeString strProNameKey("F_ATTEX_PropertyNameList");
				CATUnicodeString strProValueKey("F_ATTEX_PropertyValueList");
				PrtService::SetSepcObjectAttrEx(lststrJstPropertyName,strProNameKey,spCircle);
				PrtService::SetSepcObjectAttrEx(lststrJstPropertyValue,strProValueKey,spCircle);

				//规格信息
				CATListValCATUnicodeString lststrJstSpecialName,lststrJstSpecialValue;
				GetStrlistFromListPV(i+1,m_pListStrSpecialName,lststrJstSpecialName);
				GetStrlistFromListPV(i+1,m_pListStrSpecialValue,lststrJstSpecialValue);
				CATUnicodeString strSpecialNameKey("F_ATTEX_SpecialNameList");
				CATUnicodeString strSpecialValueKey("F_ATTEX_SpecialValueList");
				PrtService::SetSepcObjectAttrEx(lststrJstSpecialName,strSpecialNameKey,spCircle);
				PrtService::SetSepcObjectAttrEx(lststrJstSpecialValue,strSpecialValueKey,spCircle);

				//写入位置信息，出安装BOM时用
				CATUnicodeString strFSTTypeKey("F_ATTEX_POS");
				PrtService::SetSepcObjectAttrEx(m_lststrCirclePositions[i],strFSTTypeKey,spCircle);
				//-----------------------
				PrtService::ObjectUpdate(spCircle);
				//最后叠加，让下个位置值发生变化
				dStartThick -= m_lstCircleThicks[i];
				//更改顶头安装点上移位置值
				spCkeParmDis->Valuate(dStartThick/1000.0);
				CATIGSMPointOnCurve_var spGSMPointOnCurve = spStartPoint;
				spGSMPointOnCurve->SetLength(spCkeParmDis);
				//更新
				PrtService::ObjectUpdate(spFstGSMTool);
			}
			else if (m_lststrCirclePositions[i] == "END")
			{
				//创建位置点,圈
				CATICkeParm_var  spiDistance = PrtService::LocalInstLitteral(&dEndThick, 1, "Length","iDistance");
				spiDistance->SetUserAccess(CATICkeParm::ReadOnly);
				CATISpecObject_var spPosPoint = spGSMFac->CreatePoint(spResultLine,ispPoint02,spiDistance,CATGSMOrientation::CATGSMSameOrientation);
				PrtService::SetAlias(spPosPoint,"安装位置点");
				double dradius = m_lstCircleRadiusValues[i]*0.5;
				CATICkeParm_var  spidCircleValue = PrtService::LocalInstLitteral(&dradius, 1, "Length","半径");
				spidCircleValue->SetUserAccess(CATICkeParm::ReadOnly);
				CATISpecObject_var spCircle = spGSMFac->CreateCircle(spResultLine,spPosPoint,spidCircleValue,FALSE);
				//挂载，改名
				PrtService::CAAGsiInsertInProceduralView(spCircle,spFstGSMTool);
				PrtService::SetAlias(spCircle,m_alistStrFSTName[i+1]);
				PrtService::AddSpecObjParams(m_piDoc,spCircle,lststrParmName,lststrParmValue);
				//-----------------------
				//标准号信息
				CATListValCATUnicodeString lststrJstPropertyName,lststrJstPropertyValue;
				GetStrlistFromListPV(i+1,m_pListStrPropertyName,lststrJstPropertyName);
				GetStrlistFromListPV(i+1,m_pListStrPropertyValue,lststrJstPropertyValue);
				CATUnicodeString strProNameKey("F_ATTEX_PropertyNameList");
				CATUnicodeString strProValueKey("F_ATTEX_PropertyValueList");
				PrtService::SetSepcObjectAttrEx(lststrJstPropertyName,strProNameKey,spCircle);
				PrtService::SetSepcObjectAttrEx(lststrJstPropertyValue,strProValueKey,spCircle);

				//规格信息
				CATListValCATUnicodeString lststrJstSpecialName,lststrJstSpecialValue;
				GetStrlistFromListPV(i+1,m_pListStrSpecialName,lststrJstSpecialName);
				GetStrlistFromListPV(i+1,m_pListStrSpecialValue,lststrJstSpecialValue);
				CATUnicodeString strSpecialNameKey("F_ATTEX_SpecialNameList");
				CATUnicodeString strSpecialValueKey("F_ATTEX_SpecialValueList");
				PrtService::SetSepcObjectAttrEx(lststrJstSpecialName,strSpecialNameKey,spCircle);
				PrtService::SetSepcObjectAttrEx(lststrJstSpecialValue,strSpecialValueKey,spCircle);

				//写入位置信息，出安装BOM时用
				CATUnicodeString strFSTTypeKey("F_ATTEX_POS");
				PrtService::SetSepcObjectAttrEx(m_lststrCirclePositions[i],strFSTTypeKey,spCircle);
				//-----------------------
				PrtService::ObjectUpdate(spCircle);
				//最后叠加，让下个位置值发生变化
				dEndThick += m_lstCircleThicks[i];
				//更新
				PrtService::ObjectUpdate(spFstGSMTool);
			}
		}
	}
}


//设置或者修改 紧固件描述 中的类型信息
void PrtFstDesignCmd::SetOrChangeJstTypeInfo(CATISpecObject_var iospJointGSMTool,CATUnicodeString strChooseFstType,double idCount, CATListValCATUnicodeString lststrJstTypeInfoName, CATListValCATUnicodeString lststrJstTypeInfoValue)
{
	//
	//获得“紧固件描述”参数集
	CATISpecObject_var spJstDescripParmSet=NULL_var;
	PrtService::CreateOrRetrieveGS(iospJointGSMTool,"紧固件描述",spJstDescripParmSet);
	//PrtService::GetParmSetFromSpeObjt(iospJointGSMTool,spJstDescripParmSet,"紧固件描述");
	if (NULL_var != spJstDescripParmSet)
	{
		CATISpecObject_var spJstTypeInfoSet = NULL_var;
		//检查是否存在
		PrtService::GetParmSetFromSpeObjt(spJstDescripParmSet,spJstTypeInfoSet,strChooseFstType,1);
		if (spJstTypeInfoSet!=NULL_var)
		{
			//挂载测试参数
			PrtService::ModifySpecObjCertainParams(m_piDoc,spJstTypeInfoSet,lststrJstTypeInfoName,lststrJstTypeInfoValue);
			//修改个数
			CATListValCATUnicodeString lststrResult;
			CATUnicodeString strExistName = PrtService::GetAlias(spJstTypeInfoSet);
			CHandleString::StringToVector(strExistName,"|",lststrResult);
			//
			double dExistCount=0;
			if (lststrResult.Size() >= 2)
			{
				lststrResult[2].ConvertToNum(&dExistCount);
			}
			//创建名字
			CATUnicodeString stridCount;stridCount.BuildFromNum(idCount+dExistCount);
			CATUnicodeString strJstSetName = strChooseFstType + "|" + stridCount;
			//
			PrtService::SetAlias(spJstTypeInfoSet,strJstSetName);			
		}
		else
		{
			//创建名字
			CATUnicodeString stridCount;stridCount.BuildFromNum(idCount);
			CATUnicodeString strJstSetName = strChooseFstType + "|" + stridCount;
			//
			PrtService::CreateParmSetOnSpeObjt(m_piDoc,spJstDescripParmSet,strJstSetName,spJstTypeInfoSet);
			//挂载测试参数
			PrtService::AddSpecObjParams(m_piDoc,spJstTypeInfoSet,lststrJstTypeInfoName,lststrJstTypeInfoValue);
		}
	}
	else
	{
		//
		PrtService::CreateOrRetrieveGS(iospJointGSMTool,"紧固件描述",spJstDescripParmSet);
		//PrtService::CreateParmSetOnSpeObjt(m_piDoc,iospJointGSMTool,"紧固件描述",spJstDescripParmSet);
		CATISpecObject_var spJstTypeInfoSet = NULL_var;
		//检查是否存在
		PrtService::GetParmSetFromSpeObjt(spJstDescripParmSet,spJstTypeInfoSet,strChooseFstType,1);
		if (spJstTypeInfoSet!=NULL_var)
		{
			//挂载测试参数
			PrtService::ModifySpecObjCertainParams(m_piDoc,spJstTypeInfoSet,lststrJstTypeInfoName,lststrJstTypeInfoValue);
			//修改个数
			CATListValCATUnicodeString lststrResult;
			CATUnicodeString strExistName = PrtService::GetAlias(spJstTypeInfoSet);
			CHandleString::StringToVector(strExistName,"|",lststrResult);
			//
			double dExistCount=0;
			if (lststrResult.Size() >= 2)
			{
				lststrResult[2].ConvertToNum(&dExistCount);
			}
			//创建名字
			CATUnicodeString stridCount;stridCount.BuildFromNum(idCount+dExistCount);
			CATUnicodeString strJstSetName = strChooseFstType + "|" + stridCount;
			//
			PrtService::SetAlias(spJstTypeInfoSet,strJstSetName);
			PrtService::ObjectUpdate(spJstTypeInfoSet);
		}
		else
		{
			//创建名字
			CATUnicodeString stridCount;stridCount.BuildFromNum(idCount);
			CATUnicodeString strJstSetName = strChooseFstType + "|" + stridCount;
			//
			PrtService::CreateParmSetOnSpeObjt(m_piDoc,spJstDescripParmSet,strJstSetName,spJstTypeInfoSet);
			//挂载测试参数
			PrtService::AddSpecObjParams(m_piDoc,spJstTypeInfoSet,lststrJstTypeInfoName,lststrJstTypeInfoValue);
		}

		PrtService::RedrawSpecNode(spJstTypeInfoSet);
	}

	//更新“紧固件描述”节点
	PrtService::RedrawSpecNode(spJstDescripParmSet);
	PrtService::ExpandCollapseNode(spJstDescripParmSet);
	PrtService::ExpandCollapseNode(spJstDescripParmSet);
}

//获取放置点线模型的零件几何图形集
void PrtFstDesignCmd::GetPartsJointGSMTool(CATISpecObject_var &iospJointGSMTool,CATListValCATUnicodeString ilstStrPartsInstName)
{
	//获取所有该几何集下面所有的二级子集
	CATISpecObject_var spLineDefGSMTool = NULL_var;
	PrtService::ObtainGSMTool(m_piDoc,"连接定义",spLineDefGSMTool);
	if (spLineDefGSMTool == NULL_var)
	{
		//获得文档指针
		CATIPrtContainer *opiRootContainer = NULL;
		PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
		//不存在则创建
		int oDiag = 0 ;
		PrtService::CAAGsiCreateGeometricFeatureSets(opiRootContainer,"连接定义",NULL_var,spLineDefGSMTool,oDiag,1,0);
	}
	CATListValCATISpecObject_var iolstspFoundResult;
	PrtService::SearchALLSonFromRootGSMTool(spLineDefGSMTool,iolstspFoundResult);

	//解析这些几何图形集的名称，找到匹配名字的那个
	CATBoolean IsGetTheOne = FALSE;
	for (int i=1; i <= iolstspFoundResult.Size(); i++)
	{
		CATListValCATUnicodeString lststrResult;
		CATUnicodeString strAlias = PrtService::GetAlias(iolstspFoundResult[i]);
		CHandleString::StringToVector(strAlias,"|",lststrResult);

		//先判断个数
		if (lststrResult.Size() == ilstStrPartsInstName.Size())
		{
			//
			CATListValCATUnicodeString lstIsOrNot;
			//
			for (int j = 1; j <= lststrResult.Size(); j ++)
			{
				for (int n = 1; n <= ilstStrPartsInstName.Size(); n ++ )
				{
					if (lststrResult[j] == ilstStrPartsInstName[n])
					{
						lstIsOrNot.Append("1");
						break;
					}
					//
					if (n == ilstStrPartsInstName.Size())
					{
						lstIsOrNot.Append("0");
					}
				}
			}
			//
			CATBoolean IsRight=TRUE;
			for (int n=1; n<=lstIsOrNot.Size(); n++)
			{
				if (lstIsOrNot[n]=="0")
				{
					IsRight = FALSE;
					break;
				}
			}
			//
			if (IsRight == TRUE)
			{
				iospJointGSMTool = iolstspFoundResult[i];
				IsGetTheOne = TRUE;
				break;
			}
		} 
		else //直接跳过
		{
			continue;
		}
	}

	//所有查询后未发现需要的信息时，自动根据输入创建一个几何图形集
	if (IsGetTheOne == FALSE)
	{
		//创建点线模型几何图形集
		CATUnicodeString strPartsJointName;
		for (int i=1; i <= ilstStrPartsInstName.Size(); i++)
		{
			strPartsJointName += ilstStrPartsInstName[i];
			if (i != ilstStrPartsInstName.Size())
			{
				strPartsJointName += "|";
			}
		}
		//不存在则创建
		CATIPrtContainer *opiRootContainer = NULL;
		PrtService::ObtainRootContainer(m_piDoc,opiRootContainer);
		int oDiag = 0 ;
		PrtService::CAAGsiCreateGeometricFeatureSets(opiRootContainer,strPartsJointName,spLineDefGSMTool,iospJointGSMTool,oDiag,0,0);
		//
		CATISpecObject_var spJstDescripParmSet=NULL_var;
		//
		PrtService::CreateOrRetrieveGS(iospJointGSMTool,"紧固件描述",spJstDescripParmSet);
		//PrtService::CreateParmSetOnSpeObjt(m_piDoc,iospJointGSMTool,"紧固件描述",spJstDescripParmSet);
	}
}

void PrtFstDesignCmd::CalculateJoinThickInTop(CATListValCATISpecObject_var ilstspSurf01,CATListValCATISpecObject_var ilstspSurf02, CATListValCATISpecObject_var ilstspPoints)
{
	//
	//获得并清空ISO
	m_piISO->Empty();
	//
	if (ilstspSurf01.Size()==0 || ilstspSurf02.Size()==0 || ilstspPoints.Size()==0)
	{
		//
		m_dJstThickMax = 0;
		m_dJstThickMin = 0;
		//
		m_dFirstPrdThickMin=0;
		m_dFirstPrdThickMax=0;
		//
		return;
	}
	//
	CATBody *piSurfBody01 = NULL,*piSurfBody02 = NULL;
	//
	// defines an open configuration for the operator
	CATSoftwareConfiguration * pConfig = new CATSoftwareConfiguration();
	// defines the data of the operator: configuration + journal
	CATTopData topdata(pConfig,NULL);
	//
	//获得输入曲面的拓扑
	ListPOfCATBody  iBodiesToAssemble01;
	for (int i=1; i<=ilstspSurf01.Size(); i++)
	{
		CATIGeometricalElement_var spGeomEle01 = ilstspSurf01[i];
		CATBody_var spBody = spGeomEle01->GetBodyResult();
		//
		iBodiesToAssemble01.Append(spBody);
	}
	//
	CATGeoFactory* iFactory1 = (iBodiesToAssemble01[1])->GetFactory();
	CATHybAssemble* piHybAss01 = CATCreateNewTopAssemble(iFactory1,&topdata,&iBodiesToAssemble01);
	//
	piHybAss01->Run();
	//获取BODY结果
	piSurfBody01 = piHybAss01->GetResult();
	delete piHybAss01;
	piHybAss01 = NULL;
 
	//获得输入曲面的拓扑
	ListPOfCATBody iBodiesToAssemble02;
	for (int i=1; i<=ilstspSurf02.Size(); i++)
	{
		CATIGeometricalElement_var spGeomEle02 = ilstspSurf02[i];
		CATBody_var spBody = spGeomEle02->GetBodyResult();
		//
		iBodiesToAssemble02.Append(spBody);
	}
	//
	CATGeoFactory* iFactory2 = (iBodiesToAssemble02[1])->GetFactory();
	CATHybAssemble* piHybAss02 = CATCreateNewTopAssemble(iFactory2,&topdata,&iBodiesToAssemble02);
	//
	piHybAss02->Run();
	//获取BODY结果
	piSurfBody02 = piHybAss02->GetResult();
	delete piHybAss02;
	piHybAss02 = NULL;	
	//
	//------------------------------------------------------------
	//获得第一个安装零件的实体特征，该特征只从PARTBODY中获取，其它的均不识别
	CATIProduct_var spInstPrd = m_lstSpecPrds[1];
	CATISpecObject_var spPart=NULL_var;
	PrdService::GetPartFromPrd(spInstPrd,spPart);

	//获取第一个安装面实体MainBody中所有实体特征
	CATListValCATISpecObject_var alstSpecInMainBody;
	//
	if (spPart != NULL_var)
	{
		CATIPartRequest_var spPrtRequest(spPart);
		
		//获取main body
		CATISpecObject_var spMainBody ;
		spPrtRequest->GetMainBody("MfDefault3DView",spMainBody);

		//
		CATIBodyRequest_var spBodyRequest = spMainBody;
		//获取Body Results
		CATListValCATBaseUnknown_var  oResults;
		spBodyRequest->GetResults("MfDefault3DView", oResults);

		for (int j=1; j<=oResults.Size(); j++)
		{
			CATIMf3DBehavior_var sp3DBehavor = oResults[j];
			CATISpecObject_var spSoildObj = oResults[j];
			//
			if(sp3DBehavor!=NULL_var)
			{
				if(sp3DBehavor->IsASolid()==S_OK)
				{
					alstSpecInMainBody.Append(spSoildObj);
				}
			}
		}

	}

	//
	//------------------------------------------------------------
	//采用循环
	for (int i = 1; i <= ilstspPoints.Size(); i ++)
	{
		//
		CATIGeometricalElement_var spGeomElePoint = ilstspPoints[i];
		CATBody_var spBody = spGeomElePoint->GetBodyResult();
		//计算投影
		CATGeoFactory* iFactory = spBody->GetFactory();
		CATHybProject* iPjtSurf01 = NULL;
		iPjtSurf01 = CATCreateTopProject(iFactory,&topdata,spBody,piSurfBody01);
		//
		iPjtSurf01->Run();
		//
		if (iPjtSurf01 != NULL)
		{
			CATBody* piPjtBody01 = iPjtSurf01->GetResult();
			//
			delete iPjtSurf01;
			iPjtSurf01 = NULL;
			//
			if (piPjtBody01 != NULL)
			{
				//创建TOP线,与SURF02求交点
				CATTopLineOperator*  pLineOpera = CATCreateTopLineOperatorNormalToShell(iFactory, &topdata, piPjtBody01,piSurfBody01,DTOPLOGLENGTH);
				pLineOpera->SetFirstLimit(-DTOPLOGLENGTH);
				pLineOpera->SetSecondLimit(DTOPLOGLENGTH);
				pLineOpera->Run();
				CATBody* pBodyDirLine = pLineOpera->GetResult();
				delete pLineOpera;
				pLineOpera = NULL;
				
				//
				if (pBodyDirLine !=NULL)
				{
					//1 创建给第一安装面模型的交集
					for (int j=1; j <= alstSpecInMainBody.Size(); j ++)
					{
						CATIGeometricalElement_var spGeomEleBody = alstSpecInMainBody[j];
						CATBody_var spBody = spGeomEleBody->GetBodyResult();
						//把特征拷贝到现在的PRT文件中
						CATBody_var spResultBody=NULL_var;
						PrtService::CopyTopoBody(iFactory,spBody,m_lstSpecPrds[1],spResultBody);
						//m_piISO->AddElement(spResultBody);
						//
						CATHybIntersect* pIntersect = CATCreateTopIntersect(iFactory, &topdata, pBodyDirLine,spResultBody);
						pIntersect->Run();
						CATBody* pBodyInters = pIntersect->GetResult();
						delete pIntersect;
						pIntersect = NULL;
						//
						if (pBodyInters != NULL)
						{
							//
							CATLISTP(CATCell) ioResult01;
							//
							pBodyInters->GetAllCells(ioResult01,0);
							//如果交点不是两个，跳过去继续
							if (ioResult01.Size() != 2)
							{
								continue;
							}
							//
							CATMathPoint mathPoint1,mathPoint2;
							//
							CATVertex* pVertex01 = (CATVertex*)ioResult01[1];
							CATVertex* pVertex02 = (CATVertex*)ioResult01[2];
							//
							CATPoint* pPoint01=pVertex01->GetPoint();
							CATPoint* pPoint02=pVertex02->GetPoint();
							//
							pPoint01->GetMathPoint(mathPoint1);
							pPoint02->GetMathPoint(mathPoint2);
							//获得两点之间的距离
							double dDistance;
							dDistance = mathPoint1.DistanceTo(mathPoint2);
							if (i == 1)
							{
								m_dFirstPrdThickMax = dDistance;
								m_dFirstPrdThickMin = dDistance;							
							}
							if (dDistance > m_dFirstPrdThickMax)
							{
								m_dFirstPrdThickMax = dDistance;
							}
							if (dDistance < m_dFirstPrdThickMin)
							{
								m_dFirstPrdThickMin = dDistance;
							}
						}

						//
						iFactory->Remove(spResultBody,CATICGMContainer::RemoveDependancies);

					}

					//2 创建与所选曲面之间的交集
					CATHybIntersect* pIntersect = CATCreateTopIntersect(iFactory, &topdata, pBodyDirLine,piSurfBody02);
					pIntersect->Run();
					CATBody* pBodyInters = pIntersect->GetResult();
					delete pIntersect;
					pIntersect = NULL;
					//
					if (pBodyInters != NULL)
					{
						//
						CATLISTP(CATCell) ioResult01,ioResult02;
						//
						piPjtBody01->GetAllCells(ioResult01,0);
						pBodyInters->GetAllCells(ioResult02,0);
						//如果发现交点超过两个，跳过该层循环
						if (ioResult01.Size()!=1 || ioResult02.Size()!=1)
						{
							continue;
						}
						//
						CATMathPoint mathPoint1,mathPoint2;
						//
						CATVertex* pVertex01 = (CATVertex*)ioResult01[1];
						CATVertex* pVertex02 = (CATVertex*)ioResult02[1];
						//
						CATPoint* pPoint01=pVertex01->GetPoint();
						CATPoint* pPoint02=pVertex02->GetPoint();
						//
						pPoint01->GetMathPoint(mathPoint1);
						pPoint02->GetMathPoint(mathPoint2);
						//获得两点之间的距离
						double dDistance;
						dDistance = mathPoint1.DistanceTo(mathPoint2);
						if (i == 1)
						{
							m_dJstThickMax = dDistance;
							m_dJstThickMin = dDistance;							
						}
						if (dDistance > m_dJstThickMax)
						{
							m_dJstThickMax = dDistance;
						}
						if (dDistance < m_dJstThickMin)
						{
							m_dJstThickMin = dDistance;
						}
						//获取坐标点，显示箭头
						CATMathDirectionf oArrowVector(mathPoint1,mathPoint2);
						//在OriginPoint处创建3D fixed arrow.
						CAT3DFixedArrowGP *pArrowGP = new CAT3DFixedArrowGP(mathPoint1,oArrowVector,20,5);
						//创建图形属性，包括Color和Thickness
						CATGraphicAttributeSet AttributsDir;
						AttributsDir.SetColor(GREEN);
						AttributsDir.SetThickness(2);
						//
						CAT3DCustomRep * pRepForArrow= new CAT3DCustomRep(pArrowGP,AttributsDir);
						//
						CATModelForRep3D *piRepPtAlias = new CATModelForRep3D();
						piRepPtAlias->SetRep(pRepForArrow);		
						//
						m_piISO->AddElement(piRepPtAlias);
						//箭头临时变量
						CAT3DBagRep *pi3DBagRep = new CAT3DBagRep();pi3DBagRep->AddChild(*pRepForArrow);
						//
						CATFrmLayout *pFrmLayout = CATFrmLayout::GetCurrentLayout();
						CATFrmWindow *pFrmWindow = pFrmLayout->GetCurrentWindow();
						CATViewer *pViewer = pFrmWindow->GetViewer();
						pViewer->AddRep(pi3DBagRep);pViewer->Draw();
					}
					
				}				
				
			}
		}
	}

	// Releases the configuration
	pConfig->Release();
}

//清理紧固件信息数组函数
void PrtFstDesignCmd::ClearFstInfoLst()
{
	//清除紧固件属性信息参数内存
	for (int k=1;k<=m_pListStrPropertyName.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrPropertyName[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrSpecialName.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrSpecialName[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrPropertyValue.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrPropertyValue[k];
		delete TempLstStr;
	}
	for (int k=1;k<=m_pListStrSpecialValue.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_pListStrSpecialValue[k];
		delete TempLstStr;
	}
	//
	m_pListStrPropertyName.RemoveAll();
	m_pListStrPropertyValue.RemoveAll();
	m_pListStrSpecialName.RemoveAll();
	m_pListStrSpecialValue.RemoveAll();
	//

	m_alistStrFSTType.RemoveAll();
	//
	m_lststrCirclePositions.RemoveAll();
	m_alistStrFSTName.RemoveAll();
	//
	m_lstCircleRadiusValues.RemoveAll();
	m_lstCircleThicks.RemoveAll();

	//
	m_userChoosedFlag = FALSE;
		
	//清空ML内容
	m_pDlg->_ChoosedFstDetailInfoML->ClearLine();
	m_pDlg->_ChoosedFstNormalInfoML->ClearLine();
}

//从PV列表中获得指定的字符串
void PrtFstDesignCmd::GetStrlistFromListPV(int iCount,CATListPV ipListStrName,CATListValCATUnicodeString &ioalstName)
{
	CATLISTV(CATUnicodeString) *TempLstStr = (CATLISTV(CATUnicodeString) *) ipListStrName[iCount];
	for (int j=1;j<=TempLstStr->Size();j++)
	{
		CATUnicodeString StrHeadName = (*TempLstStr)[j];
		ioalstName.Append(StrHeadName);
	}
}
//选择查看紧固件详细信息响应
void PrtFstDesignCmd::ChoosedFstNormalInfoMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空数据
	m_pDlg->_ChoosedFstDetailInfoML->ClearLine();

	//
	//获取所选信息
	int  iSize = m_pDlg->_ChoosedFstNormalInfoML->GetSelectCount();
	if (iSize != 0 )
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pDlg->_ChoosedFstNormalInfoML->GetSelect(ioTabRow,iSize);
		//
		CATListValCATUnicodeString lststrJstTypeInfoName,lststrJstTypeInfoValue;
		//属性信息
		GetStrlistFromListPV(ioTabRow[0]+1,m_pListStrPropertyName,lststrJstTypeInfoName);
		GetStrlistFromListPV(ioTabRow[0]+1,m_pListStrPropertyValue,lststrJstTypeInfoValue);
		//参数信息
		GetStrlistFromListPV(ioTabRow[0]+1,m_pListStrSpecialName,lststrJstTypeInfoName);
		GetStrlistFromListPV(ioTabRow[0]+1,m_pListStrSpecialValue,lststrJstTypeInfoValue);
		//
		if (ioTabRow[0]+1 >= 2)
		{
			lststrJstTypeInfoName.Append("安装位置");
			lststrJstTypeInfoValue.Append(m_lststrCirclePositions[ioTabRow[0]]);
		}

		//显示
		for (int i=1; i<=lststrJstTypeInfoName.Size(); i++)
		{
			m_pDlg->_ChoosedFstDetailInfoML->SetColumnItem(0,lststrJstTypeInfoName[i]);
			m_pDlg->_ChoosedFstDetailInfoML->SetColumnItem(1,lststrJstTypeInfoValue[i]);
		}
	}
}


//选择紧固件类型
void PrtFstDesignCmd::ChooseFstCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//------------------------------------------------------------------------------------------
	//弹出选择紧固件对话框，进行操作
	//------------------------------------------------------------------------------------------
	m_pFstAccessDlg = new PrtFstAccessDlg();
	m_pFstAccessDlg->Build();
	m_pFstAccessDlg->SetVisibility(CATDlgShow);
	m_pFstAccessDlg->SetOKSensitivity(CATDlgDisable);

	//
	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_pFstAccessDlg, 
		m_pFstAccessDlg->GetDiaOKNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::OkFstAccessDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pFstAccessDlg, 
		m_pFstAccessDlg->GetWindCloseNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseFstAccessDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_pFstAccessDlg, 
		m_pFstAccessDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseFstAccessDlgCB,
		NULL);
	//
	AddAnalyseNotificationCB (m_pFstAccessDlg->_GoToChoosePB, 
		m_pFstAccessDlg->_GoToChoosePB->GetPushBActivateNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::AccessDlgGoToChoosePBCB,
		NULL);

}

//---------------------------------
//对ACCESS DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::OkFstAccessDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	for (int i=1;i<=m_alistStrFSTName.Size();i++)
	{
		//
		m_pDlg->_ChoosedFstNormalInfoML->SetColumnItem(0,m_alistStrFSTName[i]);
		m_pDlg->_ChoosedFstNormalInfoML->SetColumnItem(1,m_alistStrFSTType[i]);
	}
	//存入数据库，所选组合
	if (m_pFstAccessDlg->_SaveBackCheckB->GetState() == CATDlgCheck)
	{
		//
		CATListValCATUnicodeString alsstrSendBackToKnow;
		alsstrSendBackToKnow.Append("KnowledgeBase=KnowledgeBase");
		alsstrSendBackToKnow.Append(m_strSendKnowMainFst);
		alsstrSendBackToKnow.Append(m_strSendKnowNutFst);
		alsstrSendBackToKnow.Append(m_lststrSendKnowWasherFst);
		//
		//调用查询接口
		HRESULT hr = MBDWebservice::InsertDataWebService(alsstrSendBackToKnow);
	}
	//

	m_userChoosedFlag = TRUE;
	ChangeOKApplyState();
	
	//
	m_pFstAccessDlg->RequestDelayedDestruction();
	m_pFstAccessDlg=NULL;
}
void PrtFstDesignCmd::CloseFstAccessDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//调用清空紧固件信息数组函数
	ClearFstInfoLst();
	//
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles02.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults02.RemoveAll();

	//
	m_pFstAccessDlg->RequestDelayedDestruction();
	m_pFstAccessDlg=NULL;
}

void PrtFstDesignCmd::AccessDlgGoToChoosePBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//调用清空紧固件信息数组函数
	ClearFstInfoLst();
	//
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles02.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults02.RemoveAll();
	//
	m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();
	//
	m_pFstAccessDlg->SetOKSensitivity(CATDlgDisable);


	//
	if (m_pFstAccessDlg->_FreeStyleRadioB->GetState() == CATDlgCheck)
	{
		m_pFstFreeStyleDlg = new PrtFstFreeStyleDlg();
		m_pFstFreeStyleDlg->Build();
		m_pFstFreeStyleDlg->SetVisibility(CATDlgShow);
		
		//设置主对话框隐藏
		m_pFstAccessDlg->SetVisibility(CATDlgHide);

		//对按钮状态的控制
		m_pFstFreeStyleDlg->_NextStepPB->SetSensitivity(CATDlgDisable);

		//对按钮状态的控制
		m_pFstFreeStyleDlg->_GoToSearchPB->SetSensitivity(CATDlgDisable);

		//
		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstFreeStyleDlg, 
			m_pFstFreeStyleDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstFreeStyleDlg, 
			m_pFstFreeStyleDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstFreeStyleDlg->_GoToSearchPB, 
			m_pFstFreeStyleDlg->_GoToSearchPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleDlgGoToSearchPBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstFreeStyleDlg->_LastStepPB, 
			m_pFstFreeStyleDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstFreeStyleDlg->_NextStepPB, 
			m_pFstFreeStyleDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleDlgNextStepPBCB,
			NULL);

		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstFreeStyleDlg->_SearchResultsML, 
			m_pFstFreeStyleDlg->_SearchResultsML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleDlgSearchResultsMLCB,
			NULL);

	} 
	else
	{
		m_pFstKnowledgeBasedDlg = new PrtFstKnowledgeBasedDlg();
		m_pFstKnowledgeBasedDlg->Build();
		m_pFstKnowledgeBasedDlg->SetVisibility(CATDlgShow);

		//设置主对话框隐藏
		m_pFstAccessDlg->SetVisibility(CATDlgHide);

		//
		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg, 
			m_pFstKnowledgeBasedDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg, 
			m_pFstKnowledgeBasedDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg->_GoToSearchPB, 
			m_pFstKnowledgeBasedDlg->_GoToSearchPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedDlgGoToSearchPBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg->_LastStepPB, 
			m_pFstKnowledgeBasedDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg->_NextStepPB, 
			m_pFstKnowledgeBasedDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedDlgNextStepPBCB,
			NULL);

		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstKnowledgeBasedDlg->_SearchResultML, 
			m_pFstKnowledgeBasedDlg->_SearchResultML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedDlgSearchResultsMLCB,
			NULL);
	}
}


//---------------------------------
//对FreeStyle DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstFreeStyleDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleDlg->RequestDelayedDestruction();
	m_pFstFreeStyleDlg=NULL;

	//
	//设置主对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);

}

void PrtFstDesignCmd::FstFreeStyleDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstFreeStyleDlg->RequestDelayedDestruction();
	m_pFstFreeStyleDlg=NULL;

	//
	//设置主对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);
}

//
//响应函数：计算自由选择模式主紧固件标识信息
void PrtFstDesignCmd::FstFreeStyleDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//初始化状态
	//
	m_pFstFreeStyleDlg->_SearchResultsML->ClearLine();
	//
	//对按钮状态的控制
	m_pFstFreeStyleDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstFreeStyleDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= m_listStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<m_listStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		m_lstStrMainFstTitles01.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles01);
		
		//清除已有的指针信息
		for (int k=1;k<=m_plstMainFstResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults01[k];
			delete TempLstStr;
		}
		m_plstMainFstResults01.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}
				
				//
				m_plstMainFstResults01.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=6; m++)
				{
					//
					if (m_pFstFreeStyleDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles01[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstFreeStyleDlg->_SearchResultsML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}			

			}			
		}

		//			
	}
}

//根据输入的行数信息从数据列表中获取希望的字符串信息
void PrtFstDesignCmd::GetChoosedMLValue(int idLine,CATListPV iplstMainFstResults, CATListValCATUnicodeString &iolstStrValue)
{
	//
	iolstStrValue.RemoveAll();
	//
	for (int k=1;k<=iplstMainFstResults.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)iplstMainFstResults[k];
		CATUnicodeString strTemp = (*TempLstStr)[idLine];
		iolstStrValue.Append(strTemp);
	}
}


//响应函数：ML选择单项内容
void PrtFstDesignCmd::FstFreeStyleDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//获取所选信息
	int  iSize = m_pFstFreeStyleDlg->_SearchResultsML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleDlg->_SearchResultsML->GetSelect(ioTabRow,iSize);
		//
		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstMainFstResults01,m_lstStrMainFstChoosed01);
		//
		CATUnicodeString strType01(""),strType02("");
		int selectComboItem = m_pFstFreeStyleDlg->_Combo01->GetSelect();
		if (selectComboItem != 0)
		{
			m_pFstFreeStyleDlg->_Combo01->GetLine(strType01,selectComboItem);
		}
		//
		for (int i=1; i<= m_lstStrMainFstTitles01.Size(); i++)
		{
			//
			if (m_lstStrMainFstTitles01[i]=="紧固件名称")
			{
				strType02=m_lstStrMainFstChoosed01[i];
			}
			//
			/*if (m_lstStrMainFstTitles01[i]=="长度计算类型")
			{
				strType03=m_lstStrMainFstChoosed01[i];
			}*/

			//
			if (m_lstStrMainFstTitles01[i]=="头部类型")
			{
				m_strMainFstHeadType=m_lstStrMainFstChoosed01[i];
			}
			
		}
		//
	/*	if (strType03 != "")
		{
			m_strMainFstTypeFlag = strType01+"|"+strType02+"|"+strType03;
		} 
		else
		{*/
			m_strMainFstTypeFlag = strType01+"|"+strType02;
		//}
		
		//对按钮状态的控制
		m_pFstFreeStyleDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstFreeStyleDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}
}
//-------------------------------------------------------------
//显示并初始化下一个对话框，m_pFstFreeStyleMainBoltDlg
//-------------------------------------------------------------
void PrtFstDesignCmd::FstFreeStyleDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	if (m_pFstFreeStyleMainBoltDlg == NULL)
	{
		m_pFstFreeStyleMainBoltDlg = new PrtFstFreeStyleMainBoltDlg();
		m_pFstFreeStyleMainBoltDlg->Build();
		m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgShow);
		
		//显示计算的相关参数信息
		CATUnicodeString strValue01;
		strValue01.BuildFromNum(m_dJstThickMax);
		strValue01 += "mm";
		m_pFstFreeStyleMainBoltDlg->_MaxLayerThicknessEditor->SetText(strValue01);
		//
		CATUnicodeString strValue02;
		strValue02.BuildFromNum(m_dJstThickMin);
		strValue02 += "mm";
		m_pFstFreeStyleMainBoltDlg->_MinLayerThicknessEditor->SetText(strValue02);
		//
		CATUnicodeString strValue03;
		strValue03.BuildFromNum(m_dFirstPrdThickMax);
		strValue03 += "mm";
		m_pFstFreeStyleMainBoltDlg->_FirstLayerThicknessEditor->SetText(strValue03);

		//
		//设置前对话框隐藏
		m_pFstFreeStyleDlg->SetVisibility(CATDlgHide);

		//对按钮状态的控制
		m_pFstFreeStyleMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
		//
		if (m_dJstThickMax != m_dJstThickMin)
		{
			PrtService::ShowDlgNotify("提示","夹持厚度不均匀分布，过滤规则将失效，请结束选用后使用更新紧固件功能校验安装有效性！");
		}
		//设置铆钉计算规则按钮的显隐
		CATUnicodeString strType01("");
		int selectComboItem = m_pFstFreeStyleDlg->_Combo01->GetSelect();
		if (selectComboItem != 0)
		{
			m_pFstFreeStyleDlg->_Combo01->GetLine(strType01,selectComboItem);
		}
		if (strType01 != "铆钉")
		{
			m_pFstFreeStyleMainBoltDlg->_CalCombo->SetSensitivity(CATDlgDisable);
		} 
		else
		{
			m_pFstFreeStyleMainBoltDlg->_CalCombo->SetSensitivity(CATDlgEnable);
		}

		//
		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg, 
			m_pFstFreeStyleMainBoltDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleMainBoltDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg, 
			m_pFstFreeStyleMainBoltDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleMainBoltDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg->_GoToSearchPB, 
			m_pFstFreeStyleMainBoltDlg->_GoToSearchPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleMainBoltDlgGoToSearchPBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg->_LastStepPB, 
			m_pFstFreeStyleMainBoltDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleMainBoltDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg->_NextStepPB, 
			m_pFstFreeStyleMainBoltDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleMainBoltDlgNextStepPBCB,
			NULL);

		//
		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstFreeStyleMainBoltDlg->_SearchResultML, 
			m_pFstFreeStyleMainBoltDlg->_SearchResultML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleMainBoltDlgSearchResultsMLCB,
			NULL);
	}
	else
	{
		m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgShow);
		//
		//设置前对话框隐藏
		m_pFstFreeStyleDlg->SetVisibility(CATDlgHide);
	}

}

//---------------------------------
//对FreeStyle MainBolt DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstFreeStyleMainBoltDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
	m_pFstFreeStyleMainBoltDlg=NULL;

	//
	//设置前对话框显示
	m_pFstFreeStyleDlg->SetVisibility(CATDlgShow);

}

void PrtFstDesignCmd::FstFreeStyleMainBoltDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
	m_pFstFreeStyleMainBoltDlg=NULL;

	//
	//设置前对话框显示
	m_pFstFreeStyleDlg->SetVisibility(CATDlgShow);
}

//
void PrtFstDesignCmd::FstFreeStyleMainBoltDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstFreeStyleMainBoltDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleMainBoltDlg->_SearchResultML->GetSelect(ioTabRow,iSize);
		//
		//
		CATUnicodeString strLeftValue;
		m_pFstFreeStyleMainBoltDlg->_SearchResultML->GetColumnItem(10,strLeftValue,ioTabRow[0]);
		strLeftValue.ConvertToNum(&m_dLeftCheck,"%lf");

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstMainFstResults02,m_lstStrMainFstChoosed02);

		//获得头部厚度
		for (int i=1; i<= m_lstStrMainFstChoosed02.Size(); i++)
		{
			//
			if (m_lstStrMainFstTitles02[i] == "头部厚度")
			{
				//
				CATUnicodeString strThickness = m_lstStrMainFstChoosed02[i];
				strThickness.ConvertToNum(&m_dHeadThickness,"%lf");
			}

			//需要修改部分，当名称更正后
			if (/*m_lstStrMainFstTitles02[i] == "直径" ||*/ m_lstStrMainFstTitles02[i] == "公称直径")
			{
				//
				m_strdFstDiameterValue = m_lstStrMainFstChoosed02[i];
				m_strdFstDiameterValue.ConvertToNum(&m_dFstDiameterValue,"%lf");
			}
		}

		//对按钮状态的控制
		m_pFstFreeStyleMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstFreeStyleMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}
}

void PrtFstDesignCmd::FstFreeStyleMainBoltDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//初始化状态
	//
	m_pFstFreeStyleMainBoltDlg->_SearchResultML->ClearLine();
	//
	//对按钮状态的控制
	m_pFstFreeStyleMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstFreeStyleDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrMainFstChoosed01[1];
	alsStrSearchItemsValue.Append(str01);
	//
	double dMin = m_pFstFreeStyleMainBoltDlg->_MinSpinner->GetValue() * 1000;
	double dMax = m_pFstFreeStyleMainBoltDlg->_MaxSpinner->GetValue() * 1000;
	CATUnicodeString strdMin; strdMin.BuildFromNum(dMin,"%lf");
	CATUnicodeString strdMax; strdMax.BuildFromNum(dMax,"%lf");
	CATUnicodeString str02 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[2] + "=" + strdMin + "-" + strdMax;
	alsStrSearchItemsValue.Append(str02);

	//拆分字符串 "F_ATTEX_FSTTYPE" ，获得其类型信息
	CATListValCATUnicodeString alststrDetailType;
	CHandleString::StringToVector(m_strMainFstTypeFlag,"|",alststrDetailType);
	//
	int iSeleIndex = m_pFstFreeStyleMainBoltDlg->_CalCombo->GetSelect();
	CATUnicodeString strIndex; strIndex.BuildFromNum(iSeleIndex);

	//----------------------------------------------------
	//需要按照主紧固件的类型反算夹持信息
	//----------------------------------------------------
	if (alststrDetailType[1] == "螺栓")
	{
		//夹持厚度过滤
		CATUnicodeString strThick;
		//strThick.BuildFromNum(m_dJstThickMax*LOWERBOLTMIN,"%lf");
		strThick.BuildFromNum(m_dJstThickMin*LOWERBOLTMIN,"%lf");
		//
		CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=>" + strThick;
		alsStrSearchItemsValue.Append(str03);

		//-------------------------------------------------------------------------------------------------------------
		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult[2];
			CATUnicodeString strCutNumb=strListOfSearchResult[3];
			double dCount=0,dCutNumb=1;
			strCount.ConvertToNum(&dCount);
			strCutNumb.ConvertToNum(&dCutNumb);
			//
			m_lstStrMainFstTitles02.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

			//清除已有的指针信息
			for (int k=1;k<=m_plstMainFstResults02.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
				delete TempLstStr;
			}
			m_plstMainFstResults02.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
			//
			if (cyclecount==dCount && dCount!=0)
			{
				//
				for (int i=1; i<=dCutNumb; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstMainFstResults02.Append(LstStrAtrrValue01);

					//
					for (int m=0; m<=9; m++)
					{
						//
						if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
						{
							for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
							{
								m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
							}

							//
							break;
						}				
					}			

				}			
			}

			//根据个数，开展循环，计算每一条数据的“**余量**”信息
			for (int i=1; i<=dCount; i++)
			{
				//获得该行的信息
				CATListValCATUnicodeString lststrMainFstValue;
				GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
				//
				double dThickLimit;
				//
				for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
				{
					//
					if (m_lstStrMainFstTitles02[j] == "夹持厚度")
					{
						lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						break;
					}

				}
				//
				//
				if (m_dJstThickMax == m_dJstThickMin)
				{
					double dLeft = dThickLimit-m_dJstThickMax;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
				} 
				else
				{
					double dLeft01 = dThickLimit-m_dJstThickMax;
					double dLeft02 = dThickLimit-m_dJstThickMin;
					CATUnicodeString strdLeft01,strdLeft02;
					strdLeft01.BuildFromNum(dLeft01);
					strdLeft02.BuildFromNum(dLeft02);
					CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
				}
				
			}
		}
	}

	if (alststrDetailType[1] == "螺钉")
	{
		//夹持厚度过滤
		//CATUnicodeString strThick;
		//strThick.BuildFromNum(m_dJstThickMax+10,"%lf");
		////
		//CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=<" + strThick;
		//alsStrSearchItemsValue.Append(str03);

		//-------------------------------------------------------------------------------------------------------------
		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult[2];
			CATUnicodeString strCutNumb=strListOfSearchResult[3];
			double dCount=0,dCutNumb=1;
			strCount.ConvertToNum(&dCount);
			strCutNumb.ConvertToNum(&dCutNumb);
			//
			m_lstStrMainFstTitles02.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

			//清除已有的指针信息
			for (int k=1;k<=m_plstMainFstResults02.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
				delete TempLstStr;
			}
			m_plstMainFstResults02.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
			//
			if (cyclecount==dCount && dCount!=0)
			{
				//
				for (int i=1; i<=dCutNumb; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstMainFstResults02.Append(LstStrAtrrValue01);

					//
					for (int m=0; m<=10; m++)
					{
						//
						if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
						{
							for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
							{
								m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
							}

							//
							break;
						}				
					}			

				}			
			}

			//根据个数，开展循环，计算每一条数据的“**余量**”信息
			for (int i=1; i<=dCount; i++)
			{
				//获得该行的信息
				CATListValCATUnicodeString lststrMainFstValue;
				GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
				//
				double dThickLimit;
				//
				for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
				{
					//
					if (m_lstStrMainFstTitles02[j] == "总长度")
					{
						lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						break;
					}

				}
				//
				//double dLeft = dThickLimit-m_dJstThickMax;
				//CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
				////
				//m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
				if (m_dJstThickMax == m_dJstThickMin)
				{
					double dLeft = dThickLimit-m_dJstThickMax;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
				} 
				else
				{
					double dLeft01 = dThickLimit-m_dJstThickMax;
					double dLeft02 = dThickLimit-m_dJstThickMin;
					CATUnicodeString strdLeft01,strdLeft02;
					strdLeft01.BuildFromNum(dLeft01);
					strdLeft02.BuildFromNum(dLeft02);
					CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
				}
			}
		}
	}

	if (alststrDetailType[1] == "铆钉")
	{
		//
		CATListValCATUnicodeString alststrDetailTypeTemp;
		CHandleString::StringToVector(m_strMainFstTypeFlag,"|",alststrDetailTypeTemp);
		if (alststrDetailTypeTemp.Size() == 2)
		{
			//
			m_strMainFstTypeFlag += "|" + strIndex;
		} 
		else
		{
			m_strMainFstTypeFlag = "";
			//
			for (int i = 1; i < alststrDetailTypeTemp.Size(); i++)
			{
				m_strMainFstTypeFlag += alststrDetailTypeTemp[i] + "|";
			}
			//
			m_strMainFstTypeFlag += strIndex;

		}

		//
		//再细分情况
		if (strIndex == "0") //无计算规则
		{
			//夹持厚度过滤
			CATUnicodeString strThick;
			strThick.BuildFromNum(m_dJstThickMin,"%lf");
			//
			CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=>" + strThick;
			alsStrSearchItemsValue.Append(str03);
			//------------------------------------------------------------------------------------------------------
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrMainFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstMainFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
					delete TempLstStr;
				}
				m_plstMainFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstMainFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=9; m++)
						{
							//
							if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}			

					}			
				}

				//根据个数，开展循环，计算每一条数据的“**余量**”信息
				for (int i=1; i<=dCount; i++)
				{
					//获得该行的信息
					CATListValCATUnicodeString lststrMainFstValue;
					GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
					//
					double dThickLimit;
					//
					for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
					{
						//
						if (m_lstStrMainFstTitles02[j] == "夹持厚度")
						{
							lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
							break;
						}

					}
					//
					/*
					double dLeft = dThickLimit-m_dJstThickMax;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					*/
					if (m_dJstThickMax == m_dJstThickMin)
					{
						double dLeft = dThickLimit-m_dJstThickMax;
						CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					} 
					else
					{
						double dLeft01 = dThickLimit-m_dJstThickMax;
						double dLeft02 = dThickLimit-m_dJstThickMin;
						CATUnicodeString strdLeft01,strdLeft02;
						strdLeft01.BuildFromNum(dLeft01);
						strdLeft02.BuildFromNum(dLeft02);
						CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
					}
				}
			}
		}

		//
		else if (strIndex == "1") //平墩头铆钉
		{
			//
			double dSTDLengthMin=0,dSTDLengthMax=0;
			if (dMin > 4)
			{
				dSTDLengthMin = (dMin + 1.1*m_dJstThickMin)*LOWERMIN;
			}
			else
			{
				dSTDLengthMin = (dMin + 1.3*m_dJstThickMin)*LOWERMIN;
			}

			//
			if (dMax > 4)
			{
				dSTDLengthMax = (dMax + 1.1*m_dJstThickMax) * UPPERMAX;
			}
			else
			{
				dSTDLengthMax = (dMax + 1.3*m_dJstThickMax) * UPPERMAX;
			}

			//
			CATUnicodeString strdSTDLengthMax,strdSTDLengthMin;
			strdSTDLengthMin.BuildFromNum(dSTDLengthMin,"%lf");
			strdSTDLengthMax.BuildFromNum(dSTDLengthMax,"%lf");

			//
			CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=" + strdSTDLengthMin + "-" + strdSTDLengthMax;
			alsStrSearchItemsValue.Append(str03);

			//------------------------------------------------------------------------------------------------------
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrMainFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstMainFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
					delete TempLstStr;
				}
				m_plstMainFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstMainFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=9; m++)
						{
							//
							if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}			

					}			
				}

				//根据个数，开展循环，计算每一条数据的“**余量**”信息
				for (int i=1; i<=dCount; i++)
				{
					//获得该行的信息
					CATListValCATUnicodeString lststrMainFstValue;
					GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
					//
					double dThickLimit=0,dDiaValue=0,dSTDThick=0;
					//
					for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
					{
						//
						if (/*m_lstStrMainFstTitles02[j] == "直径" ||*/ m_lstStrMainFstTitles02[j] == "公称直径")
						{
							lststrMainFstValue[j].ConvertToNum(&dDiaValue,"%lf");
						}

						if (m_lstStrMainFstTitles02[j] == "夹持厚度")
						{
							lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						}

					}
					//
					//
					/*
					if (dDiaValue>4)
					{
						dSTDThick = dDiaValue + 1.1*m_dJstThickMax;
					}
					else
					{
						dSTDThick = dDiaValue + 1.3*m_dJstThickMax;
					}
					//
					double dLeft = dThickLimit-dSTDThick;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					*/
					if (m_dJstThickMax == m_dJstThickMin)
					{
						if (dDiaValue>4)
						{
							dSTDThick = dDiaValue + 1.1*m_dJstThickMax;
						}
						else
						{
							dSTDThick = dDiaValue + 1.3*m_dJstThickMax;
						}
						//
						double dLeft = dThickLimit-dSTDThick;
						CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					} 
					else
					{
						double dSTDThick01,dSTDThick02;
						//
						if (dDiaValue>4)
						{
							dSTDThick01 = dDiaValue + 1.1*m_dJstThickMax;
						}
						else
						{
							dSTDThick01 = dDiaValue + 1.3*m_dJstThickMax;
						}
						//
						if (dDiaValue>4)
						{
							dSTDThick02 = dDiaValue + 1.1*m_dJstThickMin;
						}
						else
						{
							dSTDThick02 = dDiaValue + 1.3*m_dJstThickMin;
						}
						//
						double dLeft01 = dThickLimit-dSTDThick01;
						double dLeft02 = dThickLimit-dSTDThick02;
						CATUnicodeString strdLeft01,strdLeft02;
						strdLeft01.BuildFromNum(dLeft01);
						strdLeft02.BuildFromNum(dLeft02);
						CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
					}
				}
			}

		}
		//
		else if (strIndex == "2") //压窝铆接平墩头铆钉
		{
			//
			double dSTDLengthMin=0,dSTDLengthMax=0;
			dSTDLengthMin = (1.3*dMin + m_dJstThickMax + m_dFirstPrdThickMax) * LOWERMIN;
			dSTDLengthMax = (1.3*dMax + m_dJstThickMax + m_dFirstPrdThickMax) * UPPERMAX;

			//
			CATUnicodeString strdSTDLengthMax,strdSTDLengthMin;
			strdSTDLengthMin.BuildFromNum(dSTDLengthMin,"%lf");
			strdSTDLengthMax.BuildFromNum(dSTDLengthMax,"%lf");

			//
			CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=" + strdSTDLengthMin + "-" + strdSTDLengthMax;
			alsStrSearchItemsValue.Append(str03);

			//---------------------------------------------------------------------------------------------------------------------------
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrMainFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstMainFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
					delete TempLstStr;
				}
				m_plstMainFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstMainFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=9; m++)
						{
							//
							if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}			

					}			
				}

				//
				//根据个数，开展循环，计算每一条数据的“**余量**”信息
				for (int i=1; i<=dCount; i++)
				{
					//获得该行的信息
					CATListValCATUnicodeString lststrMainFstValue;
					GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
					//
					double dThickLimit=0,dDiaValue=0,dSTDThick=0;
					//
					for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
					{
						//
						if (/*m_lstStrMainFstTitles02[j] == "直径" ||*/ m_lstStrMainFstTitles02[j] == "公称直径")
						{
							lststrMainFstValue[j].ConvertToNum(&dDiaValue,"%lf");
						}

						if (m_lstStrMainFstTitles02[j] == "夹持厚度")
						{
							lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						}

					}
					/*
					//
					dSTDThick = 1.3*dDiaValue + m_dJstThickMax + m_dFirstPrdThickMax;
					//
					double dLeft = dThickLimit-dSTDThick;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					*/
					//
					if (m_dJstThickMax == m_dJstThickMin)
					{
						dSTDThick = 1.3*dDiaValue + m_dJstThickMax + m_dFirstPrdThickMax;
						//
						double dLeft = dThickLimit-dSTDThick;
						CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					} 
					else
					{
						double dSTDThick01,dSTDThick02;
						//
						dSTDThick01 = 1.3*dDiaValue + m_dJstThickMax + m_dFirstPrdThickMax;
						//
						dSTDThick02 = 1.3*dDiaValue + m_dJstThickMax + m_dFirstPrdThickMin;
						//
						double dLeft01 = dThickLimit-dSTDThick01;
						double dLeft02 = dThickLimit-dSTDThick02;
						CATUnicodeString strdLeft01,strdLeft02;
						strdLeft01.BuildFromNum(dLeft01);
						strdLeft02.BuildFromNum(dLeft02);
						CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
					}
				}
			}
			
		}
		//
		else if (strIndex == "3") //双面沉头铆钉
		{
			//
			double dSTDLengthMin=0,dSTDLengthMax=0;
			dSTDLengthMin = (0.6*dMin + m_dJstThickMax) * LOWERMIN;
			dSTDLengthMax = (0.6*dMax + m_dJstThickMax) * UPPERMAX;

			//
			CATUnicodeString strdSTDLengthMax,strdSTDLengthMin;
			strdSTDLengthMin.BuildFromNum(dSTDLengthMin,"%lf");
			strdSTDLengthMax.BuildFromNum(dSTDLengthMax,"%lf");

			//
			CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=" + strdSTDLengthMin + "-" + strdSTDLengthMax;
			alsStrSearchItemsValue.Append(str03);

			//----------------------------------------------------------------------------------------------------------
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrMainFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstMainFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
					delete TempLstStr;
				}
				m_plstMainFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstMainFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=9; m++)
						{
							//
							if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}			

					}			
				}

				//	
				//根据个数，开展循环，计算每一条数据的“**余量**”信息
				for (int i=1; i<=dCount; i++)
				{
					//获得该行的信息
					CATListValCATUnicodeString lststrMainFstValue;
					GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
					//
					double dThickLimit=0,dDiaValue=0,dSTDThick=0;
					//
					for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
					{
						//
						if (/*m_lstStrMainFstTitles02[j] == "直径" ||*/ m_lstStrMainFstTitles02[j] == "公称直径")
						{
							lststrMainFstValue[j].ConvertToNum(&dDiaValue,"%lf");
						}

						if (m_lstStrMainFstTitles02[j] == "夹持厚度")
						{
							lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						}

					}
					//
					/*
					dSTDThick = 0.6*dDiaValue + m_dJstThickMax;
					//
					double dLeft = dThickLimit-dSTDThick;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					*/
					if (m_dJstThickMin == m_dJstThickMax)
					{
						dSTDThick = 0.6*dDiaValue + m_dJstThickMax;
						//
						double dLeft = dThickLimit-dSTDThick;
						CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					} 
					else
					{
						double dSTDThick01,dSTDThick02;
						dSTDThick01 = 0.6*dDiaValue + m_dJstThickMax;
						dSTDThick02 = 0.6*dDiaValue + m_dJstThickMin;
						//
						double dLeft01 = dThickLimit-dSTDThick01;
						double dLeft02 = dThickLimit-dSTDThick02;
						CATUnicodeString strdLeft01,strdLeft02;
						strdLeft01.BuildFromNum(dLeft01);
						strdLeft02.BuildFromNum(dLeft02);
						CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
					}
				}
			}

		}
		//
		else if (strIndex == "4") //平头大圆角铆钉
		{
			//
			double dSTDLengthMin=0,dSTDLengthMax=0;
			dSTDLengthMin = (0.7*dMin + m_dJstThickMax) * LOWERMIN;
			dSTDLengthMax = (0.7*dMax + m_dJstThickMax) * UPPERMAX;

			//
			CATUnicodeString strdSTDLengthMax,strdSTDLengthMin;
			strdSTDLengthMin.BuildFromNum(dSTDLengthMin,"%lf");
			strdSTDLengthMax.BuildFromNum(dSTDLengthMax,"%lf");

			//
			CATUnicodeString str03 = m_pFstFreeStyleDlg->m_strNextStepWBSItem[3] + "=" + strdSTDLengthMin + "-" + strdSTDLengthMax;
			alsStrSearchItemsValue.Append(str03);

			//------------------------------------------------------------------------------------------------------------------
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrMainFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstMainFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
					delete TempLstStr;
				}
				m_plstMainFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstMainFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=9; m++)
						{
							//
							if (m_pFstFreeStyleMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}			

					}			
				}

				//
				//根据个数，开展循环，计算每一条数据的“**余量**”信息
				for (int i=1; i<=dCount; i++)
				{
					//获得该行的信息
					CATListValCATUnicodeString lststrMainFstValue;
					GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
					//
					double dThickLimit=0,dDiaValue=0,dSTDThick=0;
					//
					for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
					{
						//
						if (/*m_lstStrMainFstTitles02[j] == "直径" ||*/ m_lstStrMainFstTitles02[j] == "公称直径")
						{
							lststrMainFstValue[j].ConvertToNum(&dDiaValue,"%lf");
						}

						if (m_lstStrMainFstTitles02[j] == "夹持厚度")
						{
							lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						}

					}
					//
					/*
					dSTDThick = 0.7*dDiaValue + m_dJstThickMax;
					//
					double dLeft = dThickLimit-dSTDThick;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					*/
					if (m_dJstThickMin == m_dJstThickMax)
					{
						dSTDThick = 0.7*dDiaValue + m_dJstThickMax;
						//
						double dLeft = dThickLimit-dSTDThick;
						CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strdLeft,i-1);
					} 
					else
					{
						double dSTDThick01,dSTDThick02;
						dSTDThick01 = 0.7*dDiaValue + m_dJstThickMax;
						dSTDThick02 = 0.7*dDiaValue + m_dJstThickMin;
						//
						double dLeft01 = dThickLimit-dSTDThick01;
						double dLeft02 = dThickLimit-dSTDThick02;
						CATUnicodeString strdLeft01,strdLeft02;
						strdLeft01.BuildFromNum(dLeft01);
						strdLeft02.BuildFromNum(dLeft02);
						CATUnicodeString strResult = strdLeft01 + "~" + strdLeft02;
						//
						m_pFstFreeStyleMainBoltDlg->_SearchResultML->SetColumnItem(10,strResult,i-1);
					}
				}
			}
		}
	}
}

//--------------------------------------------------------------------------------------------
//显示并初始化下一个对话框 PrtFstFreeStyleNutDlg 需要判断当前是螺栓还是铆钉，根据情况作出判断
//--------------------------------------------------------------------------------------------
void PrtFstDesignCmd::FstFreeStyleMainBoltDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//写判断方法，如果非螺栓，则不显示螺母 垫圈向导
    if (m_pFstFreeStyleDlg->m_IChoosedIndex != 2) //如果是铆钉 螺钉直接获取所选信息，退出向导
	{
		//如果是铆钉，并且余量值为负值，则
		if (m_pFstFreeStyleDlg->m_IChoosedIndex == 1 && m_dLeftCheck <0 && m_dJstThickMin==m_dJstThickMax)
		{
			PrtService::ShowDlgNotify("提示信息","所选铆钉长度不满足安装规范要求，请重新选择！");
			return;
		}

		//清空
		m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();
		//获得需要的数据
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strMainFstTypeFlag,0);
		CATUnicodeString strSpecValue;
		for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
		{
			if (m_lstStrMainFstTitles02[i]=="紧固件标识")
			{
				strSpecValue=m_lstStrMainFstChoosed02[i];
				break;
			}
		}
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue,0);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"",0);

		//
		//初始化测试数据
		ClearFstInfoLst();
		//
		m_alistStrFSTType.Append(m_strMainFstTypeFlag);
		m_alistStrFSTName.Append(strSpecValue);
		CATUnicodeString strMainFstLength,strMainFstThickLimit;
		//
		for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
		{
			if (m_lstStrMainFstTitles02[i] == "总长度")
			{
				m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstLength,"%lf");
			}
			//
			if (m_lstStrMainFstTitles02[i] == "夹持厚度")
			{
				m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstThickLimit,"%lf");
			}
		}
		//
		CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstStrMainFstTitles01;
		m_pListStrPropertyName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstStrMainFstChoosed01;
		m_pListStrPropertyValue.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstStrMainFstTitles02;
		m_pListStrSpecialName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstStrMainFstChoosed02;
		m_pListStrSpecialValue.Append(LstStrAtrrValue);
		
		
		//
		//设置前对话框显示
		m_pFstAccessDlg->SetVisibility(CATDlgShow);
		m_pFstAccessDlg->SetOKSensitivity(CATDlgEnable);

		//--------------------------------------------
		//关闭所有过程对话框
		//--------------------------------------------
		if (m_pFstFreeStyleDlg != NULL)
		{
			m_pFstFreeStyleDlg->RequestDelayedDestruction();
			m_pFstFreeStyleDlg=NULL;
		}

		if (m_pFstFreeStyleMainBoltDlg != NULL)
		{
			m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
			m_pFstFreeStyleMainBoltDlg=NULL;
		}
	} 
	else
	{
		//
		if (m_pFstFreeStyleNutDlg == NULL)
		{
			m_pFstFreeStyleNutDlg = new PrtFstFreeStyleNutDlg();
			m_pFstFreeStyleNutDlg->Build();
			m_pFstFreeStyleNutDlg->SetVisibility(CATDlgShow);
			//
			//对按钮状态的控制
			m_pFstFreeStyleNutDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
			//
			//对按钮状态的控制
			m_pFstFreeStyleNutDlg->_GoToSearchPB->SetSensitivity(CATDlgDisable);

			//
			//设置前对话框隐藏
			m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgHide);
			//
			//
			for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
			{
				if (m_lstStrMainFstTitles02[i] == "总长度")
				{
					m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstLength,"%lf");
				}
				//
				if (m_lstStrMainFstTitles02[i] == "夹持厚度")
				{
					m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstThickLimit,"%lf");
				}
			}
			
			//
			// 主对话框的消息响应
			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg, 
				m_pFstFreeStyleNutDlg->GetWindCloseNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleNutDlgCB,
				NULL);

			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg, 
				m_pFstFreeStyleNutDlg->GetDiaCLOSENotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleNutDlgCB,
				NULL);
			//
			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg->_GoToSearchPB, 
				m_pFstFreeStyleNutDlg->_GoToSearchPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleNutDlgGoToSearchPBCB,
				NULL);

			//
			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg->_LastStepPB, 
				m_pFstFreeStyleNutDlg->_LastStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleNutDlgLastStepPBCB,
				NULL);
			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg->_NextStepPB, 
				m_pFstFreeStyleNutDlg->_NextStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleNutDlgNextStepPBCB,
				NULL);

			//
			//ML选择的响应
			AddAnalyseNotificationCB (m_pFstFreeStyleNutDlg->_SearchResultML, 
				m_pFstFreeStyleNutDlg->_SearchResultML->GetListSelectNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleNutDlgSearchResultsMLCB,
				NULL);
		}
		else
		{
			m_pFstFreeStyleNutDlg->SetVisibility(CATDlgShow);

			//
			//设置前对话框隐藏
			m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgHide);
		}
	}	
}

//---------------------------------
//对FreeStyle Nut DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstFreeStyleNutDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleNutDlg->RequestDelayedDestruction();
	m_pFstFreeStyleNutDlg=NULL;

	//
	//设置前对话框显示
	m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgShow);
}

void PrtFstDesignCmd::FstFreeStyleNutDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleNutDlg->RequestDelayedDestruction();
	m_pFstFreeStyleNutDlg=NULL;

	//
	//设置前对话框显示
	m_pFstFreeStyleMainBoltDlg->SetVisibility(CATDlgShow);
}

void PrtFstDesignCmd::FstFreeStyleNutDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstFreeStyleNutDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleNutDlg->_SearchResultML->GetSelect(ioTabRow,iSize);
		//
		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstNutFstResults02,m_lstStrNutFstChoosed02);

		//
		//获得头部厚度
		for (int i=1; i<= m_lstStrNutFstChoosed02.Size(); i++)
		{
			//需要修改部分，当名称更正后
			if (m_lstStrNutFstTitles02[i] == "厚度" || m_lstStrNutFstTitles02[i] == "总厚度")
			{
				//
				m_strdNutFstThickValue = m_lstStrNutFstChoosed02[i];
				m_strdNutFstThickValue.ConvertToNum(&m_dNutFstThickValue,"%lf");
			}
		}

		//对按钮状态的控制
		m_pFstFreeStyleNutDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstFreeStyleNutDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}

}

void PrtFstDesignCmd::FstFreeStyleNutDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//初始化状态
	//
	m_pFstFreeStyleNutDlg->_SearchResultML->ClearLine();
	//
	//对按钮状态的控制
	m_pFstFreeStyleNutDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	//-----------------------------------------------------------------------------------------------
	//第一步获取所选标准号信息
	//-----------------------------------------------------------------------------------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstFreeStyleNutDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		m_lstStrNutFstTitles01.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrNutFstTitles01);
		
		//清除已有的指针信息
		for (int k=1;k<=m_plstNutFstResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstNutFstResults01[k];
			delete TempLstStr;
		}
		m_plstNutFstResults01.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}
				
				//
				m_plstNutFstResults01.Append(LstStrAtrrValue01);
			}			
		}

		//			
	}

	//----------------------------------------------------------------------------------------------------
	//获得该行的信息
	//----------------------------------------------------------------------------------------------------
	if (m_plstNutFstResults01.Size()==0)
	{
		return;
	}
	//
	double dIndex=1;
	CATLISTV(CATUnicodeString) * LstStrFirst = (CATLISTV(CATUnicodeString) *)m_plstNutFstResults01[1];
	int selectComboItem = m_pFstFreeStyleNutDlg->_Combo05->GetSelect();
	CATUnicodeString strComboValue("");
	m_pFstFreeStyleNutDlg->_Combo05->GetLine(strComboValue,selectComboItem);
	for (int i=1; i<=(*LstStrFirst).Size(); i++)
	{
		if ((*LstStrFirst)[i]==strComboValue)
		{
			dIndex = i;
			break;
		}
	}
	GetChoosedMLValue(dIndex,m_plstNutFstResults01,m_lstStrNutFstChoosed01);
	//
	CATUnicodeString strType01(""),strType02("");
	selectComboItem = m_pFstFreeStyleNutDlg->_Combo01->GetSelect();
	if (selectComboItem != 0)
	{
		m_pFstFreeStyleNutDlg->_Combo01->GetLine(strType01,selectComboItem);
	}
	//
	for (int i=1; i<= m_lstStrNutFstTitles01.Size(); i++)
	{
		//
		if (m_lstStrNutFstTitles01[i]=="紧固件名称")
		{
			strType02=m_lstStrNutFstChoosed01[i];
		}
	}
	//
	m_strNutFstTypeFlag = strType01+"|"+strType02;

	//----------------------------------------------------------------------------------------------------
	// 第二步获得所搜索规格号信息
	//----------------------------------------------------------------------------------------------------
	alsStrSearchItemsValue.RemoveAll();
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstFreeStyleNutDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstFreeStyleNutDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrNutFstChoosed01[1];
	alsStrSearchItemsValue.Append(str01);

	CATUnicodeString str02 = m_pFstFreeStyleNutDlg->m_strNextStepWBSItem[2] + "=" + m_strdFstDiameterValue;
	alsStrSearchItemsValue.Append(str02);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult02;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult02[2];
		CATUnicodeString strCutNumb=strListOfSearchResult02[3];
		double dCount02=0,dCutNumb02=1;
		strCount.ConvertToNum(&dCount02);
		strCutNumb.ConvertToNum(&dCutNumb02);
		//
		m_lstStrNutFstTitles02.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult02[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrNutFstTitles02);
		
		//清除已有的指针信息
		for (int k=1;k<=m_plstNutFstResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstNutFstResults02[k];
			delete TempLstStr;
		}
		m_plstNutFstResults02.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
		//
		if (cyclecount==dCount02 && dCount02!=0)
		{
			//
			for (int i=1; i<=dCutNumb02; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}
				
				//
				m_plstNutFstResults02.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=15; m++)
				{
					//
					if (m_pFstFreeStyleNutDlg->m_lstStrPropertyName[m] == m_lstStrNutFstTitles02[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstFreeStyleNutDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}			

			}

			for (int m=0; m<=15; m++)
			{
				//
				for (int n=1; n<= m_lstStrNutFstTitles01.Size(); n++)
				{
					//
					if (m_pFstFreeStyleNutDlg->m_lstStrPropertyName[m] == m_lstStrNutFstTitles01[n] && m_pFstFreeStyleNutDlg->m_lstStrPropertyName[m] != "紧固件标准号")
					{
						for (int k=1; k<=cyclecount; k++)
						{
							m_pFstFreeStyleNutDlg->_SearchResultML->SetColumnItem(m,m_lstStrNutFstChoosed01[n]);
						}
						//
						break;
					}
				}

			}
			//-----------------------------------------------------------------------------

		}

		//			
	}

}

//--------------------------------------------------------------------------------------------
//显示并初始化下一个对话框 PrtFstFreeStyleWasherDlg
//--------------------------------------------------------------------------------------------
void PrtFstDesignCmd::FstFreeStyleNutDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	if (m_pFstFreeStyleWasherDlg == NULL)
	{
		m_pFstFreeStyleWasherDlg = new PrtFstFreeStyleWasherDlg();
		m_pFstFreeStyleWasherDlg->Build();
		m_pFstFreeStyleWasherDlg->SetVisibility(CATDlgShow);
		//
		m_lststrSendKnowWasherFst.RemoveAll();
		//
		//设置前对话框隐藏
		m_pFstFreeStyleNutDlg->SetVisibility(CATDlgHide);
		//
		//
		m_pFstFreeStyleWasherDlg->_GoToSearchPB->SetSensitivity(CATDlgDisable);
		m_pFstFreeStyleWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);

		//清除列表中的内容
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedTitles01.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedResults01.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedTitles02.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedResults02.RemoveAll();

		//
		m_dWasherFstThickValueStart=0;
		m_dWasherFstThickValueEnd=0;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
            CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}


		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg, 
			m_pFstFreeStyleWasherDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleWasherDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg, 
			m_pFstFreeStyleWasherDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleWasherDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_GoToSearchPB, 
			m_pFstFreeStyleWasherDlg->_GoToSearchPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgGoToSearchPBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_LastStepPB, 
			m_pFstFreeStyleWasherDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_NextStepPB, 
			m_pFstFreeStyleWasherDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgNextStepPBCB,
			NULL);

		//
		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_RearchResultsML, 
			m_pFstFreeStyleWasherDlg->_RearchResultsML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgSearchResultsMLCB,
			NULL);

		//
		//CHOOSED ML选择的响应
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_ChooseWashersML, 
			m_pFstFreeStyleWasherDlg->_ChooseWashersML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgChooseWashersMLCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_RemovePB, 
			m_pFstFreeStyleWasherDlg->_RemovePB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgRemovePBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstFreeStyleWasherDlg->_ClearAllPB, 
			m_pFstFreeStyleWasherDlg->_ClearAllPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleWasherDlgClearAllPBCB,
			NULL);
	}
	else
	{
		m_pFstFreeStyleWasherDlg->SetVisibility(CATDlgShow);
		//
		//设置前对话框隐藏
		m_pFstFreeStyleNutDlg->SetVisibility(CATDlgHide);

	}
}


//---------------------------------
//对FreeStyle Washer DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstFreeStyleWasherDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstFreeStyleWasherDlg->RequestDelayedDestruction();
	m_pFstFreeStyleWasherDlg=NULL;

	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	m_lststrSendKnowWasherFst.RemoveAll();
	//
	//设置前对话框显示
	m_pFstFreeStyleNutDlg->SetVisibility(CATDlgShow);
}
void PrtFstDesignCmd::FstFreeStyleWasherDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//初始化状态
	//
	m_pFstFreeStyleWasherDlg->_RearchResultsML->ClearLine();
	//
	//-----------------------------------------------------------------------------------------------
	//第一步获取所选标准号信息
	//-----------------------------------------------------------------------------------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstFreeStyleWasherDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		m_lstStrWasherFstTitles01.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrWasherFstTitles01);

		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults01[k];
			delete TempLstStr;
		}
		m_plstWasherFstResults01.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstWasherFstResults01.Append(LstStrAtrrValue01);
			}			
		}

		//			
	}

	//----------------------------------------------------------------------------------------------------
	//获得该行的信息
	//----------------------------------------------------------------------------------------------------
	if (m_plstWasherFstResults01.Size()==0)
	{
		return;
	}
	//
	double dIndex=1;
	CATLISTV(CATUnicodeString) * LstStrFirst = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults01[1];
	int selectComboItem = m_pFstFreeStyleWasherDlg->_Combo05->GetSelect();
	CATUnicodeString strComboValue("");
	m_pFstFreeStyleWasherDlg->_Combo05->GetLine(strComboValue,selectComboItem);
	for (int i=1; i<=(*LstStrFirst).Size(); i++)
	{
		if ((*LstStrFirst)[i]==strComboValue)
		{
			dIndex = i;
			break;
		}
	}
	GetChoosedMLValue(dIndex,m_plstWasherFstResults01,m_lstStrWasherFstChoosed01);
	//
	CATUnicodeString strType01(""),strType02("");
	//
	selectComboItem = m_pFstFreeStyleWasherDlg->_Combo01->GetSelect();
	if (selectComboItem != 0)
	{
		m_pFstFreeStyleWasherDlg->_Combo01->GetLine(strType01,selectComboItem);
	}
	//
	for (int i=1; i<= m_lstStrWasherFstTitles01.Size(); i++)
	{
		//
		if (m_lstStrWasherFstTitles01[i]=="紧固件名称")
		{
			strType02=m_lstStrWasherFstChoosed01[i];
		}
	}
	//
	m_strWasherFstTypeFlag = strType01+"|"+strType02;

	//----------------------------------------------------------------------------------------------------
	// 第二步获得所搜索规格号信息
	//----------------------------------------------------------------------------------------------------
	alsStrSearchItemsValue.RemoveAll();
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstFreeStyleWasherDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstFreeStyleWasherDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrWasherFstChoosed01[1];
	alsStrSearchItemsValue.Append(str01);

	CATUnicodeString str02 = m_pFstFreeStyleWasherDlg->m_strNextStepWBSItem[2] + "=" + m_strdFstDiameterValue;
	alsStrSearchItemsValue.Append(str02);
	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult02;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult02[2];
		CATUnicodeString strCutNumb=strListOfSearchResult02[3];
		double dCount02=0,dCutNumb02=1;
		strCount.ConvertToNum(&dCount02);
		strCutNumb.ConvertToNum(&dCutNumb02);
		//
		m_lstStrWasherFstTitles02.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult02[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrWasherFstTitles02);

		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults02[k];
			delete TempLstStr;
		}
		m_plstWasherFstResults02.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
		//
		if (cyclecount==dCount02 && dCount02!=0)
		{
			//
			for (int i=1; i<=dCutNumb02; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstWasherFstResults02.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=7; m++)
				{
					//
					if (m_pFstFreeStyleWasherDlg->m_lstStrPropertyName[m] == m_lstStrWasherFstTitles02[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstFreeStyleWasherDlg->_RearchResultsML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}			

			}			
		}

		//			
	}

}
void PrtFstDesignCmd::FstFreeStyleWasherDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstFreeStyleWasherDlg->RequestDelayedDestruction();
	m_pFstFreeStyleWasherDlg=NULL;

	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	m_lststrSendKnowWasherFst.RemoveAll();

	//
	//设置前对话框显示
	m_pFstFreeStyleNutDlg->SetVisibility(CATDlgShow);
}
void PrtFstDesignCmd::FstFreeStyleWasherDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//如果选择的是其它螺母类型，则跳出选择保护罩的选项
	if (m_pFstFreeStyleNutDlg->m_IChoosedIndex != 1) //如果非普通螺母
	{
		//
		//
		double dCheck01=0,dCheck02=0;
		dCheck01 = m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue;
		dCheck02 = m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart;
		//
		if (/*dCheck02 >=-5 &&*/ dCheck02 <= 1 && dCheck01 >= 2)
		{
			//
			m_pFstFreeStyleShelterDlg = new PrtFstFreeStyleShelterDlg();
			m_pFstFreeStyleShelterDlg->Build();
			m_pFstFreeStyleShelterDlg->SetVisibility(CATDlgShow);
			//
			//设置前对话框隐藏
			m_pFstFreeStyleWasherDlg->SetVisibility(CATDlgHide);
			//
			m_pFstFreeStyleShelterDlg->_GoToSearchPB->SetSensitivity(CATDlgDisable);
			// 主对话框的消息响应
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg, 
				m_pFstFreeStyleShelterDlg->GetWindCloseNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleShelterDlgCB,
				NULL);

			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg, 
				m_pFstFreeStyleShelterDlg->GetDiaCLOSENotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstFreeStyleShelterDlgCB,
				NULL);
			//
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg->_GoToSearchPB, 
				m_pFstFreeStyleShelterDlg->_GoToSearchPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleShelterDlgGoToSearchPBCB,
				NULL);

			//
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg->_LastStepPB, 
				m_pFstFreeStyleShelterDlg->_LastStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleShelterDlgLastStepPBCB,
				NULL);
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg->_NextStepPB, 
				m_pFstFreeStyleShelterDlg->_NextStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleShelterDlgNextStepPBCB,
				NULL);

			//
			//ML选择的响应
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg->_SearchResultML, 
				m_pFstFreeStyleShelterDlg->_SearchResultML->GetListSelectNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleShelterDlgSearchResultsMLCB,
				NULL);

			//
			//
			AddAnalyseNotificationCB (m_pFstFreeStyleShelterDlg->_RemoveAllPB, 
				m_pFstFreeStyleShelterDlg->_RemoveAllPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstFreeStyleShelterDlgClearAllPBCB,
				NULL);
		}
		else
		{
			//提示信息
			PrtService::ShowDlgNotify("提示信息","当前组合不满足螺栓安装条件，请调整所选信息！");
		}
	} 
	else //如果是普通螺母
	{
		//
		double dCheck01=0,dCheck02=0;
		dCheck01 = m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue;
		dCheck02 = m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart;
		if (/*dCheck02 >=-5 &&*/ dCheck02 <= 1 && dCheck01 >= 2)
		{
			//
			//清空
			m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();
			//获得需要的数据
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strMainFstTypeFlag,0);
			CATUnicodeString strSpecValue01;
			for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
			{
				if (m_lstStrMainFstTitles02[i]=="紧固件标识")
				{
					strSpecValue01=m_lstStrMainFstChoosed02[i];
					break;
				}
			}
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue01,0);
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"",0);


			//
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strNutFstTypeFlag,1);
			CATUnicodeString strSpecValue02;
			for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
			{
				if (m_lstStrNutFstTitles02[i]=="紧固件标识")
				{
					strSpecValue02=m_lstStrNutFstChoosed02[i];
					break;
				}
			}
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue02,1);
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"END",1,CATDlgDataModify);

			//
			CATUnicodeString strSpecValue03;
			CATListValCATUnicodeString alstStrSpecValue03;
			for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
			{
				//
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_lstStrWasherFstTypeFlag[j],j+1);
				CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
				CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
				for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
				{
					if ((*TempLstStrTitle)[i]=="紧固件标识")
					{
						strSpecValue03=(*TempLstStrValue)[i];
						alstStrSpecValue03.Append(strSpecValue03);
						break;
					}
				}
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue03,j+1);
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_lstStrWasherPos[j],j+1,CATDlgDataModify);
			}

			//
			//
			//初始化数据
			ClearFstInfoLst();
			//
			m_alistStrFSTType.Append(m_strMainFstTypeFlag);
			m_alistStrFSTName.Append(strSpecValue01);
			if (m_lstStrWasherFstTypeFlag.Size()!=0)
			{
				m_alistStrFSTType.Append(m_lstStrWasherFstTypeFlag);
				m_alistStrFSTName.Append(alstStrSpecValue03);
			}
			m_alistStrFSTType.Append(m_strNutFstTypeFlag);
			m_alistStrFSTName.Append(strSpecValue02);
			//
			m_lststrCirclePositions.Append(m_lstStrWasherPos);
			m_lststrCirclePositions.Append("END");
			//
			CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstTitles01;
			m_pListStrPropertyName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstChoosed01;
			m_pListStrPropertyValue.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstTitles02;
			m_pListStrSpecialName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstChoosed02;
			m_pListStrSpecialValue.Append(LstStrAtrrValue);
			//
			for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
			{
				//
				CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
				CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
				CATUnicodeString strTemp01, strTemp02;
				for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
				{
					if ((*TempLstStrTitle)[i]=="厚度")
					{
						strTemp01=(*TempLstStrValue)[i];
						double dvalue=0;
						strTemp01.ConvertToNum(&dvalue,"%lf");
						m_lstCircleThicks.Append(dvalue);
					}

					if (/*(*TempLstStrTitle)[i]=="内径" ||*/ (*TempLstStrTitle)[i]=="公称直径")
					{
						strTemp02=(*TempLstStrValue)[i];
						double dvalue=0;
						strTemp02.ConvertToNum(&dvalue,"%lf");
						m_lstCircleRadiusValues.Append(dvalue);
					}
				}
			}
			//
			CATUnicodeString strTemp01, strTemp02;
			for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
			{
				if (m_lstStrNutFstTitles02[i]=="厚度" || m_lstStrNutFstTitles02[i]=="总厚度")
				{
					strTemp01=m_lstStrNutFstChoosed02[i];
					double dvalue=0;
					strTemp01.ConvertToNum(&dvalue,"%lf");
					m_lstCircleThicks.Append(dvalue);
				}

				if (/*m_lstStrNutFstTitles02[i]=="直径" || */m_lstStrNutFstTitles02[i]=="公称直径")
				{
					strTemp02=m_lstStrNutFstChoosed02[i];
					double dvalue=0;
					strTemp02.ConvertToNum(&dvalue,"%lf");
					m_lstCircleRadiusValues.Append(dvalue);
				}
			}
			//
			for (int i=1; i<=m_plstWasherFstChoosedTitles01.Size(); i++)
			{
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();
				//
				CATLISTV(CATUnicodeString) * TempLstStrTitle01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
				CATLISTV(CATUnicodeString) * TempLstStrValue01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
				CATLISTV(CATUnicodeString) * TempLstStrTitle02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
				CATLISTV(CATUnicodeString) * TempLstStrValue02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
				//
				*LstStrAtrrValue01 = *TempLstStrTitle01;
				*LstStrAtrrValue02 = *TempLstStrValue01;
				*LstStrAtrrValue03 = *TempLstStrTitle02;
				*LstStrAtrrValue04 = *TempLstStrValue02;
				//
				m_pListStrPropertyName.Append(LstStrAtrrValue01);
				m_pListStrPropertyValue.Append(LstStrAtrrValue02);
				m_pListStrSpecialName.Append(LstStrAtrrValue03);
				m_pListStrSpecialValue.Append(LstStrAtrrValue04);
			}
			//
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstTitles01;
			m_pListStrPropertyName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstChoosed01;
			m_pListStrPropertyValue.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstTitles02;
			m_pListStrSpecialName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstChoosed02;
			m_pListStrSpecialValue.Append(LstStrAtrrValue);
			//
			//垫圈位置信息
			m_lstStrWasherPos.RemoveAll();
			m_lstStrWasherFstTypeFlag.RemoveAll();
			//设置前对话框显示
			m_pFstAccessDlg->SetVisibility(CATDlgShow);
			m_pFstAccessDlg->SetOKSensitivity(CATDlgEnable);

			//-----------------------------------------------------------------------------------------------
			//获得所选信息的知识模式
			//-----------------------------------------------------------------------------------------------
			m_strSendKnowMainFst = m_pFstFreeStyleDlg->m_StrCurrentDataBaseName + "=";
			for (int i=1; i<= m_lstStrMainFstTitles01.Size(); i++)
			{
				if (m_lstStrMainFstTitles01[i] == "紧固件标准号")
				{
					m_strSendKnowMainFst += m_lstStrMainFstChoosed01[i];
					break;
				}
			}
			//
			m_strSendKnowNutFst = m_pFstFreeStyleNutDlg->m_StrCurrentDataBaseName + "=";
			for (int i=1; i<= m_lstStrNutFstTitles01.Size(); i++)
			{
				if (m_lstStrNutFstTitles01[i] == "紧固件标准号")
				{
					m_strSendKnowNutFst += m_lstStrNutFstChoosed01[i];
					break;
				}
			}

			//--------------------------------------------
			//关闭所有过程对话框
			//--------------------------------------------
			if (m_pFstFreeStyleDlg != NULL)
			{
				m_pFstFreeStyleDlg->RequestDelayedDestruction();
				m_pFstFreeStyleDlg=NULL;
			}

			if (m_pFstFreeStyleMainBoltDlg != NULL)
			{
				m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
				m_pFstFreeStyleMainBoltDlg=NULL;
			}

			if (m_pFstFreeStyleNutDlg != NULL)
			{
				m_pFstFreeStyleNutDlg->RequestDelayedDestruction();
				m_pFstFreeStyleNutDlg=NULL;
			}

			if (m_pFstFreeStyleWasherDlg != NULL)
			{
				m_pFstFreeStyleWasherDlg->RequestDelayedDestruction();
				m_pFstFreeStyleWasherDlg=NULL;
			}
		} 
		else
		{
			//提示信息
			PrtService::ShowDlgNotify("提示信息","当前组合不满足螺栓安装条件，请调整所选信息！");
		}
	}//普通螺母的情况	
}

void PrtFstDesignCmd::FstFreeStyleWasherDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstFreeStyleWasherDlg->_RearchResultsML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleWasherDlg->_RearchResultsML->GetSelect(ioTabRow,iSize);

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstWasherFstResults02,m_lstStrWasherFstChoosed02);

		//获取所选垫圈的厚度值
		for (int i=1; i<= m_lstStrWasherFstChoosed02.Size(); i++)
		{
			if (m_lstStrWasherFstTitles02[i] == "厚度")
			{
				//
				m_lstStrWasherFstChoosed02[i].ConvertToNum(&m_dSearchedWasherThick,"%lf");
				break;
			}
		}


		//显示ContextualMenu菜单
		m_pContextMenu = new CATDlgContextualMenu (m_pFstFreeStyleWasherDlg->_RearchResultsML, "Context",CATDlgCtxEmpty);
		m_pPushItemSelect = new CATDlgPushItem(m_pContextMenu,"选择");

		//
		AddAnalyseNotificationCB(m_pPushItemSelect,
			m_pPushItemSelect->GetMenuIActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::OnWasherPushItemSelectCB,
			NULL);
	}
}

//
void PrtFstDesignCmd::FstFreeStyleWasherDlgChooseWashersMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//获取所选信息
	int  iSize = m_pFstFreeStyleWasherDlg->_ChooseWashersML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleWasherDlg->_ChooseWashersML->GetSelect(ioTabRow,iSize);
		//
		m_IndexChoosedWasher = ioTabRow[0]+1;
		//
		//获取所选垫圈的厚度值
		//
		CATLISTV(CATUnicodeString) *TempLstStr01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[m_IndexChoosedWasher];
		CATLISTV(CATUnicodeString) *TempLstStr02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[m_IndexChoosedWasher];
		for (int i=1; i<= (*TempLstStr01).Size(); i++)
		{
			if ((*TempLstStr01)[i] == "厚度")
			{
				//
				(*TempLstStr02)[i].ConvertToNum(&m_dChoosedWasherThick,"%lf");
				break;
			}
		}
		//
		m_pFstFreeStyleWasherDlg->_RemovePB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		m_pFstFreeStyleWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);
	}
	
}

//
void PrtFstDesignCmd::FstFreeStyleWasherDlgRemovePBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleWasherDlg->_ChooseWashersML->ClearLine();
	//
	CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[m_IndexChoosedWasher];
	m_plstWasherFstChoosedTitles01.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[m_IndexChoosedWasher];
	m_plstWasherFstChoosedResults01.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[m_IndexChoosedWasher];
	m_plstWasherFstChoosedTitles02.RemovePosition(m_IndexChoosedWasher);  
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[m_IndexChoosedWasher];
	m_plstWasherFstChoosedResults02.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//垫圈位置信息
	if (m_lstStrWasherPos[m_IndexChoosedWasher] == "START")
	{
		/*
		m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		//
		if (m_dJstThickMax == m_dJstThickMin)
		{
			m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}

	}
	else
	{
		/*
		m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	//
	m_lstStrWasherPos.RemovePosition(m_IndexChoosedWasher);
	m_lstStrWasherFstTypeFlag.RemovePosition(m_IndexChoosedWasher);
	m_lststrSendKnowWasherFst.RemovePosition(m_IndexChoosedWasher);
	//
	for (int i=1; i<= m_plstWasherFstChoosedTitles01.Size(); i++)
	{
		//
		CATLISTV(CATUnicodeString) * TempLstStr01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
		CATLISTV(CATUnicodeString) * TempLstStr02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
		//
		CATLISTV(CATUnicodeString) * TempLstStr03 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
		CATLISTV(CATUnicodeString) * TempLstStr04 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
		//
		CATListValCATUnicodeString alststrName,alststrValue;
		alststrName.Append(*TempLstStr01);alststrName.Append(*TempLstStr02);
		alststrValue.Append(*TempLstStr03);alststrValue.Append(*TempLstStr04);
		//
		for (int m=0; m<=13; m++)
		{
			for (int n=1; n<=alststrName.Size(); n++)
			{
				//
				if (m_pFstFreeStyleWasherDlg->m_lstStrPropertyName02[m] == alststrName[n])
				{

					m_pFstFreeStyleWasherDlg->_ChooseWashersML->SetColumnItem(m,alststrValue[n]);
					//
					break;
				}
			}

		}
		//
		m_pFstFreeStyleWasherDlg->_ChooseWashersML->SetColumnItem(0,m_lstStrWasherPos[i],i-1,CATDlgDataModify);
	}

	m_pFstFreeStyleWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);
}

//
void PrtFstDesignCmd::FstFreeStyleWasherDlgClearAllPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleWasherDlg->_ChooseWashersML->ClearLine();
	//
	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	m_lststrSendKnowWasherFst.RemoveAll();
	//
	//垫圈位置信息
	m_dWasherFstThickValueStart = 0;
	m_dWasherFstThickValueEnd = 0;
	//
	/*
	CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
	m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
	strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
	m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
	*/
	if (m_dJstThickMax == m_dJstThickMin)
	{
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
	} 
	else
	{
		CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
		strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
		CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
	}

	//清除列表中的内容
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles02.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults02.RemoveAll();
}

//
CATBoolean PrtFstDesignCmd::OnWasherPushItemSelectCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//--------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------
	CATUnicodeString strWBItem;
	strWBItem = m_pFstFreeStyleWasherDlg->m_StrCurrentDataBaseName + "=";
	for (int i=1; i<= m_lstStrWasherFstTitles01.Size(); i++)
	{
		if (m_lstStrWasherFstTitles01[i] == "紧固件标准号")
		{
			//
			strWBItem += m_lstStrWasherFstChoosed01[i];
			break;
		}
	}
	m_lststrSendKnowWasherFst.Append(strWBItem);

	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();

	//
	*LstStrAtrrValue01 = m_lstStrWasherFstTitles01;
	*LstStrAtrrValue02 = m_lstStrWasherFstChoosed01;
	*LstStrAtrrValue03 = m_lstStrWasherFstTitles02;
	*LstStrAtrrValue04 = m_lstStrWasherFstChoosed02;

	//
	m_plstWasherFstChoosedTitles01.Append(LstStrAtrrValue01);  
	m_plstWasherFstChoosedResults01.Append(LstStrAtrrValue02); 
	m_plstWasherFstChoosedTitles02.Append(LstStrAtrrValue03);  
	m_plstWasherFstChoosedResults02.Append(LstStrAtrrValue04);
	//
	CATListValCATUnicodeString alststrName,alststrValue;
	alststrName.Append(m_lstStrWasherFstTitles01);alststrName.Append(m_lstStrWasherFstTitles02);
	alststrValue.Append(m_lstStrWasherFstChoosed01);alststrValue.Append(m_lstStrWasherFstChoosed02);
	//
	for (int m=0; m<=13; m++)
	{
		for (int n=1; n<=alststrName.Size(); n++)
		{
			//
			if (m_pFstFreeStyleWasherDlg->m_lstStrPropertyName02[m] == alststrName[n])
			{
				
				m_pFstFreeStyleWasherDlg->_ChooseWashersML->SetColumnItem(m,alststrValue[n]);
				//
				break;
			}
		}
				
	}
	//
	if (m_pFstFreeStyleWasherDlg->_PosENDRB->GetState() == CATDlgCheck)
	{
		m_lstStrWasherPos.Append("END");
		//
		m_pFstFreeStyleWasherDlg->_ChooseWashersML->SetColumnItem(0,"END",m_lstStrWasherPos.Size()-1,CATDlgDataModify);
		//
		//垫圈位置信息
		m_dWasherFstThickValueEnd += m_dSearchedWasherThick;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	else
	{
		m_lstStrWasherPos.Append("START");
		//
		m_pFstFreeStyleWasherDlg->_ChooseWashersML->SetColumnItem(0,"START",m_lstStrWasherPos.Size()-1,CATDlgDataModify);
		//
		m_dWasherFstThickValueStart += m_dSearchedWasherThick;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstFreeStyleWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	//
	m_lstStrWasherFstTypeFlag.Append(m_strWasherFstTypeFlag);
	//
	return TRUE;
}


void PrtFstDesignCmd::CloseFstFreeStyleShelterDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstFreeStyleShelterDlg->RequestDelayedDestruction();
	m_pFstFreeStyleShelterDlg=NULL;

	//设置前对话框显示
	m_pFstFreeStyleWasherDlg->SetVisibility(CATDlgShow);
}
void PrtFstDesignCmd::FstFreeStyleShelterDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstFreeStyleShelterDlg->RequestDelayedDestruction();
	m_pFstFreeStyleShelterDlg=NULL;

	//设置前对话框显示
	m_pFstFreeStyleWasherDlg->SetVisibility(CATDlgShow);
}

//
void PrtFstDesignCmd::FstFreeStyleShelterDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//初始化状态
	//
	m_pFstFreeStyleShelterDlg->_SearchResultML->ClearLine();
	//
	//-----------------------------------------------------------------------------------------------
	//第一步获取所选标准号信息
	//-----------------------------------------------------------------------------------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstFreeStyleShelterDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		m_lstStrShelterFstTitles01.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrShelterFstTitles01);

		//清除已有的指针信息
		for (int k=1;k<=m_plstShelterFstResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults01[k];
			delete TempLstStr;
		}
		m_plstShelterFstResults01.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstShelterFstResults01.Append(LstStrAtrrValue01);
			}			
		}

		//			
	}

	//----------------------------------------------------------------------------------------------------
	//获得该行的信息
	//----------------------------------------------------------------------------------------------------
	if (m_plstShelterFstResults01.Size()==0)
	{
		return;
	}
	//
	double dIndex=1;
	CATLISTV(CATUnicodeString) * LstStrFirst = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults01[1];
	int selectComboItem = m_pFstFreeStyleShelterDlg->_Combo05->GetSelect();
	CATUnicodeString strComboValue("");
	m_pFstFreeStyleShelterDlg->_Combo05->GetLine(strComboValue,selectComboItem);
	for (int i=1; i<=(*LstStrFirst).Size(); i++)
	{
		if ((*LstStrFirst)[i]==strComboValue)
		{
			dIndex = i;
			break;
		}
	}
	GetChoosedMLValue(dIndex,m_plstShelterFstResults01,m_lstStrShelterFstChoosed01);
	//
	CATUnicodeString strType01(""),strType02("");
	//
	selectComboItem = m_pFstFreeStyleShelterDlg->_Combo01->GetSelect();
	if (selectComboItem != 0)
	{
		m_pFstFreeStyleShelterDlg->_Combo01->GetLine(strType01,selectComboItem);
	}
	//
	for (int i=1; i<= m_lstStrShelterFstTitles01.Size(); i++)
	{
		//
		if (m_lstStrShelterFstTitles01[i]=="紧固件名称")
		{
			strType02=m_lstStrShelterFstChoosed01[i];
		}
	}
	//
	m_strShelterFstTypeFlag = strType01+"|"+strType02;

	//----------------------------------------------------------------------------------------------------
	// 第二步获得所搜索规格号信息
	//----------------------------------------------------------------------------------------------------
	alsStrSearchItemsValue.RemoveAll();
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstFreeStyleShelterDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstFreeStyleShelterDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrShelterFstChoosed01[1];
	alsStrSearchItemsValue.Append(str01);

	CATUnicodeString str02 = m_pFstFreeStyleShelterDlg->m_strNextStepWBSItem[2] + "=" + m_strdFstDiameterValue;
	alsStrSearchItemsValue.Append(str02);
	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult02;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult02[2];
		CATUnicodeString strCutNumb=strListOfSearchResult02[3];
		double dCount02=0,dCutNumb02=1;
		strCount.ConvertToNum(&dCount02);
		strCutNumb.ConvertToNum(&dCutNumb02);
		//
		m_lstStrShelterFstTitles02.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult02[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrShelterFstTitles02);

		//清除已有的指针信息
		for (int k=1;k<=m_plstShelterFstResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults02[k];
			delete TempLstStr;
		}
		m_plstShelterFstResults02.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
		//
		if (cyclecount==dCount02 && dCount02!=0)
		{
			//
			for (int i=1; i<=dCutNumb02; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstShelterFstResults02.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=15; m++)
				{
					//
					if (m_pFstFreeStyleShelterDlg->m_lstStrPropertyName[m] == m_lstStrShelterFstTitles02[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstFreeStyleShelterDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}
			}

			//-----------------------------------------------------------------------------
			for (int m=0; m<=15; m++)
			{
				//
				for (int n=1; n<= m_lstStrShelterFstTitles01.Size(); n++)
				{
					//
					if (m_pFstFreeStyleShelterDlg->m_lstStrPropertyName[m] == m_lstStrShelterFstTitles01[n] && m_pFstFreeStyleShelterDlg->m_lstStrPropertyName[m] != "紧固件标准号")
					{
						for (int k=1; k<=cyclecount; k++)
						{
							m_pFstFreeStyleShelterDlg->_SearchResultML->SetColumnItem(m,m_lstStrShelterFstChoosed01[n]);
						}
						//
						break;
					}
				}
				
			}
			//-----------------------------------------------------------------------------
		}

		//			
	}	
}
void PrtFstDesignCmd::FstFreeStyleShelterDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空
	m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();
	
	//显示主紧固件
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strMainFstTypeFlag,0);
	CATUnicodeString strSpecValue01;
	for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
	{
		if (m_lstStrMainFstTitles02[i]=="紧固件标识")
		{
			strSpecValue01=m_lstStrMainFstChoosed02[i];
			break;
		}
	}
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue01,0);
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"",0);


	//显示螺母
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strNutFstTypeFlag,1);
	CATUnicodeString strSpecValue02;
	for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
	{
		if (m_lstStrNutFstTitles02[i]=="紧固件标识")
		{
			strSpecValue02=m_lstStrNutFstChoosed02[i];
			break;
		}
	}
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue02,1);
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"END",1,CATDlgDataModify);

	
	//显示垫圈
	CATUnicodeString strSpecValue03;
	CATListValCATUnicodeString alstStrSpecValue03;
	for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
	{
		//
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_lstStrWasherFstTypeFlag[j],j+1);
		CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
		CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
		for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
		{
			if ((*TempLstStrTitle)[i]=="紧固件标识")
			{
				strSpecValue03=(*TempLstStrValue)[i];
				alstStrSpecValue03.Append(strSpecValue03);
				break;
			}
		}
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue03,j+1);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_lstStrWasherPos[j],j+1,CATDlgDataModify);
	}

	//如果存在保护罩，显示
	CATUnicodeString strSpecValue04;
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{	
		//
		for (int i=1; i<=m_lstShelterFstChoosedTitles02.Size(); i++)
		{
			if (m_lstShelterFstChoosedTitles02[i]=="紧固件标识")
			{
				strSpecValue04=m_lstShelterFstChoosedResults02[i];
				break;
			}
		}
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strChoosedShelterFstTypeFlag);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue04);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_strShelterPos);
	}	
	
	//
	//初始化数据
	ClearFstInfoLst();
	//
	m_alistStrFSTType.Append(m_strMainFstTypeFlag);
	m_alistStrFSTName.Append(strSpecValue01);
	//
	if (m_lstStrWasherFstTypeFlag.Size()!=0)
	{
		m_alistStrFSTType.Append(m_lstStrWasherFstTypeFlag);
		m_alistStrFSTName.Append(alstStrSpecValue03);
	}
	//
	m_alistStrFSTType.Append(m_strNutFstTypeFlag);
	m_alistStrFSTName.Append(strSpecValue02);
	//
	m_lststrCirclePositions.Append(m_lstStrWasherPos);
	m_lststrCirclePositions.Append("END");
	//
	//如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		m_alistStrFSTType.Append(m_strChoosedShelterFstTypeFlag);
		m_alistStrFSTName.Append(strSpecValue04);
		m_lststrCirclePositions.Append(m_strShelterPos);
	}
	//
	CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstTitles01;
	m_pListStrPropertyName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstChoosed01;
	m_pListStrPropertyValue.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstTitles02;
	m_pListStrSpecialName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstChoosed02;
	m_pListStrSpecialValue.Append(LstStrAtrrValue);
	//
	for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
	{
		//
		CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
		CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
		CATUnicodeString strTemp01, strTemp02;
		for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
		{
			if ((*TempLstStrTitle)[i]=="厚度")
			{
				strTemp01=(*TempLstStrValue)[i];
				double dvalue=0;
				strTemp01.ConvertToNum(&dvalue,"%lf");
				m_lstCircleThicks.Append(dvalue);
			}

			if (/*(*TempLstStrTitle)[i]=="内径" ||*/ (*TempLstStrTitle)[i]=="公称直径")
			{
				strTemp02=(*TempLstStrValue)[i];
				double dvalue=0;
				strTemp02.ConvertToNum(&dvalue,"%lf");
				m_lstCircleRadiusValues.Append(dvalue);
			}
		}
	}
	//
	CATUnicodeString strTemp01, strTemp02;
	for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
	{
		if (m_lstStrNutFstTitles02[i]=="厚度" || m_lstStrNutFstTitles02[i]=="总厚度")
		{
			strTemp01=m_lstStrNutFstChoosed02[i];
			double dvalue=0;
			strTemp01.ConvertToNum(&dvalue,"%lf");
			m_lstCircleThicks.Append(dvalue);
		}

		if (/*m_lstStrNutFstTitles02[i]=="直径" ||*/ m_lstStrNutFstTitles02[i]=="公称直径")
		{
			strTemp02=m_lstStrNutFstChoosed02[i];
			double dvalue=0;
			strTemp02.ConvertToNum(&dvalue,"%lf");
			m_lstCircleRadiusValues.Append(dvalue);
		}
	}

	//如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		m_lstCircleThicks.Append(0);
		//
		CATUnicodeString strTemp03;
		for (int i=1; i<=m_lstShelterFstChoosedTitles02.Size(); i++)
		{
			if (/*m_lstShelterFstChoosedTitles02[i]=="直径" ||*/ m_lstShelterFstChoosedTitles02[i]=="公称直径")
			{
				strTemp03=m_lstShelterFstChoosedResults02[i];
				double dvalue=0;
				strTemp03.ConvertToNum(&dvalue,"%lf");
				m_lstCircleRadiusValues.Append(dvalue);
				break;
			}
		}
	}
	//
	
	//
	for (int i=1; i<=m_plstWasherFstChoosedTitles01.Size(); i++)
	{
		CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();
		//
		CATLISTV(CATUnicodeString) * TempLstStrTitle01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
		CATLISTV(CATUnicodeString) * TempLstStrValue01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
		CATLISTV(CATUnicodeString) * TempLstStrTitle02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
		CATLISTV(CATUnicodeString) * TempLstStrValue02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
		//
		*LstStrAtrrValue01 = *TempLstStrTitle01;
		*LstStrAtrrValue02 = *TempLstStrValue01;
		*LstStrAtrrValue03 = *TempLstStrTitle02;
		*LstStrAtrrValue04 = *TempLstStrValue02;
		//
		m_pListStrPropertyName.Append(LstStrAtrrValue01);
		m_pListStrPropertyValue.Append(LstStrAtrrValue02);
		m_pListStrSpecialName.Append(LstStrAtrrValue03);
		m_pListStrSpecialValue.Append(LstStrAtrrValue04);
	}
	//
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstTitles01;
	m_pListStrPropertyName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstChoosed01;
	m_pListStrPropertyValue.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstTitles02;
	m_pListStrSpecialName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstChoosed02;
	m_pListStrSpecialValue.Append(LstStrAtrrValue);
	////如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedTitles01;
		m_pListStrPropertyName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedResults01;
		m_pListStrPropertyValue.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedTitles02;
		m_pListStrSpecialName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedResults02;
		m_pListStrSpecialValue.Append(LstStrAtrrValue);
	}
	
	//
	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	//设置前对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);
	m_pFstAccessDlg->SetOKSensitivity(CATDlgEnable);

	//-----------------------------------------------------------------------------------------------
	//获得所选信息的知识模式
	//-----------------------------------------------------------------------------------------------
	m_strSendKnowMainFst = m_pFstFreeStyleDlg->m_StrCurrentDataBaseName + "=";
	for (int i=1; i<= m_lstStrMainFstTitles01.Size(); i++)
	{
		if (m_lstStrMainFstTitles01[i] == "紧固件标准号")
		{
			m_strSendKnowMainFst += m_lstStrMainFstChoosed01[i];
			break;
		}
	}
	//
	m_strSendKnowNutFst = m_pFstFreeStyleNutDlg->m_StrCurrentDataBaseName + "=";
	for (int i=1; i<= m_lstStrNutFstTitles01.Size(); i++)
	{
		if (m_lstStrNutFstTitles01[i] == "紧固件标准号")
		{
			m_strSendKnowNutFst += m_lstStrNutFstChoosed01[i];
			break;
		}
	}

	//--------------------------------------------
	//关闭所有过程对话框
	//--------------------------------------------
	if (m_pFstFreeStyleDlg != NULL)
	{
		m_pFstFreeStyleDlg->RequestDelayedDestruction();
		m_pFstFreeStyleDlg=NULL;
	}

	if (m_pFstFreeStyleMainBoltDlg != NULL)
	{
		m_pFstFreeStyleMainBoltDlg->RequestDelayedDestruction();
		m_pFstFreeStyleMainBoltDlg=NULL;
	}

	if (m_pFstFreeStyleNutDlg != NULL)
	{
		m_pFstFreeStyleNutDlg->RequestDelayedDestruction();
		m_pFstFreeStyleNutDlg=NULL;
	}

	if (m_pFstFreeStyleWasherDlg != NULL)
	{
		m_pFstFreeStyleWasherDlg->RequestDelayedDestruction();
		m_pFstFreeStyleWasherDlg=NULL;
	}

	if (m_pFstFreeStyleShelterDlg != NULL)
	{
		m_pFstFreeStyleShelterDlg->RequestDelayedDestruction();
		m_pFstFreeStyleShelterDlg=NULL;
	}
}
void PrtFstDesignCmd::FstFreeStyleShelterDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstFreeStyleShelterDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstFreeStyleShelterDlg->_SearchResultML->GetSelect(ioTabRow,iSize);

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstShelterFstResults02,m_lstStrShelterFstChoosed02);

		//显示ContextualMenu菜单
		m_pShelterContextMenu = new CATDlgContextualMenu (m_pFstFreeStyleShelterDlg->_SearchResultML, "Context",CATDlgCtxEmpty);
		m_pShelterPushItemSelect = new CATDlgPushItem(m_pShelterContextMenu,"选择");

		//
		AddAnalyseNotificationCB(m_pShelterPushItemSelect,
			m_pShelterPushItemSelect->GetMenuIActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::OnShelterPushItemSelectCB,
			NULL);
	}

}
//
CATBoolean PrtFstDesignCmd::OnShelterPushItemSelectCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_lstShelterFstChoosedTitles01.RemoveAll();  
	m_lstShelterFstChoosedResults01.RemoveAll(); 
	m_lstShelterFstChoosedTitles02.RemoveAll(); 
	m_lstShelterFstChoosedResults02.RemoveAll(); 
	//
	m_pFstFreeStyleShelterDlg->_ChooseSheltersML->ClearLine();
	//
	CATListValCATUnicodeString alststrName,alststrValue;
	alststrName.Append(m_lstStrShelterFstTitles01);alststrName.Append(m_lstStrShelterFstTitles02);
	alststrValue.Append(m_lstStrShelterFstChoosed01);alststrValue.Append(m_lstStrShelterFstChoosed02);
	//
	for (int m=0; m<=15; m++)
	{
		for (int n=1; n<=alststrName.Size(); n++)
		{
			//
			if (m_pFstFreeStyleShelterDlg->m_lstStrPropertyName02[m] == alststrName[n])
			{

				m_pFstFreeStyleShelterDlg->_ChooseSheltersML->SetColumnItem(m,alststrValue[n]);
				//
				break;
			}
		}

	}
	//
	m_lstShelterFstChoosedTitles01.Append(m_lstStrShelterFstTitles01);  //保护罩标准号信息
	m_lstShelterFstChoosedResults01.Append(m_lstStrShelterFstChoosed01); //保护罩标准号信息
	m_lstShelterFstChoosedTitles02.Append(m_lstStrShelterFstTitles02);  //保护罩规格号信息
	m_lstShelterFstChoosedResults02.Append(m_lstStrShelterFstChoosed02); //保护罩规格号信息
	//
	m_strShelterPos="END";
	m_strChoosedShelterFstTypeFlag=m_strShelterFstTypeFlag;
	//
	return TRUE;
}

void PrtFstDesignCmd::FstFreeStyleShelterDlgClearAllPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstFreeStyleShelterDlg->_ChooseSheltersML->ClearLine();

	//清除列表中的内容
	m_lstShelterFstChoosedTitles01.RemoveAll();  //保护罩标准号信息
	m_lstShelterFstChoosedResults01.RemoveAll(); //保护罩标准号信息
	m_lstShelterFstChoosedTitles02.RemoveAll();  //保护罩规格号信息
	m_lstShelterFstChoosedResults02.RemoveAll();
}


//
//--------------------------------------------------------------------------------------------------------------------------------
//对KnowledgeBased DLG的消息响应
//--------------------------------------------------------------------------------------------------------------------------------
void PrtFstDesignCmd::CloseFstKnowledgeBasedDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeBasedDlg->RequestDelayedDestruction();
	m_pFstKnowledgeBasedDlg=NULL;

	//
	//设置主对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);

}

void PrtFstDesignCmd::FstKnowledgeBasedDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_pFstKnowledgeBasedDlg->RequestDelayedDestruction();
	m_pFstKnowledgeBasedDlg=NULL;

	//
	//设置主对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);
}

void PrtFstDesignCmd::FstKnowledgeBasedDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//
	//初始化状态
	//
	m_pFstKnowledgeBasedDlg->_SearchResultML->ClearLine();
	//
	//对按钮状态的控制
	m_pFstKnowledgeBasedDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstKnowledgeBasedDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);
	
	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		//
		m_lstStrKnowledgeFstTitles.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrKnowledgeFstTitles);
		
		//清除已有的指针信息
		for (int k=1;k<=m_plstKnowledgeFstResults.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstKnowledgeFstResults[k];
			delete TempLstStr;
		}
		m_plstKnowledgeFstResults.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}
				
				//
				m_plstKnowledgeFstResults.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=6; m++)
				{
					//
					if (m_pFstKnowledgeBasedDlg->m_lstStrPropertyName[m] == m_lstStrKnowledgeFstTitles[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstKnowledgeBasedDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}			

			}			
		}

		//			
	}
	
}

void PrtFstDesignCmd::FstKnowledgeBasedDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	if (m_pFstKnowledgeMainBoltDlg == NULL)
	{
		m_pFstKnowledgeMainBoltDlg = new PrtFstKnowledgeMainBoltDlg();
		m_pFstKnowledgeMainBoltDlg->Build();
		m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgShow);

		//显示计算的相关参数信息
		CATUnicodeString strValue01;
		strValue01.BuildFromNum(m_dJstThickMax);
		strValue01 += "mm";
		m_pFstKnowledgeMainBoltDlg->_MaxLayerThicknessEditor->SetText(strValue01);
		//
		CATUnicodeString strValue02;
		strValue02.BuildFromNum(m_dJstThickMin);
		strValue02 += "mm";
		m_pFstKnowledgeMainBoltDlg->_MinLayerThicknessEditor->SetText(strValue02);
		//
		CATUnicodeString strValue03;
		strValue03.BuildFromNum(m_dFirstPrdThickMax);
		strValue03 += "mm";
		m_pFstKnowledgeMainBoltDlg->_FirstLayerThicknessEditor->SetText(strValue03);
		//
		//设置前对话框隐藏
		m_pFstKnowledgeBasedDlg->SetVisibility(CATDlgHide);

		//对按钮状态的控制
		m_pFstKnowledgeMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
		//
		if (m_dJstThickMax != m_dJstThickMin)
		{
			PrtService::ShowDlgNotify("提示","夹持厚度不均匀分布，过滤规则将失效，请结束选用后使用更新紧固件功能校验安装有效性！");
		}

		//-----------------------------------------------------------------------------------------------
		// [9/26/2012 wz4]
		//查询主紧固件的标准号信息
		//----------------------
		CATListValCATUnicodeString alsStrSearchItemsValue;
		alsStrSearchItemsValue.Append("KnowledgeBase=Main");
		alsStrSearchItemsValue.Append("KnowledgeBaseResult=StdCodeInfo");
		CATUnicodeString strTemp01 = "FASTENER_RELATIONS_INFO_AUTOID=" + m_lstStrKnowledgeFstChoosed[1];
		alsStrSearchItemsValue.Append(strTemp01);
		
		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult[2];
			CATUnicodeString strCutNumb=strListOfSearchResult[3];
			double dCount=0,dCutNumb=1;
			strCount.ConvertToNum(&dCount);
			strCutNumb.ConvertToNum(&dCutNumb);
			//
			m_lstStrMainFstTitles01.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles01);

			//清除已有的指针信息
			for (int k=1;k<=m_plstMainFstResults01.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults01[k];
				delete TempLstStr;
			}
			m_plstMainFstResults01.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
			//
			if (cyclecount==dCount && dCount!=0)
			{
				//
				for (int i=1; i<=dCutNumb; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstMainFstResults01.Append(LstStrAtrrValue01);
					//
				}			
			}

			//	
			//----------------------------------------------------------------------------------------------------
			//获得该行的信息
			//----------------------------------------------------------------------------------------------------
			if (m_plstMainFstResults01.Size()==0)
			{
				m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
				m_pFstKnowledgeMainBoltDlg=NULL;
				return;
			}
			//
			double dIndex=1;
			GetChoosedMLValue(1,m_plstMainFstResults01,m_lstStrMainFstChoosed01);
		}
		//------------------------------------------------------------------------------------------------
		CATUnicodeString strType01(""),strType02(""),strType03("");
		int selectComboItem = m_pFstKnowledgeBasedDlg->_Combo01->GetSelect();
		if (selectComboItem != 0)
		{
			m_pFstKnowledgeBasedDlg->_Combo01->GetLine(strType01,selectComboItem);
		}

		for (int i=1; i<= m_lstStrMainFstTitles01.Size(); i++)
		{
			//
			if (m_lstStrMainFstTitles01[i]=="紧固件名称")
			{
				strType02=m_lstStrMainFstChoosed01[i];
			}
			//
			if (m_lstStrMainFstTitles01[i]=="长度计算类型")
			{
				strType03=m_lstStrMainFstChoosed01[i];
			}

			//
			if (m_lstStrMainFstTitles01[i]=="头部类型")
			{
				m_strMainFstHeadType=m_lstStrMainFstChoosed01[i];
			}

		}
		//
		if (strType03 != "")
		{
			m_strMainFstTypeFlag = strType01+"|"+strType02+"|"+strType03;
		} 
		else
		{
			m_strMainFstTypeFlag = strType01+"|"+strType02;
		}
		//----------------------------------------------------------------------------------------------------

		//
		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg, 
			m_pFstKnowledgeMainBoltDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedMainBoltDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg, 
			m_pFstKnowledgeMainBoltDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedMainBoltDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg->_GoToSearchPB, 
			m_pFstKnowledgeMainBoltDlg->_GoToSearchPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgGoToSearchPBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg->_LastStepPB, 
			m_pFstKnowledgeMainBoltDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg->_NextStepPB, 
			m_pFstKnowledgeMainBoltDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgNextStepPBCB,
			NULL);

		//
		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstKnowledgeMainBoltDlg->_SearchResultsML, 
			m_pFstKnowledgeMainBoltDlg->_SearchResultsML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgSearchResultsMLCB,
			NULL);
	}
	else
	{
		m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgShow);
		//
		//设置前对话框隐藏
		m_pFstKnowledgeBasedDlg->SetVisibility(CATDlgHide);
	}
}
//
void PrtFstDesignCmd::FstKnowledgeBasedDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	//获取所选信息
	int  iSize = m_pFstKnowledgeBasedDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeBasedDlg->_SearchResultML->GetSelect(ioTabRow,iSize);
		//
		//获得该行的信息
		//
		m_lstStrKnowledgeFstChoosed.RemoveAll();
		GetChoosedMLValue(ioTabRow[0]+1,m_plstKnowledgeFstResults,m_lstStrKnowledgeFstChoosed);
		//
		//对按钮状态的控制
		m_pFstKnowledgeBasedDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstKnowledgeBasedDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}

}

//---------------------------------
//对KnowledgeBased MainBolt DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstKnowledgeBasedMainBoltDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
	m_pFstKnowledgeMainBoltDlg=NULL;

	//
	//设置主对话框显示
	m_pFstKnowledgeBasedDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
	m_pFstKnowledgeMainBoltDlg=NULL;

	//
	//设置主对话框显示
	m_pFstKnowledgeBasedDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//初始化状态
	//
	m_pFstKnowledgeMainBoltDlg->_SearchResultsML->ClearLine();
	//
	//对按钮状态的控制
	m_pFstKnowledgeMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	//----------------------
	// Go and search
	//----------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstKnowledgeBasedDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstKnowledgeBasedDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrKnowledgeFstChoosed[2]; //增加主紧固件查询条件 标准号信息
	alsStrSearchItemsValue.Append(str01);
	//
	double dMin = m_pFstKnowledgeMainBoltDlg->_MinSpinner->GetValue() * 1000;
	double dMax = m_pFstKnowledgeMainBoltDlg->_MaxSpinner->GetValue() * 1000;
	CATUnicodeString strdMin; strdMin.BuildFromNum(dMin,"%lf");
	CATUnicodeString strdMax; strdMax.BuildFromNum(dMax,"%lf");
	CATUnicodeString str02 = m_pFstKnowledgeBasedDlg->m_strNextStepWBSItem[2] + "=" + strdMin + "-" + strdMax;
	alsStrSearchItemsValue.Append(str02);

	//拆分字符串 "F_ATTEX_FSTTYPE" ，获得其类型信息
	CATListValCATUnicodeString alststrDetailType;
	CHandleString::StringToVector(m_strMainFstTypeFlag,"|",alststrDetailType);
	//----------------------------------------------------
	//需要按照主紧固件的类型反算夹持信息
	//----------------------------------------------------
	if (alststrDetailType[1] == "螺栓")
	{
		//夹持厚度过滤
		CATUnicodeString strThick;
		strThick.BuildFromNum(m_dJstThickMin*LOWERBOLTMIN,"%lf");
		//
		CATUnicodeString str03 = m_pFstKnowledgeBasedDlg->m_strNextStepWBSItem[3] + "=>" + strThick;
		alsStrSearchItemsValue.Append(str03);

		//-------------------------------------------------------------------------------------------------------------
		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult[2];
			CATUnicodeString strCutNumb=strListOfSearchResult[3];
			double dCount=0,dCutNumb=1;
			strCount.ConvertToNum(&dCount);
			strCutNumb.ConvertToNum(&dCutNumb);
			//
			m_lstStrMainFstTitles02.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrMainFstTitles02);

			//清除已有的指针信息
			for (int k=1;k<=m_plstMainFstResults02.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstMainFstResults02[k];
				delete TempLstStr;
			}
			m_plstMainFstResults02.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
			//
			if (cyclecount==dCount && dCount!=0)
			{
				//
				for (int i=1; i<=dCutNumb; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstMainFstResults02.Append(LstStrAtrrValue01);

					//
					for (int m=0; m<=14; m++)
					{
						//
						if (m_pFstKnowledgeMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles02[i])
						{
							for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
							{
								m_pFstKnowledgeMainBoltDlg->_SearchResultsML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
							}

							//
							break;
						}				
					}			

				}			
			}

			for (int m=0; m<=14; m++)
			{
				//
				for (int n=1; n<= m_lstStrMainFstTitles01.Size(); n++)
				{
					//
					if (m_pFstKnowledgeMainBoltDlg->m_lstStrPropertyName[m] == m_lstStrMainFstTitles01[n] && m_pFstKnowledgeMainBoltDlg->m_lstStrPropertyName[m] != "紧固件标准号")
					{
						for (int k=1; k<=cyclecount; k++)
						{
							m_pFstKnowledgeMainBoltDlg->_SearchResultsML->SetColumnItem(m,m_lstStrMainFstChoosed01[n]);
						}
						//
						break;
					}
				}

			}

			//根据个数，开展循环，计算每一条数据的“**余量**”信息
			for (int i=1; i<=dCount; i++)
			{
				//获得该行的信息
				CATListValCATUnicodeString lststrMainFstValue;
				GetChoosedMLValue(i,m_plstMainFstResults02,lststrMainFstValue);
				//
				double dThickLimit;
				//
				for (int j=1; j<=m_lstStrMainFstTitles02.Size(); j++)
				{
					//
					if (m_lstStrMainFstTitles02[j] == "夹持厚度")
					{
						lststrMainFstValue[j].ConvertToNum(&dThickLimit,"%lf");
						break;
					}

				}
				//
				/*
				double dLeft = dThickLimit-m_dJstThickMax;
				CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
				//
				m_pFstKnowledgeMainBoltDlg->_SearchResultsML->SetColumnItem(14,strdLeft,i-1);
				*/
				if (m_dJstThickMax == m_dJstThickMin)
				{
					double dLeft = dThickLimit-m_dJstThickMax;
					CATUnicodeString strdLeft;strdLeft.BuildFromNum(dLeft);
					//
					m_pFstKnowledgeMainBoltDlg->_SearchResultsML->SetColumnItem(14,strdLeft,i-1);
				} 
				else
				{
					double dLeft01 = dThickLimit-m_dJstThickMax;
					double dLeft02 = dThickLimit-m_dJstThickMin;

					CATUnicodeString strdLeft01;strdLeft01.BuildFromNum(dLeft01);
					CATUnicodeString strdLeft02;strdLeft02.BuildFromNum(dLeft02);
					CATUnicodeString strEnd = strdLeft01 + "~" + strdLeft02;

					//
					m_pFstKnowledgeMainBoltDlg->_SearchResultsML->SetColumnItem(14,strEnd,i-1);
				}
			}
		}
	}

}

void PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	if (m_pFstKnowledgeNutDlg == NULL)
	{
		m_pFstKnowledgeNutDlg = new PrtFstKnowledgeNutDlg();
		m_pFstKnowledgeNutDlg->Build();
		m_pFstKnowledgeNutDlg->SetVisibility(CATDlgShow);
		//
		//对按钮状态的控制
		m_pFstKnowledgeNutDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
		//
		//设置前对话框隐藏
		m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgHide);
		//
		for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
		{
			if (m_lstStrMainFstTitles02[i] == "总长度")
			{
				m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstLength,"%lf");
			}
			//
			if (m_lstStrMainFstTitles02[i] == "夹持厚度")
			{
				m_lstStrMainFstChoosed02[i].ConvertToNum(&m_dMainFstThickLimit,"%lf");
			}
		}

		//--------------------------------------------------------------------------------------------------------------------------------------
		//开展查询工作，需要补充公称直径参数值
		// [9/26/2012 wz4]
		//----------------------
		CATListValCATUnicodeString alsStrSearchItemsValue;
		alsStrSearchItemsValue.Append("KnowledgeBase=Nut");
		alsStrSearchItemsValue.Append("KnowledgeBaseResult=StdCodeInfo");
		CATUnicodeString strTemp = "FASTENER_RELATIONS_INFO_AUTOID=" + m_lstStrKnowledgeFstChoosed[1];
		alsStrSearchItemsValue.Append(strTemp);

		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult;
		//调用查询接口
		HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult[2];
			CATUnicodeString strCutNumb=strListOfSearchResult[3];
			double dCount=0,dCutNumb=1;
			strCount.ConvertToNum(&dCount);
			strCutNumb.ConvertToNum(&dCutNumb);
			//
			m_lstStrNutFstTitles01.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrNutFstTitles01);

			//清除已有的指针信息
			for (int k=1;k<=m_plstNutFstResults01.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstNutFstResults01[k];
				delete TempLstStr;
			}
			m_plstNutFstResults01.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
			//
			if (cyclecount==dCount && dCount!=0)
			{
				//
				for (int i=1; i<=dCutNumb; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstNutFstResults01.Append(LstStrAtrrValue01);
				}			
			}

			//			
		}

		//----------------------------------------------------------------------------------------------------
		//获得该行的信息
		//----------------------------------------------------------------------------------------------------
		if (m_plstNutFstResults01.Size()==0)
		{
			m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
			m_pFstKnowledgeNutDlg=NULL;
			//
			return;
		}
		//
		double dIndex=1;
		GetChoosedMLValue(dIndex,m_plstNutFstResults01,m_lstStrNutFstChoosed01);
		//
		CATUnicodeString strType01("螺母"),strType02("");
		//
		for (int i=1; i<= m_lstStrNutFstTitles01.Size(); i++)
		{
			//
			if (m_lstStrNutFstTitles01[i]=="紧固件名称")
			{
				strType02=m_lstStrNutFstChoosed01[i];
			}
		}
		//
		m_strNutFstTypeFlag = strType01+"|"+strType02;
		//PrtService::ShowDlgNotify("测试提示",m_strNutFstTypeFlag);

		//--------------------------------------------------------------------------------------------------------------------------------------
		//获得规格信息
		//----------------------
		alsStrSearchItemsValue.RemoveAll();
		alsStrSearchItemsValue.Append("KnowledgeBase=Nut");
		alsStrSearchItemsValue.Append("KnowledgeBaseResult=SpecInfo");
		CATUnicodeString strTemp01 = "FASTENER_RELATIONS_INFO_AUTOID=" + m_lstStrKnowledgeFstChoosed[1];
		alsStrSearchItemsValue.Append(strTemp01);
		CATUnicodeString strTemp02 = "KnowledgeNominalDiameter=" + m_strdFstDiameterValue;
		alsStrSearchItemsValue.Append(strTemp02);

		//存储搜索得到的Value 
		CATListValCATUnicodeString strListOfSearchResult02;
		//调用查询接口
		hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);

		//过滤需要的信息
		if (SUCCEEDED(hr))
		{
			//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
			CATUnicodeString strCount=strListOfSearchResult02[2];
			CATUnicodeString strCutNumb=strListOfSearchResult02[3];
			double dCount02=0,dCutNumb02=1;
			strCount.ConvertToNum(&dCount02);
			strCutNumb.ConvertToNum(&dCutNumb02);
			//
			m_lstStrNutFstTitles02.RemoveAll();
			CATUnicodeString strValue05=strListOfSearchResult02[5];
			CHandleString::StringToVector(strValue05,"|",m_lstStrNutFstTitles02);

			//清除已有的指针信息
			for (int k=1;k<=m_plstNutFstResults02.Size();k++)
			{
				CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstNutFstResults02[k];
				delete TempLstStr;
			}
			m_plstNutFstResults02.RemoveAll();

			//计算以倍数的循环次数
			int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
			//
			if (cyclecount==dCount02 && dCount02!=0)
			{
				//
				for (int i=1; i<=dCutNumb02; i++)
				{
					//首选创建实例化的数组列
					CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
					//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
					//
					for (int j=1; j<=cyclecount; j++)
					{
						//
						CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
						//
						if (strConvert == "########")
						{
							strConvert = NULL;
							(*LstStrAtrrValue01).Append(strConvert);
						}
						else
							(*LstStrAtrrValue01).Append(strConvert);
					}

					//
					m_plstNutFstResults02.Append(LstStrAtrrValue01);

					//
					for (int m=0; m<=18; m++)
					{
						//
						if (m_pFstKnowledgeNutDlg->m_lstStrPropertyName[m] == m_lstStrNutFstTitles02[i])
						{
							for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
							{
								m_pFstKnowledgeNutDlg->_SearchResultsML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
							}

							//
							break;
						}				
					}			

				}

				for (int m=0; m<=18; m++)
				{
					//
					for (int n=1; n<= m_lstStrNutFstTitles01.Size(); n++)
					{
						//
						if (m_pFstKnowledgeNutDlg->m_lstStrPropertyName[m] == m_lstStrNutFstTitles01[n] && m_pFstKnowledgeNutDlg->m_lstStrPropertyName[m] != "紧固件标准号")
						{
							for (int k=1; k<=cyclecount; k++)
							{
								m_pFstKnowledgeNutDlg->_SearchResultsML->SetColumnItem(m,m_lstStrNutFstChoosed01[n]);
							}
							//
							break;
						}
					}

				}
				//-----------------------------------------------------------------------------

			}

			//			
		}
		//--------------------------------------------------------------------------------------------------------------------------------------
		//
		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstKnowledgeNutDlg, 
			m_pFstKnowledgeNutDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedNutDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstKnowledgeNutDlg, 
			m_pFstKnowledgeNutDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedNutDlgCB,
			NULL);
		//
		AddAnalyseNotificationCB (m_pFstKnowledgeNutDlg->_LastStepPB, 
			m_pFstKnowledgeNutDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedNutDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstKnowledgeNutDlg->_NextStepPB, 
			m_pFstKnowledgeNutDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedNutDlgNextStepPBCB,
			NULL);

		//
		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstKnowledgeNutDlg->_SearchResultsML, 
			m_pFstKnowledgeNutDlg->_SearchResultsML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedNutDlgSearchResultsMLCB,
			NULL);
	}
	else
	{
		m_pFstKnowledgeNutDlg->SetVisibility(CATDlgShow);

		//
		//设置前对话框隐藏
		m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgHide);
	}	
}

//
void PrtFstDesignCmd::FstKnowledgeBasedMainBoltDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstKnowledgeMainBoltDlg->_SearchResultsML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeMainBoltDlg->_SearchResultsML->GetSelect(ioTabRow,iSize);
		//
		//
		/*CATUnicodeString strLeftValue;
		m_pFstKnowledgeMainBoltDlg->_SearchResultsML->GetColumnItem(14,strLeftValue,ioTabRow[0]);
		strLeftValue.ConvertToNum(&m_dLeftCheck,"%lf");*/

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstMainFstResults02,m_lstStrMainFstChoosed02);

		//获得头部厚度
		for (int i=1; i<= m_lstStrMainFstChoosed02.Size(); i++)
		{
			//
			if (m_lstStrMainFstTitles02[i] == "头部厚度")
			{
				//
				CATUnicodeString strThickness = m_lstStrMainFstChoosed02[i];
				strThickness.ConvertToNum(&m_dHeadThickness,"%lf");
			}

			//需要修改部分，当名称更正后
			if (m_lstStrMainFstTitles02[i] == "公称直径")
			{
				//
				m_strdFstDiameterValue = m_lstStrMainFstChoosed02[i];
				m_strdFstDiameterValue.ConvertToNum(&m_dFstDiameterValue,"%lf");
			}
		}

		//对按钮状态的控制
		m_pFstKnowledgeMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstKnowledgeMainBoltDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}

}

//---------------------------------
//对KnowledgeBased Nut DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstKnowledgeBasedNutDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
	m_pFstKnowledgeNutDlg=NULL;
	//
	//设置前对话框显示
	m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedNutDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
	m_pFstKnowledgeNutDlg=NULL;
	//
	//设置前对话框显示
	m_pFstKnowledgeMainBoltDlg->SetVisibility(CATDlgShow);
}
void PrtFstDesignCmd::FstKnowledgeBasedNutDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//
	if (m_pFstKnowledgeWasherDlg == NULL)
	{
		m_pFstKnowledgeWasherDlg = new PrtFstKnowledgeWasherDlg();
		m_pFstKnowledgeWasherDlg->Build();
		m_pFstKnowledgeWasherDlg->SetVisibility(CATDlgShow);
		//
		m_lststrSendKnowWasherFst.RemoveAll();
		//
		//设置前对话框隐藏
		m_pFstKnowledgeNutDlg->SetVisibility(CATDlgHide);
		//
		m_pFstKnowledgeWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);

		//清除列表中的内容
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedTitles01.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedResults01.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedTitles02.RemoveAll();
		//清除已有的指针信息
		for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
			delete TempLstStr;
		}
		m_plstWasherFstChoosedResults02.RemoveAll();

		//
		m_dWasherFstThickValueStart=0;
		m_dWasherFstThickValueEnd=0;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			//
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			//
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);

		}

		//--------------------------------------------------------------------------------------------------------------------------------------------------------------

		//初始化状态
		//
		m_pFstKnowledgeWasherDlg->_SearchResultsML->ClearLine();
		//
		if (m_lstStrKnowledgeFstChoosed[6] != "")
		{
			//-----------------------------------------------------------------------------------------------
			//第一步获取所选标准号信息
			//-----------------------------------------------------------------------------------------------
			CATListValCATUnicodeString alsStrSearchItemsValue;
			alsStrSearchItemsValue.Append("KnowledgeBase=Sub");
			alsStrSearchItemsValue.Append("KnowledgeBaseResult=StdCodeInfo");
			CATUnicodeString strTemp = "FASTENER_RELATIONS_INFO_AUTOID=" + m_lstStrKnowledgeFstChoosed[1];
			alsStrSearchItemsValue.Append(strTemp);

			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult;
			//调用查询接口
			HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{
				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult[2];
				CATUnicodeString strCutNumb=strListOfSearchResult[3];
				double dCount=0,dCutNumb=1;
				strCount.ConvertToNum(&dCount);
				strCutNumb.ConvertToNum(&dCutNumb);
				//
				m_lstStrWasherFstTitles01.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrWasherFstTitles01);

				//清除已有的指针信息
				for (int k=1;k<=m_plstWasherFstResults01.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults01[k];
					delete TempLstStr;
				}
				m_plstWasherFstResults01.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
				//
				if (cyclecount==dCount && dCount!=0)
				{
					//
					for (int i=1; i<=dCutNumb; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstWasherFstResults01.Append(LstStrAtrrValue01);
					}			
				}

				//			
			}

			//----------------------------------------------------------------------------------------------------
			//获得该行的信息
			//----------------------------------------------------------------------------------------------------
			if (m_plstWasherFstResults01.Size()==0)
			{
				m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
				m_pFstKnowledgeWasherDlg=NULL;
				return;
			}
			//
			double dIndex=1;
			GetChoosedMLValue(dIndex,m_plstWasherFstResults01,m_lstStrWasherFstChoosed01);
			//
			CATUnicodeString strType01("垫圈&垫片"),strType02("");
			//
			for (int i=1; i<= m_lstStrWasherFstTitles01.Size(); i++)
			{
				//
				if (m_lstStrWasherFstTitles01[i]=="紧固件名称")
				{
					strType02=m_lstStrWasherFstChoosed01[i];
				}
			}
			//
			m_strWasherFstTypeFlag = strType01+"|"+strType02;

			//----------------------------------------------------------------------------------------------------
			// 第二步获得所搜索规格号信息
			//----------------------------------------------------------------------------------------------------
			alsStrSearchItemsValue.RemoveAll();
			alsStrSearchItemsValue.Append("KnowledgeBase=Sub");
			alsStrSearchItemsValue.Append("KnowledgeBaseResult=SpecInfo");
			CATUnicodeString strTemp01 = "FASTENER_RELATIONS_INFO_AUTOID=" + m_lstStrKnowledgeFstChoosed[1];
			alsStrSearchItemsValue.Append(strTemp01);
			CATUnicodeString strTemp02 = "KnowledgeNominalDiameter=" + m_strdFstDiameterValue;
			alsStrSearchItemsValue.Append(strTemp02);
			//存储搜索得到的Value 
			CATListValCATUnicodeString strListOfSearchResult02;
			//调用查询接口
			hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);

			//过滤需要的信息
			if (SUCCEEDED(hr))
			{

				//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
				CATUnicodeString strCount=strListOfSearchResult02[2];
				CATUnicodeString strCutNumb=strListOfSearchResult02[3];
				double dCount02=0,dCutNumb02=1;
				strCount.ConvertToNum(&dCount02);
				strCutNumb.ConvertToNum(&dCutNumb02);
				//
				m_lstStrWasherFstTitles02.RemoveAll();
				CATUnicodeString strValue05=strListOfSearchResult02[5];
				CHandleString::StringToVector(strValue05,"|",m_lstStrWasherFstTitles02);

				//清除已有的指针信息
				for (int k=1;k<=m_plstWasherFstResults02.Size();k++)
				{
					CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstResults02[k];
					delete TempLstStr;
				}
				m_plstWasherFstResults02.RemoveAll();

				//计算以倍数的循环次数
				int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
				//
				if (cyclecount==dCount02 && dCount02!=0)
				{

					//
					for (int i=1; i<=dCutNumb02; i++)
					{
						//首选创建实例化的数组列
						CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
						//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
						//
						for (int j=1; j<=cyclecount; j++)
						{
							//
							CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
							//
							if (strConvert == "########")
							{
								strConvert = NULL;
								(*LstStrAtrrValue01).Append(strConvert);
							}
							else
								(*LstStrAtrrValue01).Append(strConvert);
						}

						//
						m_plstWasherFstResults02.Append(LstStrAtrrValue01);

						//
						for (int m=0; m<=10; m++)
						{

							//
							if (m_pFstKnowledgeWasherDlg->m_lstStrPropertyName[m] == m_lstStrWasherFstTitles02[i])
							{
								for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
								{
									m_pFstKnowledgeWasherDlg->_SearchResultsML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
								}

								//
								break;
							}				
						}	
						
					}	
					//
					for (int m=0; m<=10; m++)
					{
						//
						for (int n=1; n<= m_lstStrNutFstTitles01.Size(); n++)
						{
							//
							if (m_pFstKnowledgeWasherDlg->m_lstStrPropertyName[m] == m_lstStrNutFstTitles01[n] && m_pFstKnowledgeWasherDlg->m_lstStrPropertyName[m] != "紧固件标准号")
							{
								for (int k=1; k<=cyclecount; k++)
								{
									m_pFstKnowledgeWasherDlg->_SearchResultsML->SetColumnItem(m,m_lstStrNutFstChoosed01[n]);
								}
								//
								break;
							}
						}

					}
				}
				
			}
		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------------------


		// 主对话框的消息响应
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg, 
			m_pFstKnowledgeWasherDlg->GetWindCloseNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedWasherDlgCB,
			NULL);

		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg, 
			m_pFstKnowledgeWasherDlg->GetDiaCLOSENotification(),
			(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedWasherDlgCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_LastStepPB, 
			m_pFstKnowledgeWasherDlg->_LastStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgLastStepPBCB,
			NULL);
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_NextStepPB, 
			m_pFstKnowledgeWasherDlg->_NextStepPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgNextStepPBCB,
			NULL);

		//
		//ML选择的响应
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_SearchResultsML, 
			m_pFstKnowledgeWasherDlg->_SearchResultsML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgSearchResultsMLCB,
			NULL);

		//
		//CHOOSED ML选择的响应
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_ChooseWashersML, 
			m_pFstKnowledgeWasherDlg->_ChooseWashersML->GetListSelectNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgChooseWashersMLCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_RemovePB, 
			m_pFstKnowledgeWasherDlg->_RemovePB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgRemovePBCB,
			NULL);

		//
		AddAnalyseNotificationCB (m_pFstKnowledgeWasherDlg->_ClearAllPB, 
			m_pFstKnowledgeWasherDlg->_ClearAllPB->GetPushBActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedWasherDlgClearAllPBCB,
			NULL);
	}
	else
	{
		m_pFstKnowledgeWasherDlg->SetVisibility(CATDlgShow);
		//
		//设置前对话框隐藏
		m_pFstKnowledgeNutDlg->SetVisibility(CATDlgHide);

	}
}
void PrtFstDesignCmd::FstKnowledgeBasedNutDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstKnowledgeNutDlg->_SearchResultsML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeNutDlg->_SearchResultsML->GetSelect(ioTabRow,iSize);
		//
		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstNutFstResults02,m_lstStrNutFstChoosed02);

		//
		//获得头部厚度
		for (int i=1; i<= m_lstStrNutFstChoosed02.Size(); i++)
		{
			//需要修改部分，当名称更正后
			if (m_lstStrNutFstTitles02[i] == "厚度" || m_lstStrNutFstTitles02[i] == "总厚度")
			{
				//
				m_strdNutFstThickValue = m_lstStrNutFstChoosed02[i];
				m_strdNutFstThickValue.ConvertToNum(&m_dNutFstThickValue,"%lf");
			}
		}

		//对按钮状态的控制
		m_pFstKnowledgeNutDlg->_NextStepPB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		//对按钮状态的控制
		m_pFstKnowledgeNutDlg->_NextStepPB->SetSensitivity(CATDlgDisable);
	}

}

//---------------------------------
//对KnowledgeBased Washer DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstKnowledgeBasedWasherDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
	m_pFstKnowledgeWasherDlg=NULL;
	//
	//设置前对话框显示
	m_pFstKnowledgeNutDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
	m_pFstKnowledgeWasherDlg=NULL;
	//
	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	m_lststrSendKnowWasherFst.RemoveAll();
	//
	//设置前对话框显示
	m_pFstKnowledgeNutDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//如果选择的是其它螺母类型，则跳出选择保护罩的选项
	if (1) //如果非普通螺母
	{
		//
		double dCheck01=0,dCheck02=0;
		dCheck01 = m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue;
		dCheck02 = m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart;
		if (/*dCheck02 >=-5 &&*/ dCheck02 <= 1 && dCheck01 >= 2)
		{
			//
			m_pFstKnowledgeShelterDlg = new PrtFstFreeStyleShelterDlg();
			m_pFstKnowledgeShelterDlg->Build();
			m_pFstKnowledgeShelterDlg->SetVisibility(CATDlgShow);
			//
			//设置前对话框隐藏
			m_pFstKnowledgeWasherDlg->SetVisibility(CATDlgHide);
			//
			m_pFstKnowledgeShelterDlg->_GoToSearchPB->SetSensitivity(CATDlgDisable);
			// 主对话框的消息响应
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg, 
				m_pFstKnowledgeShelterDlg->GetWindCloseNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedShelterDlgCB,
				NULL);

			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg, 
				m_pFstKnowledgeShelterDlg->GetDiaCLOSENotification(),
				(CATCommandMethod)&PrtFstDesignCmd::CloseFstKnowledgeBasedShelterDlgCB,
				NULL);
			//
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg->_GoToSearchPB, 
				m_pFstKnowledgeShelterDlg->_GoToSearchPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedShelterDlgGoToSearchPBCB,
				NULL);

			//
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg->_LastStepPB, 
				m_pFstKnowledgeShelterDlg->_LastStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedShelterDlgLastStepPBCB,
				NULL);
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg->_NextStepPB, 
				m_pFstKnowledgeShelterDlg->_NextStepPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedShelterDlgNextStepPBCB,
				NULL);

			//
			//ML选择的响应
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg->_SearchResultML, 
				m_pFstKnowledgeShelterDlg->_SearchResultML->GetListSelectNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedShelterDlgSearchResultsMLCB,
				NULL);

			//
			//
			AddAnalyseNotificationCB (m_pFstKnowledgeShelterDlg->_RemoveAllPB, 
				m_pFstKnowledgeShelterDlg->_RemoveAllPB->GetPushBActivateNotification(),
				(CATCommandMethod)&PrtFstDesignCmd::FstKnowledgeBasedShelterDlgClearAllPBCB,
				NULL);
		}
		else
		{
			//提示信息
			PrtService::ShowDlgNotify("提示信息","当前组合不满足螺栓安装条件，请调整所选信息！");
		}
	} 
	else //如果是普通螺母
	{
		//
		double dCheck01=0,dCheck02=0;
		dCheck01 = m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue;
		dCheck02 = m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart;
		if (/*dCheck02 >=-5 &&*/ dCheck02 <= 1 && dCheck01 >= 2)
		{
			//
			//清空
			m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();
			//获得需要的数据
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strMainFstTypeFlag,0);
			CATUnicodeString strSpecValue01;
			for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
			{
				if (m_lstStrMainFstTitles02[i]=="紧固件标识")
				{
					strSpecValue01=m_lstStrMainFstChoosed02[i];
					break;
				}
			}
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue01,0);
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"",0);


			//
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strNutFstTypeFlag,1);
			CATUnicodeString strSpecValue02;
			for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
			{
				if (m_lstStrNutFstTitles02[i]=="紧固件标识")
				{
					strSpecValue02=m_lstStrNutFstChoosed02[i];
					break;
				}
			}
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue02,1);
			m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"END",1,CATDlgDataModify);

			//
			CATUnicodeString strSpecValue03;
			CATListValCATUnicodeString alstStrSpecValue03;
			for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
			{
				//
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_lstStrWasherFstTypeFlag[j],j+1);
				CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
				CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
				for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
				{
					if ((*TempLstStrTitle)[i]=="紧固件标识")
					{
						strSpecValue03=(*TempLstStrValue)[i];
						alstStrSpecValue03.Append(strSpecValue03);
						break;
					}
				}
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue03,j+1);
				m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_lstStrWasherPos[j],j+1,CATDlgDataModify);
			}

			//
			//
			//初始化数据
			ClearFstInfoLst();
			//
			m_alistStrFSTType.Append(m_strMainFstTypeFlag);
			m_alistStrFSTName.Append(strSpecValue01);
			if (m_lstStrWasherFstTypeFlag.Size()!=0)
			{
				m_alistStrFSTType.Append(m_lstStrWasherFstTypeFlag);
				m_alistStrFSTName.Append(alstStrSpecValue03);
			}
			m_alistStrFSTType.Append(m_strNutFstTypeFlag);
			m_alistStrFSTName.Append(strSpecValue02);
			//
			m_lststrCirclePositions.Append(m_lstStrWasherPos);
			m_lststrCirclePositions.Append("END");
			//
			CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstTitles01;
			m_pListStrPropertyName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstChoosed01;
			m_pListStrPropertyValue.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstTitles02;
			m_pListStrSpecialName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrMainFstChoosed02;
			m_pListStrSpecialValue.Append(LstStrAtrrValue);
			//
			for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
			{
				//
				CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
				CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
				CATUnicodeString strTemp01, strTemp02;
				for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
				{
					if ((*TempLstStrTitle)[i]=="厚度")
					{
						strTemp01=(*TempLstStrValue)[i];
						double dvalue=0;
						strTemp01.ConvertToNum(&dvalue,"%lf");
						m_lstCircleThicks.Append(dvalue);
					}

					if (/*(*TempLstStrTitle)[i]=="内径" ||*/ (*TempLstStrTitle)[i]=="公称直径")
					{
						strTemp02=(*TempLstStrValue)[i];
						double dvalue=0;
						strTemp02.ConvertToNum(&dvalue,"%lf");
						m_lstCircleRadiusValues.Append(dvalue);
					}
				}
			}
			//
			CATUnicodeString strTemp01, strTemp02;
			for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
			{
				if (m_lstStrNutFstTitles02[i]=="厚度" || m_lstStrNutFstTitles02[i]=="总厚度")
				{
					strTemp01=m_lstStrNutFstChoosed02[i];
					double dvalue=0;
					strTemp01.ConvertToNum(&dvalue,"%lf");
					m_lstCircleThicks.Append(dvalue);
				}

				if (/*m_lstStrNutFstTitles02[i]=="直径" || */m_lstStrNutFstTitles02[i]=="公称直径")
				{
					strTemp02=m_lstStrNutFstChoosed02[i];
					double dvalue=0;
					strTemp02.ConvertToNum(&dvalue,"%lf");
					m_lstCircleRadiusValues.Append(dvalue);
				}
			}
			//
			for (int i=1; i<=m_plstWasherFstChoosedTitles01.Size(); i++)
			{
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
				CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();
				//
				CATLISTV(CATUnicodeString) * TempLstStrTitle01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
				CATLISTV(CATUnicodeString) * TempLstStrValue01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
				CATLISTV(CATUnicodeString) * TempLstStrTitle02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
				CATLISTV(CATUnicodeString) * TempLstStrValue02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
				//
				*LstStrAtrrValue01 = *TempLstStrTitle01;
				*LstStrAtrrValue02 = *TempLstStrValue01;
				*LstStrAtrrValue03 = *TempLstStrTitle02;
				*LstStrAtrrValue04 = *TempLstStrValue02;
				//
				m_pListStrPropertyName.Append(LstStrAtrrValue01);
				m_pListStrPropertyValue.Append(LstStrAtrrValue02);
				m_pListStrSpecialName.Append(LstStrAtrrValue03);
				m_pListStrSpecialValue.Append(LstStrAtrrValue04);
			}
			//
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstTitles01;
			m_pListStrPropertyName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstChoosed01;
			m_pListStrPropertyValue.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstTitles02;
			m_pListStrSpecialName.Append(LstStrAtrrValue);
			LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
			*LstStrAtrrValue = m_lstStrNutFstChoosed02;
			m_pListStrSpecialValue.Append(LstStrAtrrValue);
			//
			//垫圈位置信息
			m_lstStrWasherPos.RemoveAll();
			m_lstStrWasherFstTypeFlag.RemoveAll();
			//设置前对话框显示
			m_pFstAccessDlg->SetVisibility(CATDlgShow);
			m_pFstAccessDlg->SetOKSensitivity(CATDlgEnable);
			
			//--------------------------------------------
			//关闭所有过程对话框
			//--------------------------------------------
			if (m_pFstKnowledgeBasedDlg != NULL)
			{
				m_pFstKnowledgeBasedDlg->RequestDelayedDestruction();
				m_pFstKnowledgeBasedDlg=NULL;
			}

			if (m_pFstKnowledgeMainBoltDlg != NULL)
			{
				m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
				m_pFstKnowledgeMainBoltDlg=NULL;
			}

			if (m_pFstKnowledgeNutDlg != NULL)
			{
				m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
				m_pFstKnowledgeNutDlg=NULL;
			}

			if (m_pFstKnowledgeWasherDlg != NULL)
			{
				m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
				m_pFstKnowledgeWasherDlg=NULL;
			}
		} 
		else
		{
			//提示信息
			PrtService::ShowDlgNotify("提示信息","当前组合不满足螺栓安装条件，请调整所选信息！");
		}
	}//普通螺母的情况	
}

void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//
	//获取所选信息
	int  iSize = m_pFstKnowledgeWasherDlg->_SearchResultsML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeWasherDlg->_SearchResultsML->GetSelect(ioTabRow,iSize);

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstWasherFstResults02,m_lstStrWasherFstChoosed02);

		//获取所选垫圈的厚度值
		for (int i=1; i<= m_lstStrWasherFstChoosed02.Size(); i++)
		{
			if (m_lstStrWasherFstTitles02[i] == "厚度")
			{
				//
				m_lstStrWasherFstChoosed02[i].ConvertToNum(&m_dSearchedWasherThick,"%lf");
				break;
			}
		}


		//显示ContextualMenu菜单
		m_pKnowWasherContextMenu = new CATDlgContextualMenu (m_pFstKnowledgeWasherDlg->_SearchResultsML, "Context",CATDlgCtxEmpty);
		m_pKnowWasherPushItemSelect = new CATDlgPushItem(m_pKnowWasherContextMenu,"选择");

		//
		AddAnalyseNotificationCB(m_pKnowWasherPushItemSelect,
			m_pKnowWasherPushItemSelect->GetMenuIActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::OnKnowledgeBasedWasherPushItemSelectCB,
			NULL);
	}
}

void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgChooseWashersMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//获取所选信息
	int  iSize = m_pFstKnowledgeWasherDlg->_ChooseWashersML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeWasherDlg->_ChooseWashersML->GetSelect(ioTabRow,iSize);
		//
		m_IndexChoosedWasher = ioTabRow[0]+1;
		//
		//获取所选垫圈的厚度值
		//
		CATLISTV(CATUnicodeString) *TempLstStr01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[m_IndexChoosedWasher];
		CATLISTV(CATUnicodeString) *TempLstStr02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[m_IndexChoosedWasher];
		for (int i=1; i<= (*TempLstStr01).Size(); i++)
		{
			if ((*TempLstStr01)[i] == "厚度")
			{
				//
				(*TempLstStr02)[i].ConvertToNum(&m_dChoosedWasherThick,"%lf");
				break;
			}
		}
		//
		m_pFstKnowledgeWasherDlg->_RemovePB->SetSensitivity(CATDlgEnable);
	}
	else
	{
		m_pFstKnowledgeWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);
	}
}
void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgRemovePBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeWasherDlg->_ChooseWashersML->ClearLine();
	//
	CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[m_IndexChoosedWasher];
	m_plstWasherFstChoosedTitles01.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[m_IndexChoosedWasher];
	m_plstWasherFstChoosedResults01.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[m_IndexChoosedWasher];
	m_plstWasherFstChoosedTitles02.RemovePosition(m_IndexChoosedWasher);  
	delete TempLstStr;
	//
	TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[m_IndexChoosedWasher];
	m_plstWasherFstChoosedResults02.RemovePosition(m_IndexChoosedWasher); 
	delete TempLstStr;
	//垫圈位置信息
	if (m_lstStrWasherPos[m_IndexChoosedWasher] == "START")
	{
		/*
		m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			//
			m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			m_dWasherFstThickValueStart -= m_dChoosedWasherThick;
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	else
	{
		/*
		m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			//
			m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			m_dWasherFstThickValueEnd -= m_dChoosedWasherThick;
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	//
	m_lstStrWasherPos.RemovePosition(m_IndexChoosedWasher);
	m_lstStrWasherFstTypeFlag.RemovePosition(m_IndexChoosedWasher);
	//
	for (int i=1; i<= m_plstWasherFstChoosedTitles01.Size(); i++)
	{
		//
		CATLISTV(CATUnicodeString) * TempLstStr01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
		CATLISTV(CATUnicodeString) * TempLstStr02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
		//
		CATLISTV(CATUnicodeString) * TempLstStr03 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
		CATLISTV(CATUnicodeString) * TempLstStr04 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
		//
		CATListValCATUnicodeString alststrName,alststrValue;
		alststrName.Append(*TempLstStr01);alststrName.Append(*TempLstStr02);
		alststrValue.Append(*TempLstStr03);alststrValue.Append(*TempLstStr04);
		//
		for (int m=0; m<=13; m++)
		{
			for (int n=1; n<=alststrName.Size(); n++)
			{
				//
				if (m_pFstKnowledgeWasherDlg->m_lstStrPropertyName02[m] == alststrName[n])
				{

					m_pFstKnowledgeWasherDlg->_ChooseWashersML->SetColumnItem(m,alststrValue[n]);
					//
					break;
				}
			}

		}
		//
		m_pFstKnowledgeWasherDlg->_ChooseWashersML->SetColumnItem(0,m_lstStrWasherPos[i],i-1,CATDlgDataModify);
	}

	m_pFstKnowledgeWasherDlg->_RemovePB->SetSensitivity(CATDlgDisable);

}
void PrtFstDesignCmd::FstKnowledgeBasedWasherDlgClearAllPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeWasherDlg->_ChooseWashersML->ClearLine();
	//
	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	m_lststrSendKnowWasherFst.RemoveAll();
	//
	//垫圈位置信息
	m_dWasherFstThickValueStart = 0;
	m_dWasherFstThickValueEnd = 0;
	//
	/*
	CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
	m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
	strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
	m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
	*/
	if (m_dJstThickMax == m_dJstThickMin)
	{
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
	} 
	else
	{
		CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
		strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
		CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
	}
	//清除列表中的内容
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults01.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults01.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedTitles02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedTitles02.RemoveAll();
	//清除已有的指针信息
	for (int k=1;k<=m_plstWasherFstChoosedResults02.Size();k++)
	{
		CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[k];
		delete TempLstStr;
	}
	m_plstWasherFstChoosedResults02.RemoveAll();
}
CATBoolean PrtFstDesignCmd::OnKnowledgeBasedWasherPushItemSelectCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
	//首选创建实例化的数组列
	CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();

	//
	*LstStrAtrrValue01 = m_lstStrWasherFstTitles01;
	*LstStrAtrrValue02 = m_lstStrWasherFstChoosed01;
	*LstStrAtrrValue03 = m_lstStrWasherFstTitles02;
	*LstStrAtrrValue04 = m_lstStrWasherFstChoosed02;

	//
	m_plstWasherFstChoosedTitles01.Append(LstStrAtrrValue01);  
	m_plstWasherFstChoosedResults01.Append(LstStrAtrrValue02); 
	m_plstWasherFstChoosedTitles02.Append(LstStrAtrrValue03);  
	m_plstWasherFstChoosedResults02.Append(LstStrAtrrValue04);
	//
	CATListValCATUnicodeString alststrName,alststrValue;
	alststrName.Append(m_lstStrWasherFstTitles01);alststrName.Append(m_lstStrWasherFstTitles02);
	alststrValue.Append(m_lstStrWasherFstChoosed01);alststrValue.Append(m_lstStrWasherFstChoosed02);
	//
	for (int m=0; m<=13; m++)
	{
		for (int n=1; n<=alststrName.Size(); n++)
		{
			//
			if (m_pFstKnowledgeWasherDlg->m_lstStrPropertyName02[m] == alststrName[n])
			{

				m_pFstKnowledgeWasherDlg->_ChooseWashersML->SetColumnItem(m,alststrValue[n]);
				//
				break;
			}
		}

	}
	//
	if (m_pFstKnowledgeWasherDlg->_PosENDRB->GetState() == CATDlgCheck)
	{
		m_lstStrWasherPos.Append("END");
		//
		m_pFstKnowledgeWasherDlg->_ChooseWashersML->SetColumnItem(0,"END",m_lstStrWasherPos.Size()-1,CATDlgDataModify);
		//
		//垫圈位置信息
		m_dWasherFstThickValueEnd += m_dSearchedWasherThick;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}
	}
	else
	{
		m_lstStrWasherPos.Append("START");
		//
		m_pFstKnowledgeWasherDlg->_ChooseWashersML->SetColumnItem(0,"START",m_lstStrWasherPos.Size()-1,CATDlgDataModify);
		//
		m_dWasherFstThickValueStart += m_dSearchedWasherThick;
		//
		/*
		CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
		m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
		strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
		m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		*/
		if (m_dJstThickMax == m_dJstThickMin)
		{
			CATUnicodeString strTemp;strTemp.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTemp+"mm");
			strTemp.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTemp+"mm");
		} 
		else
		{
			CATUnicodeString strTemp01;strTemp01.BuildFromNum(m_dMainFstLength-m_dJstThickMax-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTemp02;strTemp02.BuildFromNum(m_dMainFstLength-m_dJstThickMin-m_dWasherFstThickValueStart-m_dWasherFstThickValueEnd-m_dNutFstThickValue);
			CATUnicodeString strTempEnd01 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_EndLeftEditor->SetText(strTempEnd01);
			strTemp01.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMax-m_dWasherFstThickValueStart);
			strTemp02.BuildFromNum(m_dMainFstThickLimit-m_dJstThickMin-m_dWasherFstThickValueStart);
			CATUnicodeString strTempEnd02 = strTemp01 + "~" + strTemp02 + "mm";
			m_pFstKnowledgeWasherDlg->_ThickLeftEditor->SetText(strTempEnd02);
		}

	}
	//
	m_lstStrWasherFstTypeFlag.Append(m_strWasherFstTypeFlag);
	//
	return TRUE;
}

//---------------------------------
//对KnowledgeBased Shelter DLG的消息响应
//---------------------------------
void PrtFstDesignCmd::CloseFstKnowledgeBasedShelterDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeShelterDlg->RequestDelayedDestruction();
	m_pFstKnowledgeShelterDlg=NULL;
	//
	//设置前对话框显示
	m_pFstKnowledgeWasherDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedShelterDlgLastStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeShelterDlg->RequestDelayedDestruction();
	m_pFstKnowledgeShelterDlg=NULL;
	//
	//设置前对话框显示
	m_pFstKnowledgeWasherDlg->SetVisibility(CATDlgShow);

}
void PrtFstDesignCmd::FstKnowledgeBasedShelterDlgGoToSearchPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	m_strSendKnowMainFst = "";
	m_strSendKnowNutFst = "";
	m_lststrSendKnowWasherFst.RemoveAll();
	//初始化状态
	//
	m_pFstKnowledgeShelterDlg->_SearchResultML->ClearLine();
	//
	//-----------------------------------------------------------------------------------------------
	//第一步获取所选标准号信息
	//-----------------------------------------------------------------------------------------------
	CATListValCATUnicodeString alsStrSearchItemsValue;
	m_pFstKnowledgeShelterDlg->GetAllWBSItemInfo(alsStrSearchItemsValue);

	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult;
	//调用查询接口
	HRESULT hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult[2];
		CATUnicodeString strCutNumb=strListOfSearchResult[3];
		double dCount=0,dCutNumb=1;
		strCount.ConvertToNum(&dCount);
		strCutNumb.ConvertToNum(&dCutNumb);
		//
		m_lstStrShelterFstTitles01.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrShelterFstTitles01);

		//清除已有的指针信息
		for (int k=1;k<=m_plstShelterFstResults01.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults01[k];
			delete TempLstStr;
		}
		m_plstShelterFstResults01.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult.Size()-5)/dCutNumb);
		//
		if (cyclecount==dCount && dCount!=0)
		{
			//
			for (int i=1; i<=dCutNumb; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult[(j-1)*dCutNumb+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstShelterFstResults01.Append(LstStrAtrrValue01);
			}			
		}

		//			
	}

	//----------------------------------------------------------------------------------------------------
	//获得该行的信息
	//----------------------------------------------------------------------------------------------------
	if (m_plstShelterFstResults01.Size()==0)
	{
		return;
	}
	//
	double dIndex=1;
	CATLISTV(CATUnicodeString) * LstStrFirst = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults01[1];
	int selectComboItem = m_pFstKnowledgeShelterDlg->_Combo05->GetSelect();
	CATUnicodeString strComboValue("");
	m_pFstKnowledgeShelterDlg->_Combo05->GetLine(strComboValue,selectComboItem);
	for (int i=1; i<=(*LstStrFirst).Size(); i++)
	{
		if ((*LstStrFirst)[i]==strComboValue)
		{
			dIndex = i;
			break;
		}
	}
	GetChoosedMLValue(dIndex,m_plstShelterFstResults01,m_lstStrShelterFstChoosed01);
	//
	CATUnicodeString strType01(""),strType02("");
	//
	selectComboItem = m_pFstKnowledgeShelterDlg->_Combo01->GetSelect();
	if (selectComboItem != 0)
	{
		m_pFstKnowledgeShelterDlg->_Combo01->GetLine(strType01,selectComboItem);
	}
	//
	for (int i=1; i<= m_lstStrShelterFstTitles01.Size(); i++)
	{
		//
		if (m_lstStrShelterFstTitles01[i]=="紧固件名称")
		{
			strType02=m_lstStrShelterFstChoosed01[i];
		}
	}
	//
	m_strShelterFstTypeFlag = strType01+"|"+strType02;

	//----------------------------------------------------------------------------------------------------
	// 第二步获得所搜索规格号信息
	//----------------------------------------------------------------------------------------------------
	alsStrSearchItemsValue.RemoveAll();
	//获取所选查询库信息
	CATUnicodeString strDatabase("");
	strDatabase = CATUnicodeString("DatabaseName=") + m_pFstKnowledgeShelterDlg->m_StrNextStepDataBaseName; 
	alsStrSearchItemsValue.Append(strDatabase);
	//
	CATUnicodeString str01 = m_pFstKnowledgeShelterDlg->m_strNextStepWBSItem[1] + "==" + m_lstStrShelterFstChoosed01[1];
	alsStrSearchItemsValue.Append(str01);

	CATUnicodeString str02 = m_pFstKnowledgeShelterDlg->m_strNextStepWBSItem[2] + "=" + m_strdFstDiameterValue;
	alsStrSearchItemsValue.Append(str02);
	// 测试代码，用于显示输出
	/*for (int i = 1; i <= alsStrSearchItemsValue.Size(); i++)
	{
		cout<<"第"<<i<<"行数据："<<alsStrSearchItemsValue[i].ConvertToChar()<<endl;
	}*/
	//存储搜索得到的Value 
	CATListValCATUnicodeString strListOfSearchResult02;
	//调用查询接口
	hr = MBDWebservice::QueryDataWebService(alsStrSearchItemsValue,strListOfSearchResult02);

	//过滤需要的信息
	if (SUCCEEDED(hr))
	{
		//获得数据条目，及每条目数据个数，分别对应第二、第三，数据内容从第六条开始
		CATUnicodeString strCount=strListOfSearchResult02[2];
		CATUnicodeString strCutNumb=strListOfSearchResult02[3];
		double dCount02=0,dCutNumb02=1;
		strCount.ConvertToNum(&dCount02);
		strCutNumb.ConvertToNum(&dCutNumb02);
		//
		m_lstStrShelterFstTitles02.RemoveAll();
		CATUnicodeString strValue05=strListOfSearchResult02[5];
		CHandleString::StringToVector(strValue05,"|",m_lstStrShelterFstTitles02);

		//清除已有的指针信息
		for (int k=1;k<=m_plstShelterFstResults02.Size();k++)
		{
			CATLISTV(CATUnicodeString) * TempLstStr = (CATLISTV(CATUnicodeString) *)m_plstShelterFstResults02[k];
			delete TempLstStr;
		}
		m_plstShelterFstResults02.RemoveAll();

		//计算以倍数的循环次数
		int cyclecount = (int)((strListOfSearchResult02.Size()-5)/dCutNumb02);
		//
		if (cyclecount==dCount02 && dCount02!=0)
		{
			//
			for (int i=1; i<=dCutNumb02; i++)
			{
				//首选创建实例化的数组列
				CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
				//m_pListStrMaterialDetailInfo.Append(LstStrAtrrValue01);
				//
				for (int j=1; j<=cyclecount; j++)
				{
					//
					CATUnicodeString strConvert = strListOfSearchResult02[(j-1)*dCutNumb02+i+5];
					//
					if (strConvert == "########")
					{
						strConvert = NULL;
						(*LstStrAtrrValue01).Append(strConvert);
					}
					else
						(*LstStrAtrrValue01).Append(strConvert);
				}

				//
				m_plstShelterFstResults02.Append(LstStrAtrrValue01);

				//
				for (int m=0; m<=15; m++)
				{
					//
					if (m_pFstKnowledgeShelterDlg->m_lstStrPropertyName[m] == m_lstStrShelterFstTitles02[i])
					{
						for (int k=1; k<=(*LstStrAtrrValue01).Size(); k++)
						{
							m_pFstKnowledgeShelterDlg->_SearchResultML->SetColumnItem(m,(*LstStrAtrrValue01)[k]);
						}

						//
						break;
					}				
				}
			}

			//-----------------------------------------------------------------------------
			for (int m=0; m<=15; m++)
			{
				//
				for (int n=1; n<= m_lstStrShelterFstTitles01.Size(); n++)
				{
					//
					if (m_pFstKnowledgeShelterDlg->m_lstStrPropertyName[m] == m_lstStrShelterFstTitles01[n] && m_pFstKnowledgeShelterDlg->m_lstStrPropertyName[m] != "紧固件标准号")
					{
						for (int k=1; k<=cyclecount; k++)
						{
							m_pFstKnowledgeShelterDlg->_SearchResultML->SetColumnItem(m,m_lstStrShelterFstChoosed01[n]);
						}
						//
						break;
					}
				}
				
			}
			//-----------------------------------------------------------------------------
		}

		//			
	}

}
void PrtFstDesignCmd::FstKnowledgeBasedShelterDlgNextStepPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//清空
	m_pFstAccessDlg->_ChoosedFastenersML->ClearLine();

	//显示主紧固件
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strMainFstTypeFlag,0);
	CATUnicodeString strSpecValue01;
	for (int i=1; i<=m_lstStrMainFstTitles02.Size(); i++)
	{
		if (m_lstStrMainFstTitles02[i]=="紧固件标识")
		{
			strSpecValue01=m_lstStrMainFstChoosed02[i];
			break;
		}
	}
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue01,0);
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"",0);


	//显示螺母
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strNutFstTypeFlag,1);
	CATUnicodeString strSpecValue02;
	for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
	{
		if (m_lstStrNutFstTitles02[i]=="紧固件标识")
		{
			strSpecValue02=m_lstStrNutFstChoosed02[i];
			break;
		}
	}
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue02,1);
	m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,"END",1,CATDlgDataModify);


	//显示垫圈
	CATUnicodeString strSpecValue03;
	CATListValCATUnicodeString alstStrSpecValue03;
	for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
	{
		//
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_lstStrWasherFstTypeFlag[j],j+1);
		CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
		CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
		for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
		{
			if ((*TempLstStrTitle)[i]=="紧固件标识")
			{
				strSpecValue03=(*TempLstStrValue)[i];
				alstStrSpecValue03.Append(strSpecValue03);
				break;
			}
		}
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue03,j+1);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_lstStrWasherPos[j],j+1,CATDlgDataModify);
	}

	//如果存在保护罩，显示
	CATUnicodeString strSpecValue04;
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{	
		//
		for (int i=1; i<=m_lstShelterFstChoosedTitles02.Size(); i++)
		{
			if (m_lstShelterFstChoosedTitles02[i]=="紧固件标识")
			{
				strSpecValue04=m_lstShelterFstChoosedResults02[i];
				break;
			}
		}
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(0,m_strChoosedShelterFstTypeFlag);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(1,strSpecValue04);
		m_pFstAccessDlg->_ChoosedFastenersML->SetColumnItem(2,m_strShelterPos);
	}	

	//
	//初始化数据
	ClearFstInfoLst();
	//
	m_alistStrFSTType.Append(m_strMainFstTypeFlag);
	m_alistStrFSTName.Append(strSpecValue01);
	//
	if (m_lstStrWasherFstTypeFlag.Size()!=0)
	{
		m_alistStrFSTType.Append(m_lstStrWasherFstTypeFlag);
		m_alistStrFSTName.Append(alstStrSpecValue03);
	}
	//
	m_alistStrFSTType.Append(m_strNutFstTypeFlag);
	m_alistStrFSTName.Append(strSpecValue02);
	//
	m_lststrCirclePositions.Append(m_lstStrWasherPos);
	m_lststrCirclePositions.Append("END");
	//
	//如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		m_alistStrFSTType.Append(m_strChoosedShelterFstTypeFlag);
		m_alistStrFSTName.Append(strSpecValue04);
		m_lststrCirclePositions.Append(m_strShelterPos);
	}
	//
	CATLISTV(CATUnicodeString) *LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstTitles01;
	m_pListStrPropertyName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstChoosed01;
	m_pListStrPropertyValue.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstTitles02;
	m_pListStrSpecialName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrMainFstChoosed02;
	m_pListStrSpecialValue.Append(LstStrAtrrValue);
	//
	for (int j=1; j<=m_lstStrWasherFstTypeFlag.Size(); j++)
	{
		//
		CATLISTV(CATUnicodeString) * TempLstStrTitle = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[j];
		CATLISTV(CATUnicodeString) * TempLstStrValue = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[j];
		CATUnicodeString strTemp01, strTemp02;
		for (int i=1; i<=(*TempLstStrTitle).Size(); i++)
		{
			if ((*TempLstStrTitle)[i]=="厚度")
			{
				strTemp01=(*TempLstStrValue)[i];
				double dvalue=0;
				strTemp01.ConvertToNum(&dvalue,"%lf");
				m_lstCircleThicks.Append(dvalue);
			}

			if (/*(*TempLstStrTitle)[i]=="内径" ||*/ (*TempLstStrTitle)[i]=="公称直径")
			{
				strTemp02=(*TempLstStrValue)[i];
				double dvalue=0;
				strTemp02.ConvertToNum(&dvalue,"%lf");
				m_lstCircleRadiusValues.Append(dvalue);
			}
		}
	}
	//
	CATUnicodeString strTemp01, strTemp02;
	for (int i=1; i<=m_lstStrNutFstTitles02.Size(); i++)
	{
		if (m_lstStrNutFstTitles02[i]=="厚度" || m_lstStrNutFstTitles02[i]=="总厚度")
		{
			strTemp01=m_lstStrNutFstChoosed02[i];
			double dvalue=0;
			strTemp01.ConvertToNum(&dvalue,"%lf");
			m_lstCircleThicks.Append(dvalue);
		}

		if (/*m_lstStrNutFstTitles02[i]=="直径" ||*/ m_lstStrNutFstTitles02[i]=="公称直径")
		{
			strTemp02=m_lstStrNutFstChoosed02[i];
			double dvalue=0;
			strTemp02.ConvertToNum(&dvalue,"%lf");
			m_lstCircleRadiusValues.Append(dvalue);
		}
	}

	//如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		m_lstCircleThicks.Append(0);
		//
		CATUnicodeString strTemp03;
		for (int i=1; i<=m_lstShelterFstChoosedTitles02.Size(); i++)
		{
			if (/*m_lstShelterFstChoosedTitles02[i]=="直径" ||*/ m_lstShelterFstChoosedTitles02[i]=="公称直径")
			{
				strTemp03=m_lstShelterFstChoosedResults02[i];
				double dvalue=0;
				strTemp03.ConvertToNum(&dvalue,"%lf");
				m_lstCircleRadiusValues.Append(dvalue);
				break;
			}
		}
	}
	//

	//
	for (int i=1; i<=m_plstWasherFstChoosedTitles01.Size(); i++)
	{
		CATLISTV(CATUnicodeString) *LstStrAtrrValue01 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue02 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue03 = new CATLISTV(CATUnicodeString)();
		CATLISTV(CATUnicodeString) *LstStrAtrrValue04 = new CATLISTV(CATUnicodeString)();
		//
		CATLISTV(CATUnicodeString) * TempLstStrTitle01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles01[i];
		CATLISTV(CATUnicodeString) * TempLstStrValue01 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults01[i];
		CATLISTV(CATUnicodeString) * TempLstStrTitle02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedTitles02[i];
		CATLISTV(CATUnicodeString) * TempLstStrValue02 = (CATLISTV(CATUnicodeString) *)m_plstWasherFstChoosedResults02[i];
		//
		*LstStrAtrrValue01 = *TempLstStrTitle01;
		*LstStrAtrrValue02 = *TempLstStrValue01;
		*LstStrAtrrValue03 = *TempLstStrTitle02;
		*LstStrAtrrValue04 = *TempLstStrValue02;
		//
		m_pListStrPropertyName.Append(LstStrAtrrValue01);
		m_pListStrPropertyValue.Append(LstStrAtrrValue02);
		m_pListStrSpecialName.Append(LstStrAtrrValue03);
		m_pListStrSpecialValue.Append(LstStrAtrrValue04);
	}
	//
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstTitles01;
	m_pListStrPropertyName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstChoosed01;
	m_pListStrPropertyValue.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstTitles02;
	m_pListStrSpecialName.Append(LstStrAtrrValue);
	LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
	*LstStrAtrrValue = m_lstStrNutFstChoosed02;
	m_pListStrSpecialValue.Append(LstStrAtrrValue);
	////如果存在保护罩
	if (m_lstShelterFstChoosedTitles02.Size()!=0)
	{
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedTitles01;
		m_pListStrPropertyName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedResults01;
		m_pListStrPropertyValue.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedTitles02;
		m_pListStrSpecialName.Append(LstStrAtrrValue);
		LstStrAtrrValue = new CATLISTV(CATUnicodeString)();
		*LstStrAtrrValue = m_lstShelterFstChoosedResults02;
		m_pListStrSpecialValue.Append(LstStrAtrrValue);
	}

	//
	//垫圈位置信息
	m_lstStrWasherPos.RemoveAll();
	m_lstStrWasherFstTypeFlag.RemoveAll();
	//设置前对话框显示
	m_pFstAccessDlg->SetVisibility(CATDlgShow);
	m_pFstAccessDlg->SetOKSensitivity(CATDlgEnable);

	//--------------------------------------------
	//关闭所有过程对话框
	//--------------------------------------------
	if (m_pFstKnowledgeBasedDlg != NULL)
	{
		m_pFstKnowledgeBasedDlg->RequestDelayedDestruction();
		m_pFstKnowledgeBasedDlg=NULL;
	}

	if (m_pFstKnowledgeMainBoltDlg != NULL)
	{
		m_pFstKnowledgeMainBoltDlg->RequestDelayedDestruction();
		m_pFstKnowledgeMainBoltDlg=NULL;
	}

	if (m_pFstKnowledgeNutDlg != NULL)
	{
		m_pFstKnowledgeNutDlg->RequestDelayedDestruction();
		m_pFstKnowledgeNutDlg=NULL;
	}

	if (m_pFstKnowledgeWasherDlg != NULL)
	{
		m_pFstKnowledgeWasherDlg->RequestDelayedDestruction();
		m_pFstKnowledgeWasherDlg=NULL;
	}

	if (m_pFstKnowledgeShelterDlg != NULL)
	{
		m_pFstKnowledgeShelterDlg->RequestDelayedDestruction();
		m_pFstKnowledgeShelterDlg=NULL;
	}

}
void PrtFstDesignCmd::FstKnowledgeBasedShelterDlgSearchResultsMLCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	//获取所选信息
	int  iSize = m_pFstKnowledgeShelterDlg->_SearchResultML->GetSelectCount();
	if (iSize != 0)
	{
		//得到当前所选行的具体信息：行号
		int * ioTabRow = new int[iSize];
		m_pFstKnowledgeShelterDlg->_SearchResultML->GetSelect(ioTabRow,iSize);

		//获得该行的信息
		GetChoosedMLValue(ioTabRow[0]+1,m_plstShelterFstResults02,m_lstStrShelterFstChoosed02);

		//显示ContextualMenu菜单
		m_pKnowShelterContextMenu = new CATDlgContextualMenu (m_pFstKnowledgeShelterDlg->_SearchResultML, "Context",CATDlgCtxEmpty);
		m_pKnowShelterPushItemSelect = new CATDlgPushItem(m_pKnowShelterContextMenu,"选择");

		//
		AddAnalyseNotificationCB(m_pKnowShelterPushItemSelect,
			m_pKnowShelterPushItemSelect->GetMenuIActivateNotification(),
			(CATCommandMethod)&PrtFstDesignCmd::OnKnowledgeBasedShelterPushItemSelectCB,
			NULL);
	}

}
void PrtFstDesignCmd::FstKnowledgeBasedShelterDlgClearAllPBCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_pFstKnowledgeShelterDlg->_ChooseSheltersML->ClearLine();

	//清除列表中的内容
	m_lstShelterFstChoosedTitles01.RemoveAll();  //保护罩标准号信息
	m_lstShelterFstChoosedResults01.RemoveAll(); //保护罩标准号信息
	m_lstShelterFstChoosedTitles02.RemoveAll();  //保护罩规格号信息
	m_lstShelterFstChoosedResults02.RemoveAll();
}
CATBoolean PrtFstDesignCmd::OnKnowledgeBasedShelterPushItemSelectCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//
	m_lstShelterFstChoosedTitles01.RemoveAll();  
	m_lstShelterFstChoosedResults01.RemoveAll(); 
	m_lstShelterFstChoosedTitles02.RemoveAll(); 
	m_lstShelterFstChoosedResults02.RemoveAll(); 
	//
	m_pFstKnowledgeShelterDlg->_ChooseSheltersML->ClearLine();
	//
	CATListValCATUnicodeString alststrName,alststrValue;
	alststrName.Append(m_lstStrShelterFstTitles01);alststrName.Append(m_lstStrShelterFstTitles02);
	alststrValue.Append(m_lstStrShelterFstChoosed01);alststrValue.Append(m_lstStrShelterFstChoosed02);
	//
	for (int m=0; m<=15; m++)
	{
		for (int n=1; n<=alststrName.Size(); n++)
		{
			//
			if (m_pFstKnowledgeShelterDlg->m_lstStrPropertyName02[m] == alststrName[n])
			{

				m_pFstKnowledgeShelterDlg->_ChooseSheltersML->SetColumnItem(m,alststrValue[n]);
				//
				break;
			}
		}

	}
	//
	m_lstShelterFstChoosedTitles01.Append(m_lstStrShelterFstTitles01);  //保护罩标准号信息
	m_lstShelterFstChoosedResults01.Append(m_lstStrShelterFstChoosed01); //保护罩标准号信息
	m_lstShelterFstChoosedTitles02.Append(m_lstStrShelterFstTitles02);  //保护罩规格号信息
	m_lstShelterFstChoosedResults02.Append(m_lstStrShelterFstChoosed02); //保护罩规格号信息
	//
	m_strShelterPos="END";
	m_strChoosedShelterFstTypeFlag=m_strShelterFstTypeFlag;
	//
	return TRUE;
}