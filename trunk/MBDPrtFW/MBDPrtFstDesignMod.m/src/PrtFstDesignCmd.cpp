// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// PrtFstDesignCmd.cpp
// The state chart based command: PrtFstDesignCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2011  Creation: Code generated by the CAA wizard  xyuser
//===================================================================
#include "PrtFstDesignCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"
#include "CATFace.h"
#include "CATSurface.h"

#include "CATCreateExternalObject.h"
CATCreateClass( PrtFstDesignCmd);

//
#include "CATIMfZeroDimResult.h"
#include "CATIMfBiDimResult.h"
#include "CATISO.h"
#include "CAT3DAnnotationTextGP.h"
#include "CATIMeasurablePoint.h"
#include "CATModelForRep3D.h"
#include "CAT3DCustomRep.h"
#include "CATGraphicAttributeSet.h"
#include "CATIStructureAnalyse.h"
#include "CATIMmiMechanicalImportApplicative.h"
#include "CATIGSMIntersect.h"
#include "CATIGSMLineNormal.h"
#include "CAT3DMarkerGP.h"
#include "CAT3DFixedArrowGP.h"
#include "CATIMfBRep.h"
#include "CAT4x4Matrix.h"


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
PrtFstDesignCmd::PrtFstDesignCmd() :
  CATStateCommand ("PrtFstDesignCmd", CATDlgEngOneShot, CATCommandModeShared) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,m_piDlg(NULL),m_piDoc(NULL),m_piFirstSurfSLAgt(NULL),m_piSecSurfSLAgt(NULL),m_piPointSLAgt(NULL)
  ,m_piFirstSurfAgt(NULL),m_piSecSurfAgt(NULL),m_piPointsAgt(NULL),m_piPrdSLAgt(NULL),m_piPointGSMPBAgt(NULL),m_piPrdAgt(NULL)
  ,m_piPointGSMAgt(NULL),m_pi3DBagRep(NULL),m_piManipulator(NULL),m_piISO(NULL)
{
	//初始化获得当前文档及名称
	m_piDoc = PrtService::GetPrtDocument();
	PrtService::GetPrdNumberFormDoc(m_piDoc,m_strDocName);

	m_piEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != m_piEditor)
	{
		m_piHSO = m_piEditor->GetHSO();
		m_piHSO->Empty();

		m_piISO = m_piEditor->GetISO();
		m_piISO->Empty();
	}

	//判断是否为ZP模型;
	if (!IsThisZPPrt(m_strDocName))
	{
		PrtService::ShowDlgNotify("提示","该功能仅在装配上下文环境且ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}

	if (!PrdService::IsContextualPrd())
	{
		PrtService::ShowDlgNotify("提示","该功能仅在装配上下文环境且ZP模型中操作，点击关闭！");
		RequestDelayedDestruction();
	}
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
PrtFstDesignCmd::~PrtFstDesignCmd()
{
	if (m_piDlg != NULL)
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}

	if (NULL!=m_piPointsAgt)
	{
		m_piPointsAgt->RequestDelayedDestruction();
		m_piPointsAgt=NULL;
	}

	if (NULL!=m_piFirstSurfAgt)
	{
		m_piFirstSurfAgt->RequestDelayedDestruction();
		m_piFirstSurfAgt=NULL;
	}

	if (NULL!=m_piSecSurfAgt)
	{
		m_piSecSurfAgt->RequestDelayedDestruction();
		m_piSecSurfAgt=NULL;
	}

	if (NULL!=m_piFirstSurfSLAgt)
	{
		m_piFirstSurfSLAgt->RequestDelayedDestruction();
		m_piFirstSurfSLAgt=NULL;
	}
	if (NULL!=m_piSecSurfSLAgt)
	{
		m_piSecSurfSLAgt->RequestDelayedDestruction();
		m_piSecSurfSLAgt=NULL;
	}
	if (NULL!=m_piPointSLAgt)
	{
		m_piPointSLAgt->RequestDelayedDestruction();
		m_piPointSLAgt=NULL;
	}	

	if (NULL!=m_piPrdSLAgt)
	{
		m_piPrdSLAgt->RequestDelayedDestruction();
		m_piPrdSLAgt=NULL;
	}	

	if (NULL!=m_piPointGSMPBAgt)
	{
		m_piPointGSMPBAgt->RequestDelayedDestruction();
		m_piPointGSMPBAgt=NULL;
	}	

	if (NULL!=m_piPointGSMAgt)
	{
		m_piPointGSMAgt->RequestDelayedDestruction();
		m_piPointGSMAgt=NULL;
	}	

	if (NULL!=m_piPrdAgt)
	{
		m_piPrdAgt->RequestDelayedDestruction();
		m_piPrdAgt=NULL;
	}

	if (m_pi3DBagRep != NULL)
	{
		m_pi3DBagRep->Release();
		m_pi3DBagRep=NULL;
	}

	if (m_piManipulator != NULL)
	{
		m_piManipulator->Release();
		m_piManipulator=NULL;
	}

	//高亮点清空
	m_piHSO->Empty();
	m_piISO->Empty();
   
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void PrtFstDesignCmd::BuildGraph()
{
	m_piDlg = new PrtFstDesignDlg();
	m_piDlg->Build();
	m_piDlg->SetVisibility(CATDlgShow); 


	// 主对话框的消息响应
	AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetDiaOKNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::OkDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetWindCloseNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseDlgCB,
		NULL);

	AddAnalyseNotificationCB (m_piDlg, 
		m_piDlg->GetDiaCANCELNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::CloseDlgCB,
		NULL);

	//删除所有点
	AddAnalyseNotificationCB (m_piDlg->_DeletePointPB, 
		m_piDlg->_DeletePointPB->GetPushBActivateNotification(),
		(CATCommandMethod)&PrtFstDesignCmd::DeleteAllPointsCB,
		NULL);


	//创建安装点代理
	m_piPointsAgt = new CATFeatureImportAgent("选择安装点");
	m_piPointsAgt->SetBehavior( CATDlgEngWithPSOHSO | CATDlgEngWithPrevaluation | CATDlgEngMultiAcquisitionUserCtrl | CATDlgEngRepeat);
	m_piPointsAgt->SetAgentBehavior(MfRelimitedFeaturization|MfPermanentBody); 
	m_piPointsAgt->AddElementType(IID_CATIMfZeroDimResult);

	//创建第一安装面代理
	m_piFirstSurfAgt = new CATFeatureImportAgent("选择第一安装面");
	m_piFirstSurfAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat );
	m_piFirstSurfAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piFirstSurfAgt -> AddElementType (IID_CATIMfBiDimResult);
	m_piFirstSurfAgt -> AddElementType (IID_CATSurface);

	//创建第二安装面代理
	m_piSecSurfAgt = new CATFeatureImportAgent("选择第二安装面");
	m_piSecSurfAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat  );
	m_piSecSurfAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piSecSurfAgt -> AddElementType (IID_CATIMfBiDimResult);
	m_piSecSurfAgt -> AddElementType (IID_CATSurface);

	//创建prd代理
	m_piPrdAgt = new CATPathElementAgent("选择连接零件");
	m_piPrdAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSOHSO | CATDlgEngRepeat  );
	m_piPrdAgt -> AddElementType (IID_CATIProduct);
	CATAcquisitionFilter * pFilterForPrt = Filter((FilterMethod) & PrtFstDesignCmd::SeletedIsPart,(void*)NULL);
	m_piPrdAgt->SetFilter(pFilterForPrt);

	//创建GSM代理
	m_piPointGSMAgt = new CATFeatureImportAgent("选择点几何图形集");
	m_piPointGSMAgt -> SetBehavior( CATDlgEngWithPrevaluation | CATDlgEngWithPSO | CATDlgEngRepeat  );
	m_piPointGSMAgt -> SetAgentBehavior( MfPermanentBody | MfLastFeatureSupport | MfRelimitedFeaturization);
	m_piPointGSMAgt -> AddElementType (IID_CATIGSMTool);

	//points SL
	m_piPointSLAgt = new CATDialogAgent("选择安装点");
	m_piPointSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piPointSLAgt->AcceptOnNotify(m_piDlg->_PointsSL,m_piDlg->_PointsSL->GetListSelectNotification());

	//first Surf SL
	m_piFirstSurfSLAgt = new CATDialogAgent("选择第一安装面");
	m_piFirstSurfSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piFirstSurfSLAgt->AcceptOnNotify(m_piDlg->_FirstSurfSL,m_piDlg->_FirstSurfSL->GetListSelectNotification());

	//second Surf SL
	m_piSecSurfSLAgt = new CATDialogAgent("选择第二安装面");
	m_piSecSurfSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piSecSurfSLAgt->AcceptOnNotify(m_piDlg->_SecondSurfSL,m_piDlg->_SecondSurfSL->GetListSelectNotification());

	//Prd SL
	m_piPrdSLAgt = new CATDialogAgent("选择连接零件");
	m_piPrdSLAgt->SetBehavior(CATDlgEngRepeat);
	m_piPrdSLAgt->AcceptOnNotify(m_piDlg->_PrdSL,m_piDlg->_PrdSL->GetListSelectNotification());

	//Choose Point GSM PB
	m_piPointGSMPBAgt = new CATDialogAgent("选择点几何图形集");
	m_piPointGSMPBAgt->SetBehavior(CATDlgEngRepeat);
	m_piPointGSMPBAgt->AcceptOnNotify(m_piDlg->_ChoosePointGSMToolPB,m_piDlg->_ChoosePointGSMToolPB->GetPushBActivateNotification());


	//Define the StateChart
	CATDialogState * StSelectPrds = GetInitialState("选择连接零件");
	StSelectPrds -> AddDialogAgent (m_piPrdAgt);
	StSelectPrds -> AddDialogAgent (m_piPointSLAgt);
	StSelectPrds -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPrds -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPrds -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectPoints = AddDialogState("选择安装点");
	StSelectPoints -> AddDialogAgent (m_piPointsAgt);
	StSelectPoints -> AddDialogAgent (m_piPointSLAgt);
	StSelectPoints -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPoints -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPoints -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPoints -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectPointGSM = AddDialogState("选择点几何图形集");
	StSelectPointGSM -> AddDialogAgent (m_piPointGSMAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPointSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPrdSLAgt);
	StSelectPointGSM -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectFirstSurf = AddDialogState("选择第一安装面");
	StSelectFirstSurf -> AddDialogAgent (m_piFirstSurfAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPointSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPrdSLAgt);
	StSelectFirstSurf -> AddDialogAgent (m_piPointGSMPBAgt);

	CATDialogState * StSelectSecSurf = AddDialogState("选择第二安装面");
	StSelectSecSurf -> AddDialogAgent (m_piSecSurfAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPointSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piFirstSurfSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piSecSurfSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPrdSLAgt);
	StSelectSecSurf -> AddDialogAgent (m_piPointGSMPBAgt);

	//转换关系 点到点
	AddTransition(StSelectPoints, StSelectPoints, 
		IsLastModifiedAgentCondition(m_piPointsAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePoints));

	//转换关系 点到点
	AddTransition(StSelectPoints, StSelectPoints, 
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 点到面1
	AddTransition(StSelectPoints, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	//转换关系 点到面2
	AddTransition(StSelectPoints, StSelectSecSurf, 
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面1到点
	AddTransition(StSelectFirstSurf,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 面2到点
	AddTransition(StSelectSecSurf,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));

	//转换关系 面1到面1
	AddTransition(StSelectFirstSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChooseFirstSurfs));

	//转换关系 面1到面1
	AddTransition(StSelectFirstSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	//转换关系 面2到面2
	AddTransition(StSelectSecSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChooseSecSurfs));

	//转换关系 面2到面2
	AddTransition(StSelectSecSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面1到面2
	AddTransition(StSelectFirstSurf,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));

	//转换关系 面2到面1
	AddTransition(StSelectSecSurf,StSelectFirstSurf,
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 Prd Prd
	AddTransition(StSelectPrds,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePrds));
	//转换关系 Prd Prd
	AddTransition(StSelectPrds,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 GSM GSM
	AddTransition(StSelectPointGSM,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ChoosePointGSM));

	//转换关系 GSM GSM
	AddTransition(StSelectPointGSM,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 Prd GSM
	AddTransition(StSelectPrds,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 GSM Prd
	AddTransition(StSelectPointGSM,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 Prd 点
	AddTransition(StSelectPrds,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));
	//转换关系 点 Prd 
	AddTransition(StSelectPoints,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 Prd 面1
	AddTransition(StSelectPrds, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));
	//转换关系 面1 Prd 
	AddTransition(StSelectFirstSurf,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	//转换关系 Prd 面2
	AddTransition(StSelectPrds,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));
	//转换关系 面2 Prd 
	AddTransition(StSelectSecSurf,StSelectPrds,
		IsLastModifiedAgentCondition(m_piPrdSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePrdSL));

	// [11/18/2011 zhangwenyang]
	//转换关系 GSM 点
	AddTransition(StSelectPointGSM,StSelectPoints,
		IsLastModifiedAgentCondition(m_piPointSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointsSL));
	//转换关系 点 GSM 
	AddTransition(StSelectPoints,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));
	
	//转换关系 GSM 面1
	AddTransition(StSelectPointGSM, StSelectFirstSurf, 
		IsLastModifiedAgentCondition(m_piFirstSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveFirstSurfSL));
	//转换关系 面1 GSM 
	AddTransition(StSelectFirstSurf,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	//转换关系 GSM 面2
	AddTransition(StSelectPointGSM,StSelectSecSurf,
		IsLastModifiedAgentCondition(m_piSecSurfSLAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActiveSecSurfSL));
	//转换关系 面2 GSM 
	AddTransition(StSelectSecSurf,StSelectPointGSM,
		IsLastModifiedAgentCondition(m_piPointGSMPBAgt),
		Action ((ActionMethod) &PrtFstDesignCmd::ActivePointGSMPB));

	// [11/23/2011 zhangwenyang]
	/*AddAnalyseNotificationCB(m_piManipulator,CATManipulator::GetCATManipulate(),
		(CATCommandMethod)&PrtFstDesignCmd::CBManipulator,(void*)NULL);*/

}

void PrtFstDesignCmd::OkDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	if (NULL != m_piDlg)
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}	


	//隐藏第一安装面
	for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecFirstSurfs[i],"Hide");
	}

	//隐藏第二安装面
	for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecSecSurfs[i],"Hide");
	}

	RequestDelayedDestruction();

}
void PrtFstDesignCmd::CloseDlgCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	if (NULL != m_piDlg)
	{
		m_piDlg->RequestDelayedDestruction();
		m_piDlg = NULL;
	}	

	//隐藏第一安装面
	for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecFirstSurfs[i],"Hide");
	}

	//隐藏第二安装面
	for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i++)
	{
		PrtService::SetSpecObjShowAttr(m_lstSpecSecSurfs[i],"Hide");
	}

	RequestDelayedDestruction();
}

//判断是否为ZP模型
BOOL PrtFstDesignCmd::IsThisZPPrt(CATUnicodeString istrDocName)
{
	if (istrDocName != "")
	{
		int istart=istrDocName.SearchSubString("-ZP",0,CATUnicodeString::CATSearchModeBackward);
		if (istart == (istrDocName.GetLengthInChar()-3) || istart == (istrDocName.GetLengthInChar()-4))
		{
			return TRUE;
		}
		else return FALSE;
	}
	else return FALSE;
}

CATBoolean PrtFstDesignCmd::SeletedIsPart(CATDialogAgent * iAgent, void * iUsefulData)
{
	CATBoolean rc = FALSE ;
	if ( NULL == iAgent ) return rc ;

	CATBaseUnknown* piSelectElement =m_piPrdAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		CATIProduct_var spPrd = NULL_var;
		spPrd = piSelectElement;

		CATUnicodeString strDocType("");
		PrdService::GetInstPrdType(spPrd,strDocType);

		if (strDocType == "CATPart")
		{
			return TRUE;
		}
	}

	return rc;
}

//各种转换消息响应函数
CATBoolean PrtFstDesignCmd::ChoosePoints( void *UsefulData)
{
	//定义集群
	CATSO * pSO = NULL ;
	pSO = m_piPointsAgt->GetListOfValues();
	if ( NULL != pSO )
	{
		int lg = pSO->GetSize();
		for ( int i=0 ; i < lg ; i++)
		{
			CATPathElement * pPath = (CATPathElement*) (*pSO)[i];
			CATPathElement * pSubPath = NULL;

			CATBaseUnknown * pLeaf =NULL ;
			if ( NULL != pPath )
				pSubPath = pPath->GetSubPath("CATISpecObject");
			pLeaf = (*pSubPath)[pSubPath->GetSize()-1];

			CATISpecObject_var spLeaf = pLeaf;
			BOOL existFlag = FALSE;
			for (int j = 1; j <= m_lstSpecPoints.Size(); j++)
			{
				if (m_lstSpecPoints[j] == spLeaf)
				{
					if (m_piDlg->_SeleDeleteCheckB->GetState() == CATDlgCheck)
					{
						m_lstSpecPoints.RemoveValue(spLeaf);
						PrtService::RemoveHSO(spLeaf);
						
						//列表更新
						m_piDlg->_PointsSL->ClearLine();
						for (int i = 1; i <= m_lstSpecPoints.Size(); i ++)
						{
							CATUnicodeString strShowPath("");
							CATPathElement *piPath = NULL;
							PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPoints[i],NULL);
							PrtService::PathElementString(piPath,strShowPath,TRUE);
							m_piDlg->_PointsSL->SetLine(strShowPath);

							piPath->Release();
							piPath=NULL;
						}
						if (m_lstSpecPoints.Size()==0)
						{
							m_piDlg->_PointsSL->SetLine("请选择安装点",0,CATDlgDataModify);
						}
					}

					existFlag = TRUE;
					break;
				}
			}

			//如果为移除模式情况下，移除HSO
			if (!existFlag && (m_piDlg->_SeleDeleteCheckB->GetState() == CATDlgCheck)) //不存在放入
			{
				PrtService::RemoveHSO(spLeaf);
			}


			//如果为增加模式情况下
			if (!existFlag && (m_piDlg->_SeleDeleteCheckB->GetState() == CATDlgUncheck)) //不存在放入
			{
				//先清空列表
				if (m_lstSpecPoints.Size() == 0)
				{
					m_piDlg->_PointsSL->ClearLine();
				}
				//
				m_lstSpecPoints.Append(spLeaf);

				//
				CATUnicodeString strShowPath("");
				strShowPath = spLeaf->GetDisplayName();
				PrtService::PathElementString(pSubPath,strShowPath,TRUE);
				m_piDlg->_PointsSL->SetLine(strShowPath);
			}

		}
	}

	//显示安装点个数
	CATUnicodeString strCount("");
	strCount.BuildFromNum(m_lstSpecPoints.Size());
	strCount += " 个";
	m_piDlg->_PointCountEditor->SetText(strCount);

	//清空列表选择状态
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	m_piPointsAgt->InitializeAcquisition();
	return TRUE;

}

CATBoolean PrtFstDesignCmd::ChooseFirstSurfs( void *UsefulData)
{
	HRESULT hr = E_FAIL;
	
	CATBaseUnknown* piSelectElement =m_piFirstSurfAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATIMfBRep *piBrep = NULL;
		hr = piSelectElement->QueryInterface(IID_CATIMfBRep,(void**)&piBrep);
		//
		CATISpecObject_var spSpecOnSelection =NULL_var;
		if (SUCCEEDED(hr)&&(piBrep!=NULL))
		{
			spSpecOnSelection = piBrep->GetSupport();
			piBrep->Release();
			piBrep=NULL;
		}
		else
		{
			spSpecOnSelection = piSelectElement;
		}
		

		//根据情况判断
		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecFirstSurfs.Size(); i ++)
			{
				if (m_lstSpecFirstSurfs[i] == spSpecOnSelection)
				{
					m_lstSpecFirstSurfs.RemoveValue(spSpecOnSelection);
					PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Hide");
					PrtService::RemoveHSO(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				//判断是否在另一个曲面数组中
				if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecSecSurfs))
				{
					PrtService::ktWarningMsgBox("您不能选择与终止面相同的面，请重新选择！");
				}
				else
				{
					//判断确定所引用的曲面所在零件必须在定义上下文中
					CATIProduct_var spRefPrd;
					GetLinkImportPrd(spSpecOnSelection,spRefPrd);
					if (m_lstSpecPrds.Size() >= 2)
					{
						if (IsTheSpecInLstSpec(spRefPrd,m_lstSpecPrds))
						{
							PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Show");
							m_lstSpecFirstSurfs.Append(spSpecOnSelection);
							PrtService::HighlightHSO(spSpecOnSelection);
						}
						else
						{
							PrtService::ktErrorMsgBox("当前所选元素所在零件不在“设计上下文”列表中，请重新选择！");
						}
					}
					else //当前“设计上下文”元素小于二个
					{
						PrtService::ktWarningMsgBox("“设计上下文”零件列表必须大于等于2，请首先选择设计上下文零件！");
					}
				}
				
			}

			if (m_lstSpecFirstSurfs.Size()>=1)
			{
				CATUnicodeString strLineShow("共选择");
				CATUnicodeString strNumber;
				strNumber.BuildFromNum(m_lstSpecFirstSurfs.Size());
				strLineShow += strNumber + "个面";
				m_piDlg->_FirstSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
			}
			if (m_lstSpecFirstSurfs.Size()==0)
			{
				m_piDlg->_FirstSurfSL->SetLine("未选择",0,CATDlgDataModify);
			}
		}
	}

	//
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();
	int firstRom = 0;
	m_piDlg->_FirstSurfSL->SetSelect(&firstRom,1,0);

	m_piFirstSurfAgt->InitializeAcquisition();
	return TRUE;	
}

CATBoolean PrtFstDesignCmd::ChooseSecSurfs( void *UsefulData)
{
	HRESULT hr = E_FAIL;
	CATBaseUnknown* piSelectElement =m_piSecSurfAgt->GetElementValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATIMfBRep *piBrep = NULL;
		hr = piSelectElement->QueryInterface(IID_CATIMfBRep,(void**)&piBrep);
		//
		CATISpecObject_var spSpecOnSelection =NULL_var;
		if (SUCCEEDED(hr)&&(piBrep!=NULL))
		{
			spSpecOnSelection = piBrep->GetSupport();
			piBrep->Release();
			piBrep=NULL;
		}
		else
		{
			spSpecOnSelection = piSelectElement;
		}

		//
		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecSecSurfs.Size(); i ++)
			{
				if (m_lstSpecSecSurfs[i] == spSpecOnSelection)
				{
					m_lstSpecSecSurfs.RemoveValue(spSpecOnSelection);
					PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Hide");
					PrtService::RemoveHSO(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				//判断是否在另一个曲面数组中
				if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecFirstSurfs))
				{
					PrtService::ktWarningMsgBox("您不能选择与起始面相同的面，请重新选择！");
				}
				else
				{
					//判断是否在另一个曲面数组中
					if (IsTheSpecInLstSpec(spSpecOnSelection,m_lstSpecSecSurfs))
					{
						PrtService::ktWarningMsgBox("您不能选择与终止面相同的面，请重新选择！");
					}
					else
					{
						//判断确定所引用的曲面所在零件必须在定义上下文中
						CATIProduct_var spRefPrd;
						GetLinkImportPrd(spSpecOnSelection,spRefPrd);
						if (m_lstSpecPrds.Size() >= 2)
						{
							if (IsTheSpecInLstSpec(spRefPrd,m_lstSpecPrds))
							{
								PrtService::SetSpecObjShowAttr(spSpecOnSelection,"Show");
								m_lstSpecSecSurfs.Append(spSpecOnSelection);
								PrtService::HighlightHSO(spSpecOnSelection);

								//测试代码获取方向
								if ((m_lstSpecPoints.Size()>=1) && (m_lstSpecFirstSurfs.Size()>=1) && (m_lstSpecSecSurfs.Size()>=1))
								{
									GetInitialArrow(m_lstSpecPoints[1],m_lstSpecFirstSurfs,m_lstSpecSecSurfs);
								}
							}
							else
							{
								PrtService::ktErrorMsgBox("当前所选元素所在零件不在“设计上下文”列表中，请重新选择！");
							}
						}
						else //当前“设计上下文”元素小于二个
						{
							PrtService::ktWarningMsgBox("“设计上下文”零件列表必须大于等于2，请首先选择设计上下文零件！");
						}
					}
				}
			}
			
			if (m_lstSpecSecSurfs.Size()>=1)
			{
				CATUnicodeString strLineShow("共选择");
				CATUnicodeString strNumber;
				strNumber.BuildFromNum(m_lstSpecSecSurfs.Size());
				strLineShow += strNumber + "个面";
				m_piDlg->_SecondSurfSL->SetLine(strLineShow,0,CATDlgDataModify);
			}
			if (m_lstSpecSecSurfs.Size()==0)
			{
				m_piDlg->_SecondSurfSL->SetLine("未选择",0,CATDlgDataModify);
			}
		}
	}

	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	int firstRom = 0;
	m_piDlg->_SecondSurfSL->SetSelect(&firstRom,1,0);

	//重新初始化代理
	m_piSecSurfAgt->InitializeAcquisition();
	return TRUE;	

}

//响应
CATBoolean PrtFstDesignCmd::ChoosePrds( void *UsefulData)
{
	HRESULT hr = E_FAIL;

	CATPathElement* piSelectElement =m_piPrdAgt->GetValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATBaseUnknown * pLeaf =NULL ;
		//获得路径下第一个特征spec类型
		pLeaf = (*piSelectElement)[piSelectElement->GetSize()-1];
		CATISpecObject_var spSpecOnSelection = NULL_var;
		spSpecOnSelection = pLeaf;

		if ( spSpecOnSelection != NULL_var )
		{
			CATBoolean existFlag = FALSE;
			for (int i = 1; i <= m_lstSpecPrds.Size(); i ++)
			{
				if (m_lstSpecPrds[i] == spSpecOnSelection)
				{
					m_lstSpecPrds.RemoveValue(spSpecOnSelection);
					existFlag = TRUE;
					break;
				}
			}

			if (existFlag == FALSE)
			{
				CATDocument* opiPrdDoc = NULL;
				PrdService::GetInstPrdDoc(spSpecOnSelection,opiPrdDoc);
				CATUnicodeString strPrdName;
				PrtService::GetPrdNumberFormDoc(opiPrdDoc,strPrdName);
				
				if (IsThisZPPrt(strPrdName))
				{
					PrtService::ktWarningMsgBox("不能选择ZP模型为安装零件，请重新选择！");
					PrtService::RemoveHSO(spSpecOnSelection);
				}
				else
					m_lstSpecPrds.Append(spSpecOnSelection);				
			}

			m_piDlg->_PrdSL->ClearLine();
			for (int i = 1; i <= m_lstSpecPrds.Size(); i ++)
			{
				//
				CATUnicodeString strShowPath("");
				CATPathElement *piPath = NULL;
				PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPrds[i],NULL);
				PrtService::PathElementString(piPath,strShowPath,TRUE);
				m_piDlg->_PrdSL->SetLine(strShowPath);

				piPath->Release();
				piPath=NULL;
			}

			if (m_lstSpecPrds.Size()==0)
			{
				m_piDlg->_PrdSL->SetLine("请选择连接零件");
			}
		}
	}

	//
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();

	m_piFirstSurfAgt->InitializeAcquisition();
	return TRUE;	
}


//激活相关代理
CATBoolean PrtFstDesignCmd::ActivePointsSL( void *UsefulData)
{
	//清除选择
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecPoints);
	//显示ISO POINTS
	ShowPointInfoInISO(m_piDlg->_PointsSL,m_lstSpecPoints);

	m_piPointsAgt->InitializeAcquisition();
	return TRUE;	
}
CATBoolean PrtFstDesignCmd::ActiveFirstSurfSL( void *UsefulData)
{
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecFirstSurfs);

	m_piFirstSurfAgt->InitializeAcquisition();
	return TRUE;
}
CATBoolean PrtFstDesignCmd::ActiveSecSurfSL( void *UsefulData)
{
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	PrtService::HighLightObjLst(m_lstSpecSecSurfs);

	m_piSecSurfAgt->InitializeAcquisition();
	return TRUE;
}

CATBoolean PrtFstDesignCmd::ActivePrdSL( void *UsefulData)
{
	m_piDlg->_PointsSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();

	//清除高亮
	PrtService::ClearHSO();
	//加入需要高亮的特征
	ShowSeletedLine(m_piDlg->_PrdSL,m_lstSpecPrds);

	m_piPrdAgt->InitializeAcquisition();
	return TRUE;
}
CATBoolean PrtFstDesignCmd::ActivePointGSMPB( void *UsefulData)
{
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();
	m_piDlg->_PrdSL->ClearSelect();

	m_piPointGSMAgt->InitializeAcquisition();
	return TRUE;
}

CATBoolean PrtFstDesignCmd::ChoosePointGSM( void *UsefulData)
{

	CATPathElement* piSelectElement =m_piPointGSMAgt->GetValue();//获得所选对象
	if (piSelectElement != NULL)
	{
		//获得SUB PATH
		CATBaseUnknown * pLeaf =NULL ;
		//获得路径下第一个特征spec类型
		pLeaf = (*piSelectElement)[piSelectElement->GetSize()-1];
		CATISpecObject_var spSpecOnSelection = NULL_var;
		spSpecOnSelection = pLeaf;
		//
		if ( spSpecOnSelection != NULL_var )
		{
			//获得几何图形集下面所有的点
			PrtService::GetContentSpecsByNameFromGSMTool(spSpecOnSelection,"CATIMfZeroDimResult",m_lstSpecPoints);

			m_piDlg->_PointsSL->ClearLine();
			for (int i = 1; i <= m_lstSpecPoints.Size(); i ++)
			{
				//
				CATUnicodeString strShowPath("");
				CATPathElement *piPath = NULL;
				PrtService::GetPathElementFromSpecObject(piPath,m_lstSpecPoints[i],NULL);
				PrtService::PathElementString(piPath,strShowPath,TRUE);
				m_piDlg->_PointsSL->SetLine(strShowPath);

				piPath->Release();
				piPath=NULL;

				PrtService::HighlightHSO(m_lstSpecPoints[i]);
			}

			if (m_lstSpecPoints.Size()==0)
			{
				m_piDlg->_PointsSL->SetLine("请选择安装点");
			}

			//显示安装点个数
			CATUnicodeString strCount("");
			strCount.BuildFromNum(m_lstSpecPoints.Size());
			strCount += " 个";
			m_piDlg->_PointCountEditor->SetText(strCount);
		}
	}
	
	m_piDlg->_PrdSL->ClearSelect();
	m_piDlg->_FirstSurfSL->ClearSelect();
	m_piDlg->_SecondSurfSL->ClearSelect();

	m_piPointGSMAgt->InitializeAcquisition();
	return TRUE;
}


//高亮显示当前所选行
void PrtFstDesignCmd::ShowSeletedLine(CATDlgSelectorList* opiSL,CATListValCATISpecObject_var olstSpecs)
{
	//如果为空，直接退出
	if (olstSpecs.Size() == 0)
	{
		return;
	}
	//获取所选行
	int NumberOfRowsSelected;
	NumberOfRowsSelected = opiSL->GetSelectCount();

	int *iSelectedRows = new int[NumberOfRowsSelected];
	opiSL->GetSelect(iSelectedRows,NumberOfRowsSelected);

	//重新添加高亮
	for (int i = 0; i < NumberOfRowsSelected; i ++)
	{
		PrtService::HighlightHSO(olstSpecs[iSelectedRows[i]+1]);
	}
}


//删除所有点
void PrtFstDesignCmd::DeleteAllPointsCB(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	PrtService::ClearHSO();
	m_lstSpecPoints.RemoveAll();
	m_piDlg->_PointsSL->ClearLine();
	m_piDlg->_PointsSL->SetLine("请选择安装点");

	//显示安装点个数
	CATUnicodeString strCount("");
	strCount.BuildFromNum(m_lstSpecPoints.Size());
	strCount += " 个";
	m_piDlg->_PointCountEditor->SetText(strCount);

	//获得并清空ISO
	m_piISO->Empty();
}

//在IOS中显示标记点
void PrtFstDesignCmd::ShowPointInfoInISO(CATDlgSelectorList* opiSL,CATListValCATISpecObject_var olstSpecs)
{
	//如果为空，直接退出
	if (olstSpecs.Size() == 0)
	{
		return;
	}
	//获取所选行
	int NumberOfRowsSelected;
	NumberOfRowsSelected = opiSL->GetSelectCount();

	int *iSelectedRows = new int[NumberOfRowsSelected];
	opiSL->GetSelect(iSelectedRows,NumberOfRowsSelected);

	//获得并清空ISO
	m_piISO->Empty();

	//重新添加高亮
	for (int i = 0; i < NumberOfRowsSelected; i ++)
	{
		CATIMeasurablePoint_var spMeasurablePt = olstSpecs[iSelectedRows[i]+1];
		if (spMeasurablePt==NULL_var)
		{
			return ;
		}
		CATMathPoint mPrjPt;
		spMeasurablePt->GetPoint(mPrjPt);

		CATIAlias_var spAliasOnPt = olstSpecs[iSelectedRows[i]+1];
		CATUnicodeString StrTextValue = spAliasOnPt->GetAlias();
		
		CATMathPointf TextPosNode;
		TextPosNode.x = (float)(mPrjPt.GetX());
		TextPosNode.y = (float)(mPrjPt.GetY());
		TextPosNode.z = (float)(mPrjPt.GetZ());

		CAT3DCustomRep * pRepForTextStart= new CAT3DCustomRep();
		CATGraphicAttributeSet   TextGaNode ;
		TextGaNode.SetColor(RED);
		TextGaNode.SetHighlightMode (0);
		CAT3DAnnotationTextGP   *pTextGPSrart = new CAT3DAnnotationTextGP(TextPosNode,StrTextValue);
		pRepForTextStart->AddGP(pTextGPSrart,TextGaNode);
		CATModelForRep3D *piRepPtAlias = new CATModelForRep3D() ;
		piRepPtAlias->SetRep(pRepForTextStart) ;
		m_piISO->AddElement(piRepPtAlias);

		piRepPtAlias->Release();
		piRepPtAlias=NULL;
	}
}

//判断一个曲面特征是否在另一个数组中
BOOL PrtFstDesignCmd::IsTheSpecInLstSpec(CATISpecObject_var iSpec, CATListValCATISpecObject_var iLstSpec)
{
	for (int i = 1; i <= iLstSpec.Size(); i ++)
	{
		if (iSpec == iLstSpec[i])
		{
			return TRUE;
		}
	}

	return FALSE;		
}

//获得传入特征的的父级节点
HRESULT PrtFstDesignCmd::GetLinkImportPrd(CATISpecObject_var& ispFeature,CATIProduct_var &ospSourcePrd)
{
	HRESULT rc = S_OK;
	ospSourcePrd=NULL_var;
	CATIMmiMechanicalImportApplicative* piLinkImport = NULL;
	//
	rc = ispFeature->QueryInterface(IID_CATIMmiMechanicalImportApplicative,(void**)&piLinkImport);
	//
	if (SUCCEEDED(rc) && (piLinkImport!=NULL))
	{
		CATIProduct_var spSourcePrd = NULL_var;
		piLinkImport->GetSourceProduct(ospSourcePrd);
		//
		piLinkImport->Release();
		piLinkImport=NULL;
		
		//输出路径测试
		/*if (ospSourcePrd!=NULL_var)
		{
			CATUnicodeString strShowPath("");
			CATPathElement *piPath = NULL;
			PrtService::GetPathElementFromSpecObject(piPath,ospSourcePrd,NULL);
			PrtService::PathElementString(piPath,strShowPath,TRUE);
			PrtService::ktInfoMsgBox(strShowPath);
		}*/
	}
	
	return rc;
}

//获得初始化的法线方向
HRESULT PrtFstDesignCmd::GetInitialArrow(CATISpecObject_var ispPoint, CATListValCATISpecObject_var ilstFirstSurf,CATListValCATISpecObject_var ilstSecSurf)
{
	HRESULT rc =S_OK;
	CATIGSMFactory_var spGSMFac = NULL_var;
	PrtService::GetGSMFactory(m_piDoc,spGSMFac);

	//计算法线方向
	double iLength1 = 100.0;
	double iLength2 = -100.0;
	CATICkeParm_var spCkeParm1 = PrtService::LocalInstLitteral(&iLength1, 1, "Length","Length"); 
	CATICkeParm_var spCkeParm2 = PrtService::LocalInstLitteral(&iLength2, 1, "Length", "Length"); 
	CATISpecObject_var spNormalLine = spGSMFac->CreateLineNormal(ilstFirstSurf[1],ispPoint,spCkeParm1,spCkeParm2,CATGSMSameOrientation);

	if (spNormalLine != NULL_var)
	{
		//得到两个交点
		CATISpecObject_var spIntersect01 = spGSMFac->CreateIntersect(spNormalLine,ilstFirstSurf[1]); 
		CATISpecObject_var spIntersect02 = spGSMFac->CreateIntersect(spNormalLine,ilstSecSurf[1]);

		CATISpecObject_var spGSMTool = NULL_var;
		PrtService::ObtainGSMTool(m_piDoc,"过程元素",spGSMTool);

		CATTry{
			PrtService::CAAGsiInsertInProceduralView(spIntersect01,spGSMTool);
			spIntersect01->Update();
		}

		// This block is specific for Update Errors
		CATCatch( CATMfErrUpdate, pError ){	
			// 			cerr << " Update Error: " << (pError-> GetDiagnostic()).ConvertToChar() << endl; 
			Flush(pError) ; 
			// When error happens, what to do 
			spIntersect01->GetFather()->Remove(spIntersect01);
			spIntersect01 = NULL_var;
		}
		CATEndTry;  	

		CATTry{
			PrtService::CAAGsiInsertInProceduralView(spIntersect02,spGSMTool);
			spIntersect02->Update();
		}

		// This block is specific for Update Errors
		CATCatch( CATMfErrUpdate, pError ){	
			// 			cerr << " Update Error: " << (pError-> GetDiagnostic()).ConvertToChar() << endl; 
			Flush(pError) ; 
			// When error happens, what to do 
			spIntersect02->GetFather()->Remove(spIntersect02);
			spIntersect02 = NULL_var;
		}
		CATEndTry; 

		//如果两个都不为空，挂载到结构树
		if (spIntersect01!=NULL_var && spIntersect02!=NULL_var)
		{		
			CATIMeasurablePoint_var spMeasurePoint1=spIntersect01;
			CATIMeasurablePoint_var spMeasurePoint2=spIntersect02;
			//
			CATMathPoint mathPoint1,mathPoint2;
			spMeasurePoint1->GetPoint(mathPoint1);
			spMeasurePoint2->GetPoint(mathPoint2);
			//
			spIntersect01->GetFather()->Remove(spIntersect01);
			spIntersect02->GetFather()->Remove(spIntersect02);
			//获得并清空ISO
			m_piISO->Empty();
			//
			CATMathDirectionf oArrowVector(mathPoint1,mathPoint2);
			//在OriginPoint处创建3D fixed arrow.
			CAT3DFixedArrowGP *pArrowGP = new CAT3DFixedArrowGP(mathPoint1,oArrowVector,20,5);
			//创建图形属性，包括Color和Thickness
			CATGraphicAttributeSet AttributsDir;
			AttributsDir.SetColor(GREEN);
			AttributsDir.SetThickness(2);
			//
			CAT3DCustomRep * pRepForArrow= new CAT3DCustomRep(pArrowGP,AttributsDir);
			//
			CATModelForRep3D *piRepPtAlias = new CATModelForRep3D();
			piRepPtAlias->SetRep(pRepForArrow);		
			//
			m_piISO->AddElement(piRepPtAlias);
			if( m_pi3DBagRep!=NULL)
			{
				m_pi3DBagRep->Release();
				m_pi3DBagRep=NULL;
			}
			m_pi3DBagRep = new CAT3DBagRep();m_pi3DBagRep->AddChild(*pRepForArrow);
			//
			CATFrmLayout *pFrmLayout = CATFrmLayout::GetCurrentLayout();
			CATFrmWindow *pFrmWindow = pFrmLayout->GetCurrentWindow();
			CATViewer *pViewer = pFrmWindow->GetViewer();
			pViewer->AddRep(m_pi3DBagRep);pViewer->Draw();
			//pISO->AddElement(piRepPtAlias);

			//
			if (m_piManipulator!=NULL)
			{
				m_piManipulator->Release();
				m_piManipulator=NULL;
			}
			m_piManipulator = new CAT3DManipulator(this,"Manip",m_pi3DBagRep,CAT3DManipulator::DirectionTranslation);
			//CATMathPoint P(0,0,0);
			CATMathVector I(1,0,0),J(0,1,0),K(0,0,1);
			CATMathAxis Axis(mathPoint1,I,J,K);
			m_piManipulator->SetPosition(Axis);
			CATMathDirection D(0,1,0);
			m_piManipulator->SetTranslationDirection(D);
		}
	}

	return rc;	
}

//箭头的回调函数
void PrtFstDesignCmd::CBManipulator(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	cout<<"CBManipulator(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)!"<<endl;
	CATMathAxis Position=((CAT3DManipulator *)cmd)->GetPosition();
	CAT4x4Matrix initialisationMatrix(Position);
	m_pi3DBagRep->SetMatrix(initialisationMatrix);
	//
	CATFrmLayout *pFrmLayout = CATFrmLayout::GetCurrentLayout();
	CATFrmWindow *pFrmWindow = pFrmLayout->GetCurrentWindow();
	CATViewer *pViewer = pFrmWindow->GetViewer();
	pViewer->Draw();
}