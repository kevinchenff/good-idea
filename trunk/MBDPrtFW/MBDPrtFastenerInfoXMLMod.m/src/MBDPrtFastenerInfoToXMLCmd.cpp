// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// MBDPrtFastenerInfoToXMLCmd.cpp
// The state chart based command: MBDPrtFastenerInfoToXMLCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2010  Creation: Code generated by the CAA wizard  ev5adm
//===================================================================
#include "MBDPrtFastenerInfoToXMLCmd.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( MBDPrtFastenerInfoToXMLCmd);

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MBDPrtFastenerInfoToXMLCmd::MBDPrtFastenerInfoToXMLCmd() :
  CATStateCommand ("MBDPrtFastenerInfoToXMLCmd", CATDlgEngOneShot, CATCommandModeShared) 
  ,m_pSaveFileDlg(NULL),m_strSaveFilePath(NULL)
  ,m_piDoc(NULL)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
{
	m_piDoc = PrtService::GetPrtDocument();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MBDPrtFastenerInfoToXMLCmd::~MBDPrtFastenerInfoToXMLCmd()
{
	if (m_pSaveFileDlg != NULL)
	{
		m_pSaveFileDlg->RequestDelayedDestruction();
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MBDPrtFastenerInfoToXMLCmd::BuildGraph()
{

	// 定义具体实现细节
	// 打开一个SaveFile对话框
	CATString iFileName("存储紧固件信息到XML文件");
	m_pSaveFileDlg = new CATDlgFile((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),iFileName,CATDlgFolderChooser | CATDlgWndModal);
	m_pSaveFileDlg->SetVisibility(CATDlgShow);

	CATUnicodeString DocStorageName = m_piDoc->storageName();
	int flag = DocStorageName.SearchSubString(":\\");
	if (flag != -1)
	{
		int dirPos = DocStorageName.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward);
		CATUnicodeString DocStoragePath = DocStorageName.SubString(0,dirPos);
		m_pSaveFileDlg->SetDirectory(DocStoragePath);

		//cout<<"零件存储路径："<<DocStoragePath.ConvertToChar()<<endl;
	}
	else
	{
		m_pSaveFileDlg->SetDirectory("c:\\");
	}

	// 两个消息响应
	AddAnalyseNotificationCB(m_pSaveFileDlg, 
		m_pSaveFileDlg->GetDiaCANCELNotification(), 
		(CATCommandMethod)&MBDPrtFastenerInfoToXMLCmd::OnSaveFileCancelAction, 
		NULL);  

	AddAnalyseNotificationCB(m_pSaveFileDlg, 
		m_pSaveFileDlg->GetWindCloseNotification(), 
		(CATCommandMethod)&MBDPrtFastenerInfoToXMLCmd::OnSaveFileCancelAction, 
		NULL); 

	int iTypeOfInput = 0;
	AddAnalyseNotificationCB(m_pSaveFileDlg, 
		m_pSaveFileDlg->GetDiaOKNotification(), 
		(CATCommandMethod)&MBDPrtFastenerInfoToXMLCmd::OnSaveFileOKAction, 
		&iTypeOfInput);   

}

// 点击cancel
void MBDPrtFastenerInfoToXMLCmd::OnSaveFileCancelAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
	//Specify that the command is finished
	if (m_pSaveFileDlg != NULL)
	{
		m_pSaveFileDlg->RequestDelayedDestruction();
		m_pSaveFileDlg = NULL;
	}

	//Specify that the command is finished
	RequestDelayedDestruction();
}

//
void MBDPrtFastenerInfoToXMLCmd::OnSaveFileOKAction(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{

	// 1 得到打开文件的全路径
	m_pSaveFileDlg->GetDirectory(m_strSaveFilePath);

	// 2 获取零件名称
	//获取零部件名称
	CATUnicodeString StrPartNumber;
	CATInit_var spInitOnDoc(m_piDoc);
	// 获得相应的容器类
	CATIPrtContainer * piPrtCont =  (CATIPrtContainer*) spInitOnDoc->GetRootContainer("CATIPrtContainer");
	CATIPrtPart_var spPart = piPrtCont->GetPart();
	CATISpecObject_var spSpecOnPart = spPart;
	// 获得Product，更改零件编号
	CATIProduct_var spProduct = spPart->GetProduct( );
	StrPartNumber = spProduct->GetPartNumber();

	// 3 解析零部件中的装配信息
	// 调用XML写功能，把CATIA结构树上的紧固件信息存储到该零件名称对应的XML文件中
	CATIDOMElement_var spRoot;

	CATUnicodeString uXMLFileName;
	uXMLFileName = m_strSaveFilePath + "\\" + "FastenerInfo_" + StrPartNumber + ".xml";

	XMLService * piMBDXMLService = new XMLService();
	piMBDXMLService->CreateXMLDoc(uXMLFileName,"MBDFastenerInfo",spRoot);

	//添加节点
    //  [12/31/2010 ev5adm]
	CATIDOMElement_var iopNewElm;
	CATUnicodeString    uName;
	CATUnicodeString    uValue;
	CATListOfCATUnicodeString listAttNames;
	CATListOfCATUnicodeString listAttValues;

	listAttNames.Append("V5PartName");
	listAttNames.Append("ParamType");
	listAttNames.Append("DPEAttr");
	listAttValues.Append(StrPartNumber);
	listAttValues.Append("Default");
	listAttValues.Append("DPEPartName");
	piMBDXMLService->addXMLNode(spRoot,iopNewElm,"IDENTIFIER","",listAttNames,listAttValues,FALSE);
	listAttNames.RemoveAll();
	listAttValues.RemoveAll();


	//获取catia结构树上名称为“紧固件”的几何图形集
	CATListValCATUnicodeString  ListStrSearchedFeatName;
	CATListValCATISpecObject_var ListValOfspSearchGSMTool;
	ListStrSearchedFeatName.Append("紧固件");

	PrtService::CAAGsiSearchFeatureFromName(m_piDoc, ListStrSearchedFeatName,ListValOfspSearchGSMTool);

	//如果找到该几何图形集
	if (ListValOfspSearchGSMTool[1] != NULL_var)
	{
		CATIDescendants_var spDescendants=  ListValOfspSearchGSMTool[1];
		int childrenNb= spDescendants->GetNumberOfChildren();

		//创建总节点
		CATIDOMElement_var iopParElm;
		piMBDXMLService->addXMLNode(spRoot,iopParElm,"FastenerTypes","",listAttNames,listAttValues,TRUE);

		for (int i = 1; i <= childrenNb; i ++)
		{
			CATISpecObject_var spFirstChild = spDescendants->GetChildAtPosition(i);
			CATIAlias_var spFirstAlias = spFirstChild;
			CATUnicodeString strFirstName = spFirstAlias->GetAlias();

			//解析每类型紧固件数量及具体信息
			CATIDescendants_var spSecDescendants =  spFirstChild;
			CATListValCATISpecObject_var  oLstLines;
			spSecDescendants->GetAllChildren("CATIGSMLine",oLstLines);
			CATUnicodeString TypeCount;
			TypeCount.BuildFromNum(oLstLines.Size());

			//挂载紧固件集合名称
			listAttNames.Append("FastenerTypeName");
			listAttValues.Append(strFirstName);
			listAttNames.Append("FastenerCount");
			listAttValues.Append(TypeCount);
			piMBDXMLService->addXMLNode(iopParElm,iopNewElm,"FastenerType","",listAttNames,listAttValues,TRUE); 
			listAttNames.RemoveAll();
			listAttValues.RemoveAll();

			// 解析每条线的信息
			for (int j = 1; j <= oLstLines.Size(); j ++)
			{
				//
				CATIAlias_var spLineAlias = oLstLines[j];
				CATUnicodeString ustrLineName = spLineAlias->GetAlias();
				listAttNames.Append("牌号");
				listAttValues.Append(ustrLineName);

				//
				PrtService::GetGSMToolsParameters(oLstLines[j],listAttNames,listAttValues);

				CATIDOMElement_var spLineElm;
				piMBDXMLService->addXMLNode(iopNewElm,spLineElm,"Line","",listAttNames,listAttValues,FALSE); 
				listAttNames.RemoveAll();
				listAttValues.RemoveAll();
			}			

		}

	}
	else
		PrtService::ShowDlgNotify("提示信息","该零件中未定义“紧固件”几何图形集！");

	piMBDXMLService->SaveXMLDoc(uXMLFileName);
	PrtService::ShowDlgNotify("存储信息","完成紧固件信息解析，存储路径如下：\n" + uXMLFileName);

	// 退出交互命令程序
	// 析构选择对话框
	if (m_pSaveFileDlg != NULL)
	{
		m_pSaveFileDlg->RequestDelayedDestruction();
		m_pSaveFileDlg = NULL;
	}
	delete piMBDXMLService;

	RequestDelayedDestruction();
}